&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	
	ОткрытьФорму("ВнешняяОбработка.АРМКонтролера.Форма.Форма",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

#Область Команды
&НаКлиенте
Процедура КомандаОк(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОКЗавершить", ЭтотОбъект);
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ Тогда
		ПоказатьВопрос(ОписаниеОповещения, "За вами будут закреплены данные коробки! "+Символы.ПС
									  +"Убедитесь в том, что все коробки считаны правильно!", 
									   РежимДиалогаВопрос.ОКОтмена, 5,КодВозвратаДиалога.Отмена,"Внимание",КодВозвратаДиалога.Отмена)
	Иначе
		ПоказатьВопрос(ОписаниеОповещения, "При завершении будут закончены работы по контролю заказа и сформирован документ перемещения! "+Символы.ПС
									  +"Убедитесь в том, что весь товар просканирован и распределен по качеству правильно!", 
									   РежимДиалогаВопрос.ОКОтмена, 5,КодВозвратаДиалога.Отмена,"Внимание",КодВозвратаДиалога.Отмена)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОКЗавершить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Отказ = Ложь;
		втПараметрЗаказТовары.Очистить();
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ Тогда
			ЗабратьКоробки();
			ДокументОснование = Неопределено;
			ТекущийПользователь = Неопределено;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
			
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжидания;
			УстановитьВидимостьДоступность();
			ЗапуститьПроведениеДокументов(); 
			
			Индикатор = 0;
			
			ПодключитьОбработчикОжидания("ОбработчикОжидания",5,Ложь);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжидания() Экспорт 
	//Прогресс = ПолучитьИзВременногоХранилища(АдресХранилища);
	//Сообщить(Прогресс);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроведениеДокументов(АвтоматическоеОбновление = Ложь, ОбновитьНезаметно = Ложь)
	
	ДлительнаяОперация = ПроведениеДокументовВФоне();
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 5; // Быстрее стандартного интервала, т.к. выводится на начальной странице.
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроведениеДокументовВФонеЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПроведениеДокументовВФоне()
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;

	УИД = Новый УникальныйИдентификатор();
	АдресХранилища = ПоместитьВоВременноеХранилище(0, УИД);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // запускать сразу
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проведение документов контроля'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТекущийПользователь", ТекущийПользователь);
	ПараметрыПроцедуры.Вставить("ДокументОснование",   ДокументОснование);
	ПараметрыПроцедуры.Вставить("РабочееМесто",        НастройкиРМК.РабочееМесто);
	ПараметрыПроцедуры.Вставить("СкладПолучатель",     СкладПолучатель);
	ПараметрыПроцедуры.Вставить("СкладУценки",         СкладУценки);
	ПараметрыПроцедуры.Вставить("АдресХранилища",      УИД);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("БС_ВызовСервера.ФоновоеПроведениеДокументовКонтроль",
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
	ТекущиеДелаВХранилище = Результат.АдресРезультата;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроведениеДокументовВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	ОтключитьОбработчикОжидания("ОбработчикОжидания");
	
	Ответ = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Результат = Неопределено Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемкаОтгрузка;
		ПоказатьПредупреждение(Неопределено, Информация, 5, "Отказ");
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемкаОтгрузка;
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ДокументОснование = Неопределено;
		ТекущийПользователь = Неопределено;
		ДокументПеремещение = Ответ.ДокументПеремещение;
		ДокументПеремещениеБрак = Ответ.ДокументПеремещениеБрак;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПечать;
		Попытка
			Если ПечатьНаКлумбу Тогда
				КомандаПечать(Неопределено);
				//++rsv я ору ваще, все гениальное просто))
				КомандаПечать(Неопределено);
				КомандаПечать(Неопределено);
				КомандаПечать(Неопределено);
				КомандаПечать(Неопределено);
			Иначе
				КомандаПечать(Неопределено);
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(,"Ошибка печати!", 5, "Внимание!");
		КонецПопытки;
	КонецЕсли; 
	
	УстановитьВидимостьДоступность()
	
КонецПроцедуры

&НаСервере
Процедура ЗабратьКоробки() Экспорт
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Для Каждого Строка Из ТаблицаУЛ Цикл
		
		МенеджерЗаписи = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДокументОснование = ДокументОснование;
		МенеджерЗаписи.ДокументОтгрузки = ДокументПеремещение;
		МенеджерЗаписи.РабочееМесто = НастройкиРМК.РабочееМесто;
		МенеджерЗаписи.Пользователь = ТекущийПользователь;
		МенеджерЗаписи.Период = ТекущаяДатаСеанса;
		МенеджерЗаписи.Склад = ДокументОснование.СкладОтправитель;
		МенеджерЗаписи.УпаковочныйЛист = Строка.УпаковочныйЛист;
		МенеджерЗаписи.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало;
		МенеджерЗаписи.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Отгрузка;
		МенеджерЗаписи.Записать();	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
	ОтменаСервер();
	УстановитьВидимостьДоступность()
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтгрузку(Команда)
	
	Если ТекущийЭтап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Контроль Тогда
		ЗаполнитьТаблицыТовары();
		ОбновитьДеревоТоваровПоТабличнымЧастям();
		КомандаНачатьКонтроль();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемкаОтгрузка;
	ИначеЕсли ТекущийЭтап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Отгрузка Тогда
		ЗаполнитьСписокУпаковочныхЛистов();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ;
	КонецЕсли;
	//УстановитьВидимостьДоступность()
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокУпаковочныхЛистов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.УпаковочныйЛист.Код КАК Код,
	               |	ПеремещениеТоваровТовары.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	ЛОЖЬ КАК Считан
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПеремещениеТоваровТовары.УпаковочныйЛист,
	               |	ПеремещениеТоваровТовары.УпаковочныйЛист.Код";
	Запрос.УстановитьПараметр("Ссылка", ДокументПеремещение);
	ТаблицаУЛ.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПриемку(Команда)
	Отказ = Ложь;	
	ВыполнитьРаспределение(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьТовары(Команда)
	ОчиститьТоварыНаСервере();
	ОбновитьДеревоТоваровПоТабличнымЧастям();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершениеРаботы(Команда)
	СанкционированоеЗакрытие = Истина;
	втПараметрЗаказТовары.Очистить();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПринятьРасхождения(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПринятьРасхожденияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "При нажатии на кнопку ""ОК"", в бухгалтерию будет отправлена информация, "+Символы.ПС
									  +"об удержании с вашей заработной платы суммы "+СуммаИтогоРсхождений+" руб."+Символы.ПС
									  +"Если вы не согласны с этими расхождения, прошу обратиться к начальнику торгового отдела!", 
									   РежимДиалогаВопрос.ОКОтмена, 30,КодВозвратаДиалога.Отмена,"Внимание",КодВозвратаДиалога.Отмена)
									   
КонецПроцедуры

&НаКлиенте
Процедура КомандаПринятьРасхожденияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПринятьРасхожденияНаСервере();
		КомандаСменитьПользователя("");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СобытияФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	#Если НЕ ВебКлиент Тогда
		ИмяКомпа = ИмяКомпьютера();
	#Иначе
		ИмяКомпа = "";
	#КонецЕсли
	
	Заголовок = "[АРМ Контролера] на " + ИмяКомпа + " [" + ИдентификаторРМ
		+ "]";
	УстановитьВидимостьДоступность();

	//tror20181108 записать файл звука в каталог временных файлов
	Каталог = КаталогВременныхФайлов();
	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".mp3";
	ПутьКФайлуЗвукаВКаталогеВременныхФайлов = Каталог + ИмяФайла;
	Данные = ПолучитьИзВременногоХранилища(АдресЗвукаВоВременномХранилище);
	Данные.Записать(ПутьКФайлуЗвукаВКаталогеВременныхФайлов);

	УстановитьСтрокуХТМЛНаКлиенте();
	//tror20181108>		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	//TODO: Вставить содержимое обработчика
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
	Если ЗакрытьСистему() Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗакрытьСистему()
	
	Возврат НЕ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Администратор");  	
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ИнициализироватьРабочееМесто(Отказ);
	//tror20181108 звук
	ДДЗвука = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЗвукТоварДобавлен");
	АдресЗвукаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДДЗвука, ЭтаФорма.УникальныйИдентификатор);
	//tror20181108>

	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРабочееМесто(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиРМКСкладскаяЛогистика.Ссылка КАК Ссылка,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НастройкиРМКСкладскаяЛогистика.Назначение = ЗНАЧЕНИЕ(Перечисление.КАБС_НазначенияСкладов.Основной)
	               |				ТОГДА НастройкиРМКСкладскаяЛогистика.Склад
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |		КОНЕЦ) КАК СкладОтправитель,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НастройкиРМКСкладскаяЛогистика.Назначение = ЗНАЧЕНИЕ(Перечисление.КАБС_НазначенияСкладов.Уценка)
	               |				ТОГДА НастройкиРМКСкладскаяЛогистика.Склад
	               |			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |		КОНЕЦ) КАК СкладУценки,
	               |	НастройкиРМКСкладскаяЛогистика.Ссылка.РабочееМесто.Код КАК Код
	               |ИЗ
	               |	Справочник.НастройкиРМК.СкладскаяЛогистика КАК НастройкиРМКСкладскаяЛогистика
	               |ГДЕ
	               |	НастройкиРМКСкладскаяЛогистика.Ссылка.РабочееМесто = &РабочееМесто
	               |	И (НастройкиРМКСкладскаяЛогистика.Назначение = ЗНАЧЕНИЕ(Перечисление.КАБС_НазначенияСкладов.Основной)
	               |			ИЛИ НастройкиРМКСкладскаяЛогистика.Назначение = ЗНАЧЕНИЕ(Перечисление.КАБС_НазначенияСкладов.Уценка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НастройкиРМКСкладскаяЛогистика.Ссылка";
	Запрос.УстановитьПараметр("РабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиРМК     = Выборка.Ссылка;
		СкладОтправитель = Выборка.СкладОтправитель;
		СкладУценки      = Выборка.СкладУценки;
		ИдентификаторРМ  = Выборка.Код;
		ИспользоватьУпаковочныеЛисты = Ложь;
		Если СкладОтправитель = Справочники.Склады.ПустаяСсылка() ИЛИ СкладУценки = Справочники.Склады.ПустаяСсылка() Тогда
			Сообщить("Заполните склады в настройках рабочего места!");
			Отказ = Истина;	
		КонецЕсли;
	Иначе
		Сообщить("Настройте рабочее место!");
		Отказ = Истина;
	КонецЕсли;
	
	ПользовательИБ = ПараметрыСеанса.ТекущийПользователь;
	
	Для Счетчик = 1 По 100 Цикл
        НоваяСтрока = ПредставлениеЧисел.Добавить();
		НоваяСтрока.Число = Счетчик;
		НоваяСтрока.Строка = Строка(Счетчик);
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//активировать форму
	ЭтаФорма.Активизировать();
	ЭтаФорма.ТекущийЭлемент = Элементы.Справка;
	//ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПеремещения Тогда 
				ОбработатьШтрихкодыРаспоряжений(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь Тогда
				ОбработатьШтрихкодыПользователя(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемкаОтгрузка Тогда
				ВызватьИнтерактивноеОкно(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ Тогда
				ОбработатьШтрихкодыУЛ(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр))
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Конец ПодключаемоеОборудование
	УстановитьВидимостьДоступность()
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ОбработатьШтрихкодыУЛ(Данные)
	
	пУпаковочныйЛист = ПолучитьУпаковочныйЛист(Данные.Штрихкод);
	Если НЕ пУпаковочныйЛист = Неопределено Тогда
		//Если ПроверкаВозможностиРаботыСУЛ(пУпаковочныйЛист) Тогда
		//	Если ЭтоВодитель Тогда
		//		СнятиеУпаковочногоЛистаСВодителя(пУпаковочныйЛист);
		//	Иначе
		//		ТекущийУЛ = пУпаковочныйЛист;
		//		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка;
		//	КонецЕсли;
		//КонецЕсли;	
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУпаковочныйЛист(Код)
	
	Структура = Новый Структура;
	Структура.Вставить("Код", Код);
	НайденныеСтроки = ТаблицаУЛ.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() Тогда
		НайденныеСтроки[0].Считан = Истина;
		Возврат НайденныеСтроки[0].УпаковочныйЛист;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция МожноЗабратьКоробки()
	
	Структура = Новый Структура;
	Структура.Вставить("Считан", Ложь);
	НайденныеСтроки = ТаблицаУЛ.НайтиСтроки(Структура);
	Если НайденныеСтроки.Количество() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#Область Сервис

	&НаСервере
	Функция ПолучитьПараметрСеансаНаСервере(НаименованиеПараметра)
		Возврат ПараметрыСеанса[НаименованиеПараметра];
	КонецФункции
	
&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.КнопкаУпаковать.Доступность = МожноУпаковать;
	Элементы.КнопкаОк.Доступность = МожноЗакончитьКонтроль;
	//Элементы.КнопкаОк.Доступность = МожноЗабратьКоробки();
	Если Строка(ТекущийЭтап) = "Контроль" Тогда
		Элементы.ДекорацияПеремещения.ТекстНевыбраннойКартинки = "Считайте штрихкод заказа на перемещение";
	Иначе
		Элементы.ДекорацияПеремещения.ТекстНевыбраннойКартинки = "Считайте штрихкод накладной на перемещение";
	КонецЕсли;
	
	Элементы.КомандаЗавершениеРаботы.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
	Элементы.КнопкаОк.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ
	                          ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемкаОтгрузка;
	Элементы.КнопкаУпаковать.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемкаОтгрузка;				  
	Элементы.КомандаПечать.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПечать
								   ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАдминистрирования;
	Элементы.КомандаПродолжить.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПечать;
	Элементы.КомандаЗавершитьСборку.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершить;
	Элементы.КомандаЗаблокировать.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершить
	                          ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПеремещения
							  ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемкаОтгрузка
							  ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ
							  ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасхождений
							  ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАдминистрирования;
	Элементы.КомандаПринятьРасхождения.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасхождений;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	
	//ДокументОснование = Элементы.ТаблицаЗаказов.ТекущаяСтрока;
	
	ТаблицаПеремещения.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = ТаблицаПеремещения.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказНаПеремещение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ДокументОснование;
					
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПоиска(СтруктураОбновления)
	
	СтруктураПоиска = Новый Структура();
	
	СтруктураПоиска.Вставить("СУпаковочнымЛистом", Новый Структура("Номенклатура, Характеристика, УпаковочныйЛист"));
	СтруктураПоиска.Вставить("БезУпаковочогоЛиста", Новый Структура("Номенклатура, Характеристика"));
	//СтруктураПоиска.Вставить("ПоНоменклатуре", Новый Структура("Номенклатура"));
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска.СУпаковочнымЛистом, СтруктураОбновления);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезУпаковочогоЛиста, СтруктураОбновления);
	//ЗаполнитьЗначенияСвойств(СтруктураПоиска.ПоНоменклатуре, СтруктураОбновления);
	
	Возврат СтруктураПоиска;
	
КонецФункции

&НаСервере
Процедура ОбновитьДеревоТоваровПоТабличнымЧастям()
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПредставлениеЧисел.Число КАК Число,
	               |	ПредставлениеЧисел.Строка КАК Строка
	               |ПОМЕСТИТЬ врПредставлениеЧисел
	               |ИЗ
	               |	&ПредставлениеЧисел КАК ПредставлениеЧисел
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказНаПеремещениеТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказНаПеремещениеТовары.Характеристика КАК Характеристика,
	               |	СУММА(ЗаказНаПеремещениеТовары.Количество) КАК КоличествоПлан,
	               |	СУММА(ЗаказНаПеремещениеТовары.КоличествоУпаковок) КАК КоличествоУпаковокПлан,
	               |	ЕСТЬNULL(ЗаказНаПеремещениеТовары.Номенклатура.Наименование, """") КАК НоменклатураНаименование,
	               |	ЕСТЬNULL(ЗаказНаПеремещениеТовары.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
	               |	ЗаказНаПеремещениеТовары.Упаковка КАК Упаковка,
	               |	ВЫБОР
	               |		КОГДА ЗаказНаПеремещениеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЗаказНаПеремещениеТовары.Упаковка.Числитель = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ЗаказНаПеремещениеТовары.Упаковка.Числитель
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Коэффициент,
	               |	МИНИМУМ(ЗаказНаПеремещениеТовары.НомерСтроки) КАК НомерСтроки
	               |ПОМЕСТИТЬ врТаблицаТоварыПлан
	               |ИЗ
	               |	Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	               |ГДЕ
	               |	ЗаказНаПеремещениеТовары.Ссылка = &ДокументОснование
	               |	И НЕ ЗаказНаПеремещениеТовары.Отменено
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказНаПеремещениеТовары.Характеристика,
	               |	ЗаказНаПеремещениеТовары.Номенклатура,
	               |	ЗаказНаПеремещениеТовары.Упаковка,
	               |	ЕСТЬNULL(ЗаказНаПеремещениеТовары.Номенклатура.Наименование, """"),
	               |	ЕСТЬNULL(ЗаказНаПеремещениеТовары.Характеристика.Наименование, """"),
	               |	ВЫБОР
	               |		КОГДА ЗаказНаПеремещениеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЗаказНаПеремещениеТовары.Упаковка.Числитель = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ЗаказНаПеремещениеТовары.Упаковка.Числитель
	               |			КОНЕЦ
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК КоличествоФакт,
	               |	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковокФакт,
	               |	NULL КАК КоличествоБрак,
	               |	NULL КАК КоличествоУпаковокБрак,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
	               |	ВЫБОР
	               |		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Коэффициент
	               |ПОМЕСТИТЬ врТаблицаТоварыФакт
	               |ИЗ
	               |	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
	               |ГДЕ
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ЛОЖЬ
	               |	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
	               |	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Характеристика,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист,
	               |	NULL,
	               |	NULL,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Количество,
	               |	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Упаковка,
	               |	ВЫБОР
	               |		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
	               |			КОНЕЦ
	               |	КОНЕЦ
	               |ИЗ
	               |	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
	               |ГДЕ
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ИСТИНА
	               |	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
	               |	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА врТаблицаТоварыПлан.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
	               |		ИНАЧЕ врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врТаблицаТоварыПлан.ХарактеристикаНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
	               |	КОНЕЦ КАК Товар,
	               |	врТаблицаТоварыПлан.Номенклатура КАК Номенклатура,
	               |	врТаблицаТоварыПлан.Характеристика КАК Характеристика,
	               |	врТаблицаТоварыФакт.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	врТаблицаТоварыПлан.КоличествоПлан КАК КоличествоПлан,
	               |	врТаблицаТоварыПлан.КоличествоУпаковокПлан КАК КоличествоУпаковокПлан,
	               |	СУММА(врТаблицаТоварыФакт.КоличествоФакт) КАК КоличествоФакт,
	               |	СУММА(врТаблицаТоварыФакт.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт,
	               |	СУММА(врТаблицаТоварыФакт.КоличествоБрак) КАК КоличествоБрак,
	               |	СУММА(врТаблицаТоварыФакт.КоличествоУпаковокБрак) КАК КоличествоУпаковокБрак,
	               |	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	               |	СУММА(ЦеныНоменклатурыСрезПоследних.Цена * врТаблицаТоварыПлан.КоличествоУпаковокПлан) КАК СуммаПлан,
	               |	врТаблицаТоварыПлан.Упаковка КАК Упаковка,
	               |	врТаблицаТоварыПлан.Коэффициент КАК Коэффициент,
	               |	врТаблицаТоварыПлан.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	врТаблицаТоварыПлан КАК врТаблицаТоварыПлан
	               |		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаТоварыФакт КАК врТаблицаТоварыФакт
	               |		ПО врТаблицаТоварыПлан.Номенклатура = врТаблицаТоварыФакт.Номенклатура
	               |			И врТаблицаТоварыПлан.Характеристика = врТаблицаТоварыФакт.Характеристика
	               |			И врТаблицаТоварыПлан.Коэффициент = врТаблицаТоварыФакт.Коэффициент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	               |		ПО врТаблицаТоварыПлан.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	               |			И врТаблицаТоварыПлан.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	               |		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
	               |		ПО врТаблицаТоварыПлан.Коэффициент = врПредставлениеЧисел.Число
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	врТаблицаТоварыПлан.Характеристика,
	               |	врТаблицаТоварыПлан.Номенклатура,
	               |	врТаблицаТоварыФакт.УпаковочныйЛист,
	               |	врТаблицаТоварыПлан.КоличествоПлан,
	               |	врТаблицаТоварыПлан.КоличествоУпаковокПлан,
	               |	ЦеныНоменклатурыСрезПоследних.Цена,
	               |	врТаблицаТоварыПлан.Упаковка,
	               |	врТаблицаТоварыПлан.Коэффициент,
	               |	ВЫБОР
	               |		КОГДА врТаблицаТоварыПлан.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
	               |		ИНАЧЕ врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врТаблицаТоварыПлан.ХарактеристикаНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
	               |	КОНЕЦ,
	               |	врТаблицаТоварыПлан.НомерСтроки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	врТаблицаТоварыПлан.НомерСтроки
	               |ИТОГИ
	               |	МАКСИМУМ(Номенклатура),
	               |	МАКСИМУМ(Характеристика),
	               |	СРЕДНЕЕ(КоличествоПлан),
	               |	СРЕДНЕЕ(КоличествоУпаковокПлан),
	               |	СУММА(КоличествоФакт),
	               |	СУММА(КоличествоУпаковокФакт),
	               |	СУММА(КоличествоБрак),
	               |	СУММА(КоличествоУпаковокБрак),
	               |	МАКСИМУМ(Цена),
	               |	СРЕДНЕЕ(СуммаПлан),
	               |	МАКСИМУМ(Упаковка),
	               |	МАКСИМУМ(Коэффициент),
	               |	МИНИМУМ(НомерСтроки)
	               |ПО
	               |	Товар
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	врТаблицаТоварыФакт.Номенклатура КАК Номенклатура,
	               |	врТаблицаТоварыФакт.Характеристика КАК Характеристика,
	               |	врТаблицаТоварыФакт.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	врТаблицаТоварыФакт.КоличествоФакт КАК КоличествоФакт,
	               |	врТаблицаТоварыФакт.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	               |	врТаблицаТоварыФакт.КоличествоБрак КАК КоличествоБрак,
	               |	врТаблицаТоварыФакт.КоличествоУпаковокБрак КАК КоличествоУпаковокБрак,
	               |	врТаблицаТоварыФакт.Упаковка КАК Упаковка,
	               |	врТаблицаТоварыФакт.Коэффициент КАК Коэффициент
	               |ИЗ
	               |	врТаблицаТоварыФакт КАК врТаблицаТоварыФакт
	               |ГДЕ
	               |	врТаблицаТоварыФакт.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	врТаблицаТоварыФакт.Номенклатура КАК Номенклатура,
	               |	врТаблицаТоварыФакт.Характеристика КАК Характеристика,
	               |	врТаблицаТоварыФакт.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	врТаблицаТоварыФакт.КоличествоФакт КАК КоличествоФакт,
	               |	врТаблицаТоварыФакт.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	               |	врТаблицаТоварыФакт.КоличествоБрак КАК КоличествоБрак,
	               |	врТаблицаТоварыФакт.КоличествоУпаковокБрак КАК КоличествоУпаковокБрак,
	               |	врТаблицаТоварыФакт.Упаковка КАК Упаковка,
	               |	врТаблицаТоварыФакт.Коэффициент КАК Коэффициент
	               |ИЗ
	               |	врТаблицаТоварыФакт КАК врТаблицаТоварыФакт";
	Запрос.УстановитьПараметр("ПредставлениеЧисел", ПредставлениеЧисел.Выгрузить());
	Запрос.УстановитьПараметр("ДокументОснование",  ДокументОснование);
	Запрос.УстановитьПараметр("ВидЦены",            ДокументОснование.СкладПолучатель.РозничныйВидЦены);
	Запрос.УстановитьПараметр("РабочееМесто",       НастройкиРМК.РабочееМесто);
	Запрос.УстановитьПараметр("Пользователь",       ТекущийПользователь);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДеревоРезультат = Результат[3].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Если Результат[4].Пустой() Тогда
		МожноУпаковать = Ложь
	Иначе
		МожноУпаковать = Истина
	КонецЕсли;
	
	Если Результат[5].Пустой() Тогда
		МожноЗакончитьКонтроль = Ложь
	Иначе
		МожноЗакончитьКонтроль = Истина
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоРезультат, "ТоварыДерево");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыТовары();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказыНаПеремещениеОстатки.Номенклатура КАК Номенклатура,
	               |	ЗаказыНаПеремещениеОстатки.Характеристика КАК Характеристика,
	               |	ЗаказыНаПеремещениеОстатки.КОформлениюОстаток КАК Количество,
	               |	ЗаказыНаПеремещениеОстатки.КОформлениюОстаток КАК КоличествоУпаковок,
	               |	ЗаказыНаПеремещениеОстатки.КодСтроки КАК КодСтроки
	               |ИЗ
	               |	РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ЗаказНаПеремещение = &ЗаказНаПеремещение) КАК ЗаказыНаПеремещениеОстатки";
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ДокументОснование);
	
	Объект.ТоварыПоЗаказу.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если Найти(ДокументОснование.СкладПолучатель.Наименование, "Клумба") Тогда
		
		ПечатьНаКлумбу = Истина;
		
	Иначе
		
		ПечатьНаКлумбу = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОсновныеПроцедурыИФункции
&НаСервере
Процедура ВыполнитьРаспределение(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Период = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
	               |	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
	               |	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
	               |ИЗ
	               |	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
	               |ГДЕ
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
	               |	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	               |	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
	               |	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
	               |	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
	               |	0 КАК КодСтроки
	               |ИЗ
	               |	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
	               |ГДЕ
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
	               |	И НЕ КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ИСТИНА
	               |	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
	               |	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
	               |	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
	               |	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
	               |ИЗ
	               |	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
	               |ГДЕ
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
	               |	И НЕ КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ЛОЖЬ
	               |	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
	               |	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Результат = Запрос.ВыполнитьПакет();

	Если Результат[0].Пустой() Тогда
		Если НЕ Результат[2].Пустой() Тогда
			ДокументПеремещение = СоздатьДокументПеремещения(Результат[2].Выгрузить(), Период, ДокументОснование.СкладПолучатель);
		КонецЕсли;
		ОтменитьСтрокиЗаказа();
		//ДокументСнятиеСРезерва = Документы.БС_СнятиеРезерваЗаказаПеремещения.СоздатьДокумент();
		//ДокументСнятиеСРезерва.Дата = Период+1; 
		//ДокументСнятиеСРезерва.Заказ = ДокументОснование;
		//ДокументСнятиеСРезерва.Ответственный = ТекущийПользователь;
		//ДокументСнятиеСРезерва.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Если НЕ Результат[1].Пустой() Тогда
			ДокументПеремещениеБрак = СоздатьДокументПеремещения(Результат[1].Выгрузить(), Период+2, СкладУценки);
		КонецЕсли;	
	Иначе
		Информация = "Существуют неупакованные строки заказа!";
		Отказ = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСтрокиЗаказа()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказНаПеремещениеТовары.Ссылка КАК Ссылка,
	               |	ЗаказНаПеремещениеТовары.НомерСтроки КАК НомерСтроки,
	               |	ЗаказНаПеремещениеТовары.НачалоОтгрузки КАК НачалоОтгрузки,
	               |	ЗаказНаПеремещениеТовары.ОкончаниеПоступления КАК ОкончаниеПоступления,
	               |	ЗаказНаПеремещениеТовары.Количество КАК Количество,
	               |	ЗаказНаПеремещениеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	ЗаказНаПеремещениеТовары.Номенклатура КАК Номенклатура,
	               |	ЗаказНаПеремещениеТовары.Упаковка КАК Упаковка,
	               |	ЗаказНаПеремещениеТовары.Характеристика КАК Характеристика,
	               |	ЗаказНаПеремещениеТовары.Отменено КАК Отменено,
	               |	ЗаказНаПеремещениеТовары.КодСтроки КАК КодСтроки,
	               |	ЗаказНаПеремещениеТовары.ВариантОбеспечения КАК ВариантОбеспечения,
	               |	ЗаказНаПеремещениеТовары.Назначение КАК Назначение,
	               |	ЗаказНаПеремещениеТовары.Серия КАК Серия,
	               |	ЗаказНаПеремещениеТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	ЗаказНаПеремещениеТовары.ПотребностьУпаковок КАК ПотребностьУпаковок,
	               |	ЗаказНаПеремещениеТовары.ОтклонениеУпаковка КАК ОтклонениеУпаковка,
	               |	ЗаказНаПеремещениеТовары.Флаг КАК Флаг,
	               |	ЗаказНаПеремещениеТовары.АвтоСтрока КАК АвтоСтрока,
	               |	ЗаказНаПеремещениеТовары.фс_ПричиныКорректировкиЗаказа КАК фс_ПричиныКорректировкиЗаказа,
	               |	ВЫБОР
	               |		КОГДА ЗаказНаПеремещениеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЗаказНаПеремещениеТовары.Упаковка.Числитель = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ЗаказНаПеремещениеТовары.Упаковка.Числитель
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Коэффициент
	               |ПОМЕСТИТЬ врСтрокиЗаказа
	               |ИЗ
	               |	Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	               |ГДЕ
	               |	ЗаказНаПеремещениеТовары.Ссылка = &ЗаказНаПеремещение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
	               |	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
	               |	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
	               |	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
	               |	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
	               |	СУММА(ПеремещениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество,
	               |	ПеремещениеТоваровТовары.КодСтроки КАК КодСтроки,
	               |	ПеремещениеТоваровТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	ПеремещениеТоваровТовары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
	               |	ПеремещениеТоваровТовары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
	               |	ПеремещениеТоваровТовары.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	               |	ПеремещениеТоваровТовары.Сделка КАК Сделка,
	               |	ПеремещениеТоваровТовары.Назначение КАК Назначение,
	               |	ПеремещениеТоваровТовары.НазначениеОтправителя КАК НазначениеОтправителя,
	               |	ПеремещениеТоваровТовары.Серия КАК Серия,
	               |	ПеремещениеТоваровТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	               |	ПеремещениеТоваровТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	ПеремещениеТоваровТовары.Цена КАК Цена,
	               |	СУММА(ПеремещениеТоваровТовары.Сумма) КАК Сумма,
	               |	ПеремещениеТоваровТовары.ВидЦены КАК ВидЦены,
	               |	ПеремещениеТоваровТовары.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	ПеремещениеТоваровТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	               |	ПеремещениеТоваровТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	               |	ВЫБОР
	               |		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Коэффициент
	               |ПОМЕСТИТЬ врСтрокиПеремещения
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	               |ГДЕ
	               |	ПеремещениеТоваровТовары.Ссылка.ЗаказНаПеремещение = &ЗаказНаПеремещение
	               |	И НЕ ПеремещениеТоваровТовары.Ссылка.ПометкаУдаления
	               |	И ПеремещениеТоваровТовары.Ссылка.СкладОтправитель = &СкладОтправитель
	               |	И ПеремещениеТоваровТовары.Ссылка.СкладПолучатель = &СкладПолучатель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПеремещениеТоваровТовары.ВидЦены,
	               |	ПеремещениеТоваровТовары.АналитикаУчетаНоменклатуры,
	               |	ПеремещениеТоваровТовары.Сделка,
	               |	ПеремещениеТоваровТовары.Ссылка,
	               |	ПеремещениеТоваровТовары.ИдентификаторСтроки,
	               |	ПеремещениеТоваровТовары.Назначение,
	               |	ПеремещениеТоваровТовары.Характеристика,
	               |	ПеремещениеТоваровТовары.УпаковочныйЛист,
	               |	ПеремещениеТоваровТовары.Упаковка,
	               |	ПеремещениеТоваровТовары.ЗаказНаПеремещение,
	               |	ПеремещениеТоваровТовары.УпаковочныйЛистРодитель,
	               |	ПеремещениеТоваровТовары.Серия,
	               |	ПеремещениеТоваровТовары.ЭтоУпаковочныйЛист,
	               |	ПеремещениеТоваровТовары.НазначениеОтправителя,
	               |	ПеремещениеТоваровТовары.Номенклатура,
	               |	ПеремещениеТоваровТовары.НомерСтроки,
	               |	ПеремещениеТоваровТовары.КодСтроки,
	               |	ПеремещениеТоваровТовары.СтатусУказанияСерий,
	               |	ПеремещениеТоваровТовары.СтатусУказанияСерийОтправитель,
	               |	ПеремещениеТоваровТовары.СтатусУказанияСерийПолучатель,
	               |	ПеремещениеТоваровТовары.Цена,
	               |	ВЫБОР
	               |		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
	               |					ТОГДА 1
	               |				ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
	               |			КОНЕЦ
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	врСтрокиЗаказа.НачалоОтгрузки КАК НачалоОтгрузки,
	               |	врСтрокиЗаказа.ОкончаниеПоступления КАК ОкончаниеПоступления,
	               |	врСтрокиЗаказа.Количество КАК Количество,
	               |	врСтрокиЗаказа.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	врСтрокиЗаказа.Номенклатура КАК Номенклатура,
	               |	врСтрокиЗаказа.Упаковка КАК Упаковка,
	               |	врСтрокиЗаказа.Характеристика КАК Характеристика,
	               |	врСтрокиЗаказа.Отменено КАК Отменено,
	               |	врСтрокиЗаказа.КодСтроки КАК КодСтроки,
	               |	врСтрокиЗаказа.ВариантОбеспечения КАК ВариантОбеспечения,
	               |	врСтрокиЗаказа.Назначение КАК Назначение,
	               |	врСтрокиЗаказа.Серия КАК Серия,
	               |	врСтрокиЗаказа.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	врСтрокиЗаказа.ПотребностьУпаковок КАК ПотребностьУпаковок,
	               |	врСтрокиЗаказа.ОтклонениеУпаковка КАК ОтклонениеУпаковка,
	               |	врСтрокиЗаказа.Флаг КАК Флаг,
	               |	врСтрокиЗаказа.АвтоСтрока КАК АвтоСтрока,
	               |	врСтрокиЗаказа.фс_ПричиныКорректировкиЗаказа КАК фс_ПричиныКорректировкиЗаказа,
	               |	СУММА(ЕСТЬNULL(врСтрокиПеремещения.КоличествоУпаковок, 0)) КАК КоличествоУпаковокОтгружено,
	               |	СУММА(ЕСТЬNULL(врСтрокиПеремещения.Количество, 0)) КАК КоличествоОтгружено
	               |ПОМЕСТИТЬ врТовары
	               |ИЗ
	               |	врСтрокиЗаказа КАК врСтрокиЗаказа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ врСтрокиПеремещения КАК врСтрокиПеремещения
	               |		ПО врСтрокиЗаказа.КодСтроки = врСтрокиПеремещения.КодСтроки
	               |			И врСтрокиЗаказа.Номенклатура = врСтрокиПеремещения.Номенклатура
	               |			И врСтрокиЗаказа.Характеристика = врСтрокиПеремещения.Характеристика
	               |			И врСтрокиЗаказа.Коэффициент = врСтрокиПеремещения.Коэффициент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	врСтрокиЗаказа.НачалоОтгрузки,
	               |	врСтрокиЗаказа.Номенклатура,
	               |	врСтрокиЗаказа.ОкончаниеПоступления,
	               |	врСтрокиЗаказа.Упаковка,
	               |	врСтрокиЗаказа.Характеристика,
	               |	врСтрокиЗаказа.ВариантОбеспечения,
	               |	врСтрокиЗаказа.Отменено,
	               |	врСтрокиЗаказа.Назначение,
	               |	врСтрокиЗаказа.фс_ПричиныКорректировкиЗаказа,
	               |	врСтрокиЗаказа.Серия,
	               |	врСтрокиЗаказа.АвтоСтрока,
	               |	врСтрокиЗаказа.Количество,
	               |	врСтрокиЗаказа.КоличествоУпаковок,
	               |	врСтрокиЗаказа.КодСтроки,
	               |	врСтрокиЗаказа.СтатусУказанияСерий,
	               |	врСтрокиЗаказа.ПотребностьУпаковок,
	               |	врСтрокиЗаказа.ОтклонениеУпаковка,
	               |	врСтрокиЗаказа.Флаг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	врТовары.НачалоОтгрузки КАК НачалоОтгрузки,
	               |	врТовары.ОкончаниеПоступления КАК ОкончаниеПоступления,
	               |	врТовары.КоличествоОтгружено КАК Количество,
	               |	врТовары.КоличествоУпаковокОтгружено КАК КоличествоУпаковок,
	               |	врТовары.Номенклатура КАК Номенклатура,
	               |	врТовары.Упаковка КАК Упаковка,
	               |	врТовары.Характеристика КАК Характеристика,
	               |	врТовары.Отменено КАК Отменено,
	               |	врТовары.КодСтроки КАК КодСтроки,
	               |	врТовары.ВариантОбеспечения КАК ВариантОбеспечения,
	               |	врТовары.Назначение КАК Назначение,
	               |	врТовары.Серия КАК Серия,
	               |	врТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	врТовары.ПотребностьУпаковок КАК ПотребностьУпаковок,
	               |	врТовары.ОтклонениеУпаковка КАК ОтклонениеУпаковка,
	               |	врТовары.Флаг КАК Флаг,
	               |	врТовары.АвтоСтрока КАК АвтоСтрока,
	               |	врТовары.фс_ПричиныКорректировкиЗаказа КАК фс_ПричиныКорректировкиЗаказа,
	               |	врТовары.Количество КАК КоличествоКОтгрузке,
	               |	врТовары.КоличествоУпаковок КАК КоличествоУпаковокКОтгрузке,
	               |	врТовары.КоличествоОтгружено КАК КоличествоОтгружено,
	               |	врТовары.КоличествоУпаковокОтгружено КАК КоличествоУпаковокОтгружено,
	               |	врТовары.КодСтроки КАК ПолеУпорядочивания
	               |ИЗ
	               |	врТовары КАК врТовары
	               |ГДЕ
	               |	врТовары.КоличествоУпаковок <> врТовары.КоличествоУпаковокОтгружено
	               |	И врТовары.КоличествоОтгружено <> 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	врТовары.НачалоОтгрузки,
	               |	врТовары.ОкончаниеПоступления,
	               |	врТовары.Количество - врТовары.КоличествоОтгружено,
	               |	врТовары.КоличествоУпаковок - врТовары.КоличествоУпаковокОтгружено,
	               |	врТовары.Номенклатура,
	               |	врТовары.Упаковка,
	               |	врТовары.Характеристика,
	               |	ИСТИНА,
	               |	0,
	               |	врТовары.ВариантОбеспечения,
	               |	врТовары.Назначение,
	               |	врТовары.Серия,
	               |	врТовары.СтатусУказанияСерий,
	               |	врТовары.ПотребностьУпаковок,
	               |	врТовары.ОтклонениеУпаковка,
	               |	врТовары.Флаг,
	               |	врТовары.АвтоСтрока,
	               |	врТовары.фс_ПричиныКорректировкиЗаказа,
	               |	врТовары.Количество,
	               |	врТовары.КоличествоУпаковок,
	               |	врТовары.КоличествоОтгружено,
	               |	врТовары.КоличествоУпаковокОтгружено,
	               |	врТовары.КодСтроки
	               |ИЗ
	               |	врТовары КАК врТовары
	               |ГДЕ
	               |	врТовары.КоличествоУпаковок <> врТовары.КоличествоУпаковокОтгружено
	               |	И врТовары.КоличествоОтгружено <> 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	врТовары.НачалоОтгрузки,
	               |	врТовары.ОкончаниеПоступления,
	               |	врТовары.Количество,
	               |	врТовары.КоличествоУпаковок,
	               |	врТовары.Номенклатура,
	               |	врТовары.Упаковка,
	               |	врТовары.Характеристика,
	               |	ИСТИНА,
	               |	врТовары.КодСтроки,
	               |	врТовары.ВариантОбеспечения,
	               |	врТовары.Назначение,
	               |	врТовары.Серия,
	               |	врТовары.СтатусУказанияСерий,
	               |	врТовары.ПотребностьУпаковок,
	               |	врТовары.ОтклонениеУпаковка,
	               |	врТовары.Флаг,
	               |	врТовары.АвтоСтрока,
	               |	врТовары.фс_ПричиныКорректировкиЗаказа,
	               |	врТовары.Количество,
	               |	врТовары.КоличествоУпаковок,
	               |	врТовары.КоличествоОтгружено,
	               |	врТовары.КоличествоУпаковокОтгружено,
	               |	врТовары.КодСтроки
	               |ИЗ
	               |	врТовары КАК врТовары
	               |ГДЕ
	               |	врТовары.КоличествоУпаковок <> врТовары.КоличествоУпаковокОтгружено
	               |	И врТовары.КоличествоОтгружено = 0
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	врТовары.НачалоОтгрузки,
	               |	врТовары.ОкончаниеПоступления,
	               |	врТовары.Количество,
	               |	врТовары.КоличествоУпаковок,
	               |	врТовары.Номенклатура,
	               |	врТовары.Упаковка,
	               |	врТовары.Характеристика,
	               |	врТовары.Отменено,
	               |	врТовары.КодСтроки,
	               |	врТовары.ВариантОбеспечения,
	               |	врТовары.Назначение,
	               |	врТовары.Серия,
	               |	врТовары.СтатусУказанияСерий,
	               |	врТовары.ПотребностьУпаковок,
	               |	врТовары.ОтклонениеУпаковка,
	               |	врТовары.Флаг,
	               |	врТовары.АвтоСтрока,
	               |	врТовары.фс_ПричиныКорректировкиЗаказа,
	               |	врТовары.Количество,
	               |	врТовары.КоличествоУпаковок,
	               |	врТовары.КоличествоОтгружено,
	               |	врТовары.КоличествоУпаковокОтгружено,
	               |	врТовары.КодСтроки
	               |ИЗ
	               |	врТовары КАК врТовары
	               |ГДЕ
	               |	врТовары.КоличествоУпаковок = врТовары.КоличествоУпаковокОтгружено
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПолеУпорядочивания,
	               |	КодСтроки УБЫВ";
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ДокументОснование);
	Запрос.УстановитьПараметр("СкладОтправитель",   ДокументОснование.СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель",    ДокументОснование.СкладПолучатель);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	ДокументОбъект = ДокументОснование.ПолучитьОбъект();
	ДокументОбъект.Товары.Загрузить(Результат.Выгрузить());
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	СтруктураПоиска = Новый Структура("КодСтроки, Номенклатура, Характеристика, Упаковка");
	//	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
	//	СтрокиЗаказа = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
	//	
	//	Если СтрокиЗаказа.Количество() Тогда
	//		Строка = СтрокиЗаказа[0];
	//		ЗаполнитьЗначенияСвойств(Строка, Выборка, "Количество, КоличествоУпаковок, ");
	//	Иначе
	//		Строка = ДокументОбъект.Товары.Добавить();
	//		ЗаполнитьЗначенияСвойств(Строка, Выборка, , "КодСтроки");
	//	КонецЕсли;	
	//		
	//КонецЦикла;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументПеремещения(ТаблицаЗначений, Период, СкладПолучатель)
	
	ТоварыДляДокумента = ТаблицаЗначений.Скопировать(,"КодСтроки, Номенклатура, Характеристика, Упаковка, УпаковочныйЛист, КоличествоУпаковок, Количество, Цена, Сумма");
	ТоварыДляДокумента.Свернуть("КодСтроки, Номенклатура, Характеристика, Упаковка, УпаковочныйЛист, Цена", "КоличествоУпаковок, Количество, Сумма");
	
	ДокументОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
	
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(ДокументОснование);
	ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.ПеремещениеТоваровПараметрыОткрытияФормы(МассивЗаказов);
	ДокументОбъект.Заполнить(ПараметрыОткрытия.Основание);
	ДокументОбъект.ЗаказНаПеремещение = ДокументОснование;
	ДокументОбъект.СкладПолучатель = СкладПолучатель;
	ДокументОбъект.Дата = Период;	
	ДокументОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	ДокументОбъект.Товары.Загрузить(ТоварыДляДокумента);
	ДокументОбъект.Комментарий = "#АРМ Отгрузки: Создан при отгрузке товаров пользователем";
	ДокументОбъект.Ответственный = ТекущийПользователь;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		
		МенеджерЗаписи = РегистрыСведений.КАБС_ПредварительныеСтрокиПеремещение.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ДокументОтгрузки = ДокументОбъект.Ссылка;
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ДокументОбъект.Ссылка;	
	
КонецФункции

&НаКлиенте
Процедура ТаблицаЗаказовПриАктивизацииСтроки(Элемент)
	УстановитьОтбор();
	УстановитьВидимостьДоступность();
КонецПроцедуры
#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

//tror20181109
Процедура ЗаполнитьвтПараметрЗаказТоварыНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказНаПеремещениеТовары.Ссылка КАК Ссылка,
	|	ЗаказНаПеремещениеТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказНаПеремещениеТовары.Количество КАК Количество,
	|	ЗаказНаПеремещениеТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказНаПеремещениеТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНаПеремещениеТовары.Упаковка КАК Упаковка,
	|	ЗаказНаПеремещениеТовары.Характеристика КАК Характеристика,
	|	ЗаказНаПеремещениеТовары.Отменено КАК Отменено,
	|	ЗаказНаПеремещениеТовары.КодСтроки КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ЗаказНаПеремещениеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ЗаказНаПеремещениеТовары.Упаковка.Числитель = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЗаказНаПеремещениеТовары.Упаковка.Числитель
	|		КОНЕЦ
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ врЗаказТоварыПред
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|ГДЕ
	|	ЗаказНаПеремещениеТовары.Ссылка = &ДокументОснование
	|	И
	|	НЕ ЗаказНаПеремещениеТовары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрезЦен.Номенклатура КАК Номенклатура,
	|	СрезЦен.Характеристика КАК Характеристика,
	|	СрезЦен.Цена КАК Цена
	|ПОМЕСТИТЬ втРегистрСведенийЦеныНоменклатурыСрезПоследних
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены
	|	И Номенклатура В
	|		(ВЫБРАТЬ
	|			врЗаказТоварыПред.Номенклатура
	|		ИЗ
	|			врЗаказТоварыПред)
	|	И Характеристика В
	|		(ВЫБРАТЬ
	|			врЗаказТоварыПред.Характеристика
	|		ИЗ
	|			врЗаказТоварыПред)
	|	И (Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	ИЛИ Упаковка.Числитель = 0
	|	ИЛИ Упаковка.Числитель = 1)) КАК СрезЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врЗаказТоварыПред.Ссылка КАК Ссылка,
	|	врЗаказТоварыПред.НомерСтроки КАК НомерСтроки,
	|	врЗаказТоварыПред.Количество КАК Количество,
	|	врЗаказТоварыПред.КоличествоУпаковок КАК КоличествоУпаковок,
	|	врЗаказТоварыПред.Номенклатура КАК Номенклатура,
	|	врЗаказТоварыПред.Упаковка КАК Упаковка,
	|	врЗаказТоварыПред.Характеристика КАК Характеристика,
	|	врЗаказТоварыПред.Отменено КАК Отменено,
	|	врЗаказТоварыПред.КодСтроки КАК КодСтроки,
	|	врЗаказТоварыПред.Коэффициент КАК Коэффициент,
	|	втРегистрСведенийЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	врЗаказТоварыПред КАК врЗаказТоварыПред
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРегистрСведенийЦеныНоменклатурыСрезПоследних КАК втРегистрСведенийЦеныНоменклатурыСрезПоследних
	|		ПО врЗаказТоварыПред.Номенклатура = втРегистрСведенийЦеныНоменклатурыСрезПоследних.Номенклатура
	|		И врЗаказТоварыПред.Характеристика = втРегистрСведенийЦеныНоменклатурыСрезПоследних.Характеристика";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ВидЦены", ДокументОснование.СкладПолучатель.УчетныйВидЦены);
	
	втПараметрЗаказТовары.Загрузить( Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры
//tror20181109>	

&НаСервере
Процедура ОбработатьШтрихкодыНоменклатурыНаСервере(ЭтоБрак, ДанныеШтрихкодов)
	
	Если ЭтоБрак = Неопределено Тогда
		Возврат	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПредставлениеЧисел.Число КАК Число,
	|	ПредставлениеЧисел.Строка КАК Строка
	|ПОМЕСТИТЬ врПредставлениеЧисел
	|ИЗ
	|	&ПредставлениеЧисел КАК ПредставлениеЧисел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ШтрихкодыНоменклатуры.Упаковка.Числитель = 0
	|				ТОГДА 1
	|			ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Числитель
	|		КОНЕЦ
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ врШтрихкоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
	|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
	|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
	|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
	|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
	|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
	|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
	|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
	|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.Количество) КАК Количество,
	|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|			КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
	|				ТОГДА 1
	|			ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
	|		КОНЕЦ
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ врОстаткиОтгружено
	|ИЗ
	|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
	|ГДЕ
	|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
	|	И КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель = &СкладОтправитель
	|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
	|	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
	|	И КАБС_ПредварительныеСтрокиПеремещение.КодСтроки <> 0
	|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто,
	|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь,
	|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель,
	|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
	|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика,
	|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование,
	|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель,
	|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки,
	|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка,
	|	ВЫБОР
	|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|			КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
	|				ТОГДА 1
	|			ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
	|		КОНЕЦ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПараметрЗаказТовары.Номенклатура КАК Номенклатура,
	|	втПараметрЗаказТовары.Характеристика КАК Характеристика,
	|	втПараметрЗаказТовары.Количество КАК Количество,
	|	втПараметрЗаказТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	втПараметрЗаказТовары.КодСтроки КАК КодСтроки,
	|	втПараметрЗаказТовары.Упаковка КАК Упаковка,
	|	втПараметрЗаказТовары.Коэффициент КАК Коэффициент,
	|	втПараметрЗаказТовары.Цена КАК Цена,
	|	втПараметрЗаказТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ врЗаказТовары
	|ИЗ
	|	&втПараметрЗаказТовары КАК втПараметрЗаказТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врЗаказТовары.Номенклатура КАК Номенклатура,
	|	врЗаказТовары.Характеристика КАК Характеристика,
	|	врЗаказТовары.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(врЗаказТовары.Количество, 0) КАК КОформлениюОстаток,
	|	СУММА(ЕСТЬNULL(врОстаткиОтгружено.Количество, 0)) КАК ОтгруженоОстаток,
	|	врЗаказТовары.Упаковка КАК Упаковка,
	|	врЗаказТовары.Коэффициент КАК Коэффициент,
	|	врЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	врЗаказТовары.Цена КАК Цена
	|ПОМЕСТИТЬ врОстаткиКЗаказу
	|ИЗ
	|	врЗаказТовары КАК врЗаказТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ врОстаткиОтгружено КАК врОстаткиОтгружено
	|		ПО врЗаказТовары.Номенклатура = врОстаткиОтгружено.Номенклатура
	|		И врЗаказТовары.Характеристика = врОстаткиОтгружено.Характеристика
	|		И врЗаказТовары.КодСтроки = врОстаткиОтгружено.КодСтроки
	|		И врЗаказТовары.Коэффициент = врОстаткиОтгружено.Коэффициент
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(врЗаказТовары.Количество, 0),
	|	врЗаказТовары.КодСтроки,
	|	врЗаказТовары.Характеристика,
	|	врЗаказТовары.Номенклатура,
	|	врЗаказТовары.Упаковка,
	|	врЗаказТовары.НомерСтроки,
	|	врЗаказТовары.Коэффициент,
	|	врЗаказТовары.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врШтрихкоды.Штрихкод КАК Штрихкод,
	|	врШтрихкоды.Номенклатура КАК Номенклатура,
	|	врШтрихкоды.Характеристика КАК Характеристика,
	|	врШтрихкоды.Упаковка КАК Упаковка,
	|	&СкладОтправитель КАК СкладОтправитель,
	|	&СкладПолучатель КАК СкладПолучатель,
	|	&ДокументОснование КАК ДокументОснование,
	|	1 КАК КоличествоУпаковок,
	|	&Пользователь КАК Пользователь,
	|	&РабочееМесто КАК РабочееМесто,
	|	&Период КАК Период,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА врШтрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(врОстаткиКЗаказу.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(врОстаткиКЗаказу.Цена, 0) * врШтрихкоды.Коэффициент
	|	КОНЕЦ, 0) КАК Цена,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА врШтрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(врОстаткиКЗаказу.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(врОстаткиКЗаказу.Цена, 0) * врШтрихкоды.Коэффициент
	|	КОНЕЦ, 0) КАК Сумма,
	|	врШтрихкоды.Коэффициент КАК Количество,
	|	&ЭтоБрак КАК ЭтоБрак,
	|	ЕСТЬNULL(врОстаткиКЗаказу.КОформлениюОстаток, 0) КАК КОформлениюОстаток,
	|	ЕСТЬNULL(врОстаткиКЗаказу.ОтгруженоОстаток, 0) КАК ОтгруженоОстаток,
	|	врОстаткиКЗаказу.КодСтроки КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА врШтрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА врШтрихкоды.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
	|		ИНАЧЕ врШтрихкоды.Номенклатура.Наименование + "", "" + врШтрихкоды.Характеристика.Наименование + "", "" +
	|			врПредставлениеЧисел.Строка + "" шт""
	|	КОНЕЦ КАК Товар
	|ИЗ
	|	врШтрихкоды КАК врШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ врОстаткиКЗаказу КАК врОстаткиКЗаказу
	|		ПО врШтрихкоды.Номенклатура = врОстаткиКЗаказу.Номенклатура
	|		И врШтрихкоды.Характеристика = врОстаткиКЗаказу.Характеристика
	|		И врШтрихкоды.Коэффициент = врОстаткиКЗаказу.Коэффициент
	|		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
	|		ПО врШтрихкоды.Коэффициент = врПредставлениеЧисел.Число
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки
	|ИТОГИ
	|	СУММА(КоличествоУпаковок),
	|	СУММА(Количество),
	|	СУММА(КОформлениюОстаток),
	|	СУММА(ОтгруженоОстаток)
	|ПО
	|	Товар";

	Запрос.УстановитьПараметр("ПредставлениеЧисел", ПредставлениеЧисел.Выгрузить());
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Штрихкод", ДанныеШтрихкодов[0].Штрихкод);   
	Запрос.УстановитьПараметр("СкладОтправитель", ДокументОснование.СкладОтправитель);
	
	//tror20181109
	Если ТипЗнч(втПараметрЗаказТовары) <> Тип("ДанныеФормыКоллекция") ИЛИ втПараметрЗаказТовары.Количество() = 0 Тогда
		ЗаполнитьвтПараметрЗаказТоварыНаСервере(); 
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("втПараметрЗаказТовары", втПараметрЗаказТовары.Выгрузить());
	//tror20181109>
	
	Если ЭтоБрак Тогда
		Запрос.УстановитьПараметр("СкладПолучатель", СкладУценки);
	Иначе
		Запрос.УстановитьПараметр("СкладПолучатель", ДокументОснование.СкладПолучатель);	
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидЦены", ДокументОснование.СкладПолучатель.УчетныйВидЦены);
	Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ЭтоБрак", ЭтоБрак);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Информация = "Товар не найден!";
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КОформлениюОстаток = 0 Тогда
			Если Выборка.Количество = 1 Тогда
				Информация = "Отсутствует штучный товар "+Выборка.Товар+" в заказе! Считайте штрихкод упаковки";
				Прервать;
			Иначе
				Информация = "Отсутствует товар "+Выборка.Товар+" в заказе!";
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.КОформлениюОстаток = Выборка.ОтгруженоОстаток Тогда
			Информация = "Недостаточно товара "+Выборка.Товар+" к отгрузке! Отгружено "+Выборка.ОтгруженоОстаток+" из "+Выборка.КОформлениюОстаток;
			Прервать;
		КонецЕсли;
		
		Если Выборка.Сумма = 0 ИЛИ Выборка.Цена = 0 Тогда
			Информация = "Отсутствует цена на "+Выборка.Товар+"! Товар не был добавлен к отгрузке! Обратитесь к менеджеру склада";
			Прервать;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.КОформлениюОстаток >= ВыборкаДетальныеЗаписи.ОтгруженоОстаток+ВыборкаДетальныеЗаписи.Количество Тогда
				//пишем в рабочий запись
				МенеджерЗаписи = РегистрыСведений.КАБС_ПредварительныеСтрокиПеремещение.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи); 
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Количество = МенеджерЗаписи.Количество+ВыборкаДетальныеЗаписи.Количество;
					МенеджерЗаписи.КоличествоУпаковок = МенеджерЗаписи.КоличествоУпаковок+ВыборкаДетальныеЗаписи.КоличествоУпаковок;
					МенеджерЗаписи.Сумма = МенеджерЗаписи.Сумма+ВыборкаДетальныеЗаписи.Сумма;
				Иначе
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
				КонецЕсли;
				МенеджерЗаписи.Записать();
				//пишем в контроль запись
				МенеджерЗаписи = РегистрыСведений.КАБС_ПредварительныеСтрокиПеремещениеКонтроль.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Количество = МенеджерЗаписи.Количество+ВыборкаДетальныеЗаписи.Количество;
					МенеджерЗаписи.КоличествоУпаковок = МенеджерЗаписи.КоличествоУпаковок+ВыборкаДетальныеЗаписи.КоличествоУпаковок;
					МенеджерЗаписи.Сумма = МенеджерЗаписи.Сумма+ВыборкаДетальныеЗаписи.Сумма;
				Иначе
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
				КонецЕсли;
				МенеджерЗаписи.Записать();
				ОбновитьДеревоТоваровПоТабличнымЧастям();
				УстановитьКурсорВДереве(ВыборкаДетальныеЗаписи.Товар);
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКурсорВДереве(КлючСтроки)
	КоллекцияЭлементов = ТоварыДерево.ПолучитьЭлементы();
	// Позиционирование курсора в дереве значений.
	Если Не ПустаяСтрока(КлючСтроки) Тогда
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Товар", ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, Ложь);
		Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыНоменклатуры(ЭтоБрак, ДанныеШтрихкодов) Экспорт
	
	ОбработатьШтрихкодыНоменклатурыНаСервере(ЭтоБрак, ДанныеШтрихкодов);
	Если ЗначениеЗаполнено(Информация) Тогда
		ПоказатьПредупреждение(Неопределено, Информация, 5, "Отказ");
		Информация = "";
	Иначе
		//tror20181108
		ОзвучитьСумму();
		//tror20181108>
	КонецЕсли;
	УстановитьВидимостьДоступность();
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыУпаковочныхЛистов(ДанныеШтрихкодов)
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		Если ДанныеШтрихкодов.Количество() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	УпаковочныйЛистТовары.Ссылка КАК Ссылка,
			               |	УпаковочныйЛистТовары.НомерСтроки КАК НомерСтроки,
			               |	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
			               |	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
			               |	УпаковочныйЛистТовары.Серия КАК Серия,
			               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			               |	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			               |	УпаковочныйЛистТовары.Количество КАК Количество,
			               |	УпаковочныйЛистТовары.Ссылка КАК УпаковочныйЛист,
			               |	УпаковочныйЛистТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			               |	УпаковочныйЛистТовары.Комментарий КАК Комментарий,
			               |	УпаковочныйЛистТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
			               |	УпаковочныйЛистТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			               |	УпаковочныйЛистТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
			               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
			               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * УпаковочныйЛистТовары.Количество КАК Сумма,
			               |	ЕСТЬNULL(КАБС_УпаковочныеЛистыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоУпаковочныхЛистов
			               |ИЗ
			               |	Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
			               |		ПО УпаковочныйЛистТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			               |			И УпаковочныйЛистТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КАБС_УпаковочныеЛистыНаСкладах.Остатки(, Склад = &СкладОтправитель) КАК КАБС_УпаковочныеЛистыНаСкладахОстатки
			               |		ПО УпаковочныйЛистТовары.Ссылка = КАБС_УпаковочныеЛистыНаСкладахОстатки.УпаковочныйЛист
			               |ГДЕ
			               |	УпаковочныйЛистТовары.Ссылка.Код = &Код";
			Запрос.УстановитьПараметр("Код", ДанныеШтрихкодов[0].Штрихкод);
			Запрос.УстановитьПараметр("СкладОтправитель", ДокументОснование.СкладОтправитель);
			Запрос.УстановитьПараметр("ВидЦены", ДокументОснование.СкладОтправитель.УчетныйВидЦены);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоУпаковочныхЛистов>0 Тогда
					СтруктураПоиска = СтруктураПоиска(Выборка);
					НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска.СУпаковочнымЛистом);
					НайденныеСтрокиФакт = Объект.Товары.НайтиСтроки(СтруктураПоиска.БезУпаковочогоЛиста);
					НайденныеСтрокиПлан = Объект.ТоварыПоЗаказу.НайтиСтроки(СтруктураПоиска.БезУпаковочогоЛиста);
					Если НайденныеСтроки.Количество() = 0 И НайденныеСтрокиПлан.Количество() Тогда
						Если НайденныеСтрокиФакт.Количество() Тогда
							ОсталосьОтгрузить = НайденныеСтрокиПлан[0].Количество-НайденныеСтрокиФакт[0].Количество;
						Иначе
							ОсталосьОтгрузить = НайденныеСтрокиПлан[0].Количество;
						КонецЕсли;
						
						Если ОсталосьОтгрузить Тогда
							Количество = Мин(Выборка.Количество, ОсталосьОтгрузить);
							НоваяСтрока = Объект.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							НоваяСтрока.КодСтроки = НайденныеСтрокиПлан[0].КодСтроки;
							НоваяСтрока.Количество = Количество;
							НоваяСтрока.КоличествоУпаковок = Количество;	
						Иначе
							Информация = "[Товар "+Выборка.Номенклатура+" отгружен полностью!]";
							Возврат
						КонецЕсли;
						
						КоличествоСверх = Выборка.Количество-Количество;
						
						Если КоличествоСверх Тогда
							НоваяСтрока = Объект.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
							//НоваяСтрока.КодСтроки = НайденныеСтрокиПлан[0].КодСтроки;
							НоваяСтрока.Количество = КоличествоСверх;
							НоваяСтрока.КоличествоУпаковок = КоличествоСверх;
						КонецЕсли;
						
						ОбновитьДеревоТоваровПоТабличнымЧастям();
					КонецЕсли;
				Иначе
					Информация = "[Отсутствует УЛ №"+ДанныеШтрихкодов[0].Штрихкод+" на складе "+ДокументОснование.СкладОтправитель+"!]";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыПользователя(Данные)
		
	пТекущийПользователь = ПолучитьПользователяПоШтрихкоду(Данные.Штрихкод);
	Если ЗначениеЗаполнено(пТекущийПользователь) Тогда
		Если Строка(пТекущийПользователь) = "Администратор" Тогда
			ТекущийПользователь = пТекущийПользователь;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАдминистрирования;
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(ТекущийЭтап) Тогда
			Если Строка(пТекущийПользователь) = "Администратор" Тогда
				Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАдминистрирования;
			КонецЕсли;
			ТекущийПользователь = пТекущийПользователь
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Недостаточно прав.'"),5, "Отказ");
			Возврат;
		КонецЕсли;
		//ЭтотОбъект.Заголовок = "["+ТекущийПользователь+"]";
		Результат = ПроверкаВозможностиРаботыПользователя(ТекущийПользователь); 
		Если Результат = Неопределено 
		   И (Строка(ТекущийЭтап) = "Контроль" ИЛИ Строка(ТекущийЭтап) = "Отгрузка") Тогда
		    //++ rsv получим информацию о расхождениях
			СтрокиДерева = РасхожденияДопущенныеПользователем.ПолучитьЭлементы();
			
			Если СтрокиДерева.Количество() Тогда
				//Развернуть все строки дерева 
				Для Каждого Строка Из СтрокиДерева Цикл 
					Элементы.РасхожденияДопущенныеПользователем.Развернуть(Строка.ПолучитьИдентификатор()); 
				КонецЦикла;
				Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасхождений;
			Иначе
				Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПеремещения;
			КонецЕсли;
			//-- rsv
			//ЭтотОбъект.Заголовок = "[Завершите работы по текущему заказу!]";
		Иначе
			Если НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершить И Строка(ТекущийЭтап) = "Сборка" Тогда
			    ПоказатьПредупреждение(Неопределено, "Отсутствует документ в сборке!",5, "Внимание");
			ИначеЕсли НЕ Результат = "" Тогда
				ПоказатьПредупреждение(Неопределено, Результат, 5, "Внимание");
			КонецЕсли;
		КонецЕсли
	Иначе
		//ВыдатьЗвуковоеСообщениеWindows(Ложь);
		//Сигнал();
		//ЭтотОбъект.Заголовок = "[Пользователь не обнаружен!]";
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Пользователь не обнаружен.'"),5, "Внимание");
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыРаспоряжений(Данные)
	
	МассивСсылок = ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		//Элементы.ПеремещенияТоваров.ТекущаяСтрока = МассивСсылок[0];
		//ПоказатьЗначение(Неопределено, МассивСсылок[0]);
		пДокументОснование = МассивСсылок[0];
		Если ПроверкаВозможностиРаботыСДокументом(пДокументОснование) Тогда
			//ДокументОснование = пДокументОснование;
			ВыполнитьОтгрузку(Неопределено);
			
			УстановитьВидимостьДоступность();
			//ЭтотОбъект.Заголовок = Строка(ДокументОснование);
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Заказ уже собран или не готов к сборке!'"),5, "Отказ");
			//ЭтотОбъект.Заголовок = "[Заказ уже собран или не готов к сборке!]";
		КонецЕсли;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаВозможностиРаботыПользователя(ЗначениеПроверки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПредставлениеЧисел.Число КАК Число,
	               |	ПредставлениеЧисел.Строка КАК Строка
	               |ПОМЕСТИТЬ врПредставлениеЧисел
	               |ИЗ
	               |	&ПредставлениеЧисел КАК ПредставлениеЧисел
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КАБС_КонтрольРабочегоВремени.ДокументОснование КАК ДокументОснование,
	               |	КАБС_КонтрольРабочегоВремени.Этап КАК Этап,
	               |	МИНИМУМ(КАБС_КонтрольРабочегоВремени.Состояние) КАК Состояние,
	               |	ВЫБОР
	               |		КОГДА КАБС_КонтрольРабочегоВремени.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Сборка)
	               |			ТОГДА 1
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА КАБС_КонтрольРабочегоВремени.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Контроль)
	               |					ТОГДА 2
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА КАБС_КонтрольРабочегоВремени.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Отгрузка)
	               |							ТОГДА 3
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА КАБС_КонтрольРабочегоВремени.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка)
	               |									ТОГДА 4
	               |								ИНАЧЕ ВЫБОР
	               |										КОГДА КАБС_КонтрольРабочегоВремени.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)
	               |											ТОГДА 5
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	РегистрСведений.КАБС_КонтрольРабочегоВремени КАК КАБС_КонтрольРабочегоВремени
	               |ГДЕ
	               |	КАБС_КонтрольРабочегоВремени.Пользователь = &Пользователь
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КАБС_КонтрольРабочегоВремени.ДокументОснование,
	               |	КАБС_КонтрольРабочегоВремени.Этап
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	АктОРасхожденияхПослеПеремещенияТовары.Заказ КАК Заказ,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Ссылка КАК Акт,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Номенклатура КАК Номенклатура,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Характеристика КАК Характеристика,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Упаковка КАК Упаковка,
	               |	АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу КАК КоличествоУпаковокПоДокументу,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Действие КАК Действие,
	               |	ВЫБОР
	               |		КОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок > АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу
	               |			ТОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоПерепоставка,
	               |	ВЫБОР
	               |		КОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок < АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу
	               |			ТОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоНедопоставка,
	               |	ВЫБОР
	               |		КОГДА АктОРасхожденияхПослеПеремещенияТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА АктОРасхожденияхПослеПеремещенияТовары.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
	               |		ИНАЧЕ АктОРасхожденияхПослеПеремещенияТовары.Номенклатура.Наименование + "", "" + АктОРасхожденияхПослеПеремещенияТовары.Характеристика.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
	               |	КОНЕЦ КАК Товар,
	               |	ВЫБОР
	               |		КОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок > АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу
	               |			ТОГДА (АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу) * КАБС_ПредварительныеСтрокиПеремещение.Цена
	               |		ИНАЧЕ (АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок) * КАБС_ПредварительныеСтрокиПеремещение.Цена
	               |	КОНЕЦ КАК Сумма,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена
	               |ИЗ
	               |	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещенияТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
	               |		ПО (ВЫБОР
	               |				КОГДА АктОРасхожденияхПослеПеремещенияТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	               |					ТОГДА 1 = врПредставлениеЧисел.Число
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА АктОРасхожденияхПослеПеремещенияТовары.Упаковка.Числитель = 0
	               |							ТОГДА 1 = врПредставлениеЧисел.Число
	               |						ИНАЧЕ АктОРасхожденияхПослеПеремещенияТовары.Упаковка.Числитель = врПредставлениеЧисел.Число
	               |					КОНЕЦ
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
	               |		ПО АктОРасхожденияхПослеПеремещенияТовары.Заказ = КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование
	               |			И АктОРасхожденияхПослеПеремещенияТовары.ДокументОснование = КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки
	               |			И (НЕ КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак)
	               |			И АктОРасхожденияхПослеПеремещенияТовары.Номенклатура = КАБС_ПредварительныеСтрокиПеремещение.Номенклатура
	               |			И АктОРасхожденияхПослеПеремещенияТовары.Характеристика = КАБС_ПредварительныеСтрокиПеремещение.Характеристика
	               |ГДЕ
	               |	АктОРасхожденияхПослеПеремещенияТовары.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано)
	               |	И АктОРасхожденияхПослеПеремещенияТовары.Ссылка.Менеджер = &Пользователь
	               |	И (АктОРасхожденияхПослеПеремещенияТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного)
	               |			ИЛИ АктОРасхожденияхПослеПеремещенияТовары.Действие = ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется))
	               |	И АктОРасхожденияхПослеПеремещенияТовары.Ссылка.Проведен
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	АктОРасхожденияхПослеПеремещенияТовары.Упаковка,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Действие,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Ссылка,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Номенклатура,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Заказ,
	               |	ВЫБОР
	               |		КОГДА АктОРасхожденияхПослеПеремещенияТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА АктОРасхожденияхПослеПеремещенияТовары.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
	               |		ИНАЧЕ АктОРасхожденияхПослеПеремещенияТовары.Номенклатура.Наименование + "", "" + АктОРасхожденияхПослеПеремещенияТовары.Характеристика.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
	               |	КОНЕЦ,
	               |	АктОРасхожденияхПослеПеремещенияТовары.Характеристика,
	               |	АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок,
	               |	АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу,
	               |	ВЫБОР
	               |		КОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок > АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу
	               |			ТОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок < АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу
	               |			ТОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок > АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу
	               |			ТОГДА (АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу) * КАБС_ПредварительныеСтрокиПеремещение.Цена
	               |		ИНАЧЕ (АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковокПоДокументу - АктОРасхожденияхПослеПеремещенияТовары.КоличествоУпаковок) * КАБС_ПредварительныеСтрокиПеремещение.Цена
	               |	КОНЕЦ,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Цена
	               |ИТОГИ ПО
	               |	Заказ";
	
	Запрос.УстановитьПараметр("ПредставлениеЧисел", ПредставлениеЧисел.Выгрузить());
	Запрос.УстановитьПараметр("Пользователь", ЗначениеПроверки);
	Результат = Запрос.ВыполнитьПакет();
	
	ЗначениеВРеквизитФормы(Результат[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "РасхожденияДопущенныеПользователем");
	
	СуммаИтогоРсхождений = Результат[2].Выгрузить().Итог("Сумма");
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало И Выборка.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Сборка Тогда
			ДокументОснование = Выборка.ДокументОснование;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершить;
			Возврат "";
		ИначеЕсли Выборка.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало И Выборка.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Контроль Тогда
			ДокументОснование = Выборка.ДокументОснование;
			ЗаполнитьТаблицыТовары();
			ОбновитьДеревоТоваровПоТабличнымЧастям();
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемкаОтгрузка;
			Возврат "";
		ИначеЕсли Выборка.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало И Выборка.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Отгрузка Тогда
			Возврат "Отнесите и зафиксируете отгрузку по предыдущему заказу!";
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПроверкаВозможностиРаботыСДокументом(ЗначениеПроверки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.Период КАК Период,
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОснование КАК ДокументОснование,
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.Этап КАК Этап,
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.Состояние КАК Состояние,
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.РабочееМесто КАК РабочееМесто,
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.Пользователь КАК Пользователь,
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.Склад КАК Склад,
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОтгрузки КАК ДокументОтгрузки,
	               |	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументПриемки КАК ДокументПриемки
	               |ПОМЕСТИТЬ врТекущийСтатусДокумента
	               |ИЗ
	               |	РегистрСведений.КАБС_КонтрольРабочегоВремени.СрезПоследних(
	               |			,
	               |			ДокументОснование = &ДокументОснование
	               |				И ДокументОтгрузки = &ДокументОтгрузки) КАК КАБС_КонтрольРабочегоВремениСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	врТекущийСтатусДокумента.Период КАК Период,
	               |	врТекущийСтатусДокумента.ДокументОснование КАК ДокументОснование,
	               |	врТекущийСтатусДокумента.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	врТекущийСтатусДокумента.Этап КАК Этап,
	               |	врТекущийСтатусДокумента.Состояние КАК Состояние,
	               |	врТекущийСтатусДокумента.РабочееМесто КАК РабочееМесто,
	               |	врТекущийСтатусДокумента.Пользователь КАК Пользователь,
	               |	врТекущийСтатусДокумента.Склад КАК Склад,
	               |	врТекущийСтатусДокумента.ДокументОтгрузки КАК ДокументОтгрузки,
	               |	врТекущийСтатусДокумента.ДокументПриемки КАК ДокументПриемки
	               |ИЗ
	               |	врТекущийСтатусДокумента КАК врТекущийСтатусДокумента
	               |ГДЕ
	               |	врТекущийСтатусДокумента.РабочееМесто = &РабочееМесто
	               |	И врТекущийСтатусДокумента.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.КВыполнению)
	               |	И врТекущийСтатусДокумента.Этап = &Этап
	               |	И врТекущийСтатусДокумента.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Если ТипЗнч(ЗначениеПроверки) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", ЗначениеПроверки.ЗаказНаПеремещение);
		Запрос.УстановитьПараметр("ДокументОтгрузки", ЗначениеПроверки);
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", ЗначениеПроверки);
		Запрос.УстановитьПараметр("ДокументОтгрузки", Документы.ПеремещениеТоваров.ПустаяСсылка());
	КонецЕсли;
	Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
	Запрос.УстановитьПараметр("Этап", ТекущийЭтап);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		ДокументОснование = Выборка.ДокументОснование;
		ДокументПеремещение = Выборка.ДокументОтгрузки;
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПеремещениеТоваров.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказНаПеремещение.ПустаяСсылка"));
	
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаСервере
Функция ПолучитьПользователяПоШтрихкоду(Штрихкод)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификационныеДанныеПользователей.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ИдентификационныеДанныеПользователей КАК ИдентификационныеДанныеПользователей
	|ГДЕ
	|	ИдентификационныеДанныеПользователей.Штрихкод = &Штрихкод");
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если РолиДоступны("КАБС_Контролер", Выборка.Пользователь, Истина) Тогда
			ТекущийЭтап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Контроль; 
		ИначеЕсли РолиДоступны("КАБС_Сборщик", Выборка.Пользователь, Истина) Тогда
			ТекущийЭтап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Сборка;
		Иначе
			ТекущийЭтап = Неопределено
		//ИначеЕсли БС_ВызовСервера.РольДоступнаПользователю(Выборка.Пользователь, "КАБС_Логист") Тогда
		//	ТекущийЭтап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Отгрузка;
		КонецЕсли;
		Возврат Выборка.Пользователь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция РолиДоступны(Роль, Пользователь, ПривилегированныйРежим = Ложь)
	Возврат Пользователи.РолиДоступны(Роль, Пользователь, ПривилегированныйРежим);
КонецФункции

&НаСервере
Процедура ОчиститьТоварыНаСервере()
	Объект.Товары.Очистить();
КонецПроцедуры

&НаСервере
Процедура ОтменаСервер()
	
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	ДокументОснование   = Документы.ЗаказНаПеремещение.ПустаяСсылка();
	//Объект.Товары.Очистить();
	//Объект.ТоварыПоЗаказу.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСменитьПользователя(Команда)
	ТекущийПользователь = Неопределено;
	ДокументОснование   = Неопределено;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
	втПараметрЗаказТовары.Очистить();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)
	
	Если ЗначениеЗаполнено(ДокументПеремещение) Тогда 
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("Ссылка", ДокументПеремещение);
		ПараметрыПечати.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ПараметрыПечати.Вставить("СразуНаПринтер", Истина);
		Если ПечатьНаКлумбу Тогда
			УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команды.Найти("ПодменюПечатьКомандаПечати2"), ПолучитьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта"), ПараметрыПечати);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команды.Найти("ПодменюПечатьКомандаПечати11"), ПолучитьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта"), ПараметрыПечати);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(УпаковочныйЛист) Тогда
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("РежимОткрытияОкна",РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ПараметрыПечати.Вставить("СразуНаПринтер", Истина);
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(УпаковочныйЛист);
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.УпаковочныйЛист", "УпаковочныйЛистСРасшифровкой", МассивОбъектов, ЭтотОбъект, ПараметрыПечати);
		ПечатьЭтикеток(УпаковочныйЛист);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьУпаковочныйЛист(ТаблицаЗначений, Период);
	
	ТоварыДляДокумента = ТаблицаЗначений.Скопировать(,"Номенклатура, Характеристика, Упаковка, УпаковочныйЛист, КоличествоУпаковок, Количество");
	ТоварыДляДокумента.Свернуть("Номенклатура, Характеристика, Упаковка, УпаковочныйЛист", "КоличествоУпаковок, Количество");
	
	УпаковочныйЛистОбъект = Документы.УпаковочныйЛист.СоздатьДокумент();
	УпаковочныйЛистОбъект.Дата = Период;
	УпаковочныйЛистОбъект.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
	УпаковочныйЛистОбъект.Товары.Загрузить(ТоварыДляДокумента);
	УпаковочныйЛистОбъект.Комментарий = "#АРМ Отгрузки: Создан при контроле";
	УпаковочныйЛистОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		
		МенеджерЗаписи = РегистрыСведений.КАБС_ПредварительныеСтрокиПеремещение.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.УпаковочныйЛист = УпаковочныйЛистОбъект.Ссылка;
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	УпаковочныйЛист = УпаковочныйЛистОбъект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток(ПризнакДляПечати)
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ИменаМакетов = "ЭтикеткаТовары";
	ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			ИменаМакетов,
			ПараметрКоманды,
			ЭтаФорма,
			ПолучитьПараметры(ПризнакДляПечати), ПризнакДляПечати);
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметры(ДокументДляПечати)
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЦенаЗаПачку", Новый ОписаниеТипов("Число"));//tror
	Товары.Колонки.Добавить("ЦенаДополнительно", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ШтрихкодБазовой", Новый ОписаниеТипов("Строка"));//tror20160603
	Товары.Колонки.Добавить("Партия", Новый ОписаниеТипов("Строка"));//zZz 20170224 #666
	Товары.Колонки.Добавить("Качество", Новый ОписаниеТипов("Строка"));//zZz 20170224 #666
	Товары.Колонки.Добавить("НаименованиеСкладаДляЭтикетки", Новый ОписаниеТипов("Строка"));//tror20160603
	Товары.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("ШаблонЭтикеткиПодготовлено", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Весовой", Новый ОписаниеТипов("Булево"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦены", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("ТекущийПользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	//
	//НаименованиеСкладаДляЭтикетки = ПолучитьНаименованиеСкладаДляЭтикетки(ДокументОснование.СкладОтправитель);//tror20160604
	КолВоЭтикеток = 1;
	
	//Для Каждого Строка ИЗ ДокументДляПечати.Товары Цикл
		Строка = ДокументДляПечати.Товары[0]; 
	   	НоваяСтрока = Товары.Добавить();

		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.Характеристика = Строка.Характеристика;
		НоваяСтрока.Упаковка       = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
		НоваяСтрока.Цена = СтрЗаменить(ПривестиСтрокуКЧислу(Строка.Количество),Символы.НПП,"");  // используется для вывода количества в шт.
		НоваяСтрока.ЦенаЗаПачку = СтрЗаменить(Строка.Количество,Символы.НПП,""); //используется для вывода количества упаковок в упак.

		НоваяСтрока.ЦенаДополнительно = 0;
		НоваяСтрока.Штрихкод =  СокрЛП(ДокументДляПечати.Код); 
				
		НоваяСтрока.Партия = "";
		НоваяСтрока.Качество = 	""; 
		НоваяСтрока.НаименованиеСкладаДляЭтикетки = ПолучитьНаименованиеСкладаДляЭтикетки(ДокументДляПечати);
		НоваяСтрока.Партия = ПолучитьПорядковыйНомер(ДокументДляПечати);
		НоваяСтрока.ШтрихкодБазовой = ДокументОснование.Номер; //используется для вывода ФИО упаковщика
		НоваяСтрока.ТекущийПользователь = ТекущийПользователь; //используется для вывода ФИО упаковщика
	      
		НоваяСтрока.ШаблонЦенника = Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка();//НайтиПоНаименованию("ЦенникБольшойА6 95x138");
		НоваяСтрока.КоличествоЦенников = 0;			
		НоваяСтрока.ШаблонЭтикетки = Справочники.ШаблоныЭтикетокИЦенников.НайтиПоНаименованию("УпаковочныйЛистДляОтгрузки");
		НоваяСтрока.ШаблонЭтикеткиПодготовлено = Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка();
		НоваяСтрока.КоличествоЭтикеток = КолВоЭтикеток;
		НоваяСтрока.ОстатокНаСкладе = 0;
		НоваяСтрока.Весовой = Ложь;
		НоваяСтрока.ДатаПоследнегоИзмененияЦены = Дата(1,1,1);
		НоваяСтрока.ДатаПоследнегоИзмененияЦеныДополнительно = Дата(1,1,1); 	
	//КонецЦикла;
	
	МаксимальныйКодВесовогоТовара = 99999; //ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара();
	УстановитьПривилегированныйРежим(Истина);
	ПравилоВыгрузкиВВесы = Ложь; //(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПравилоОбмена, "ТипПодключаемогоОборудования") = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Товары", ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор));
	ПараметрыПечати.Вставить("Организация", ДокументОснование.Организация);
	ПараметрыПечати.Вставить("ПравилоОбмена", Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПустаяСсылка());
	ПараметрыПечати.Вставить("МаксимальныйКодВесовогоТовара", МаксимальныйКодВесовогоТовара);
	ПараметрыПечати.Вставить("ПравилоВыгрузкиВВесы",          ПравилоВыгрузкиВВесы);
	ПараметрыПечати.Вставить("ВидЦены",       ДокументОснование.СкладОтправитель.УчетныйВидЦены);
	ПараметрыПечати.Вставить("Дата",          ТекущаяДата());
	ПараметрыПечати.Вставить("Склад",         ДокументОснование.СкладОтправитель); //Справочники.Склады.ПустаяСсылка());
	ПараметрыПечати.Вставить("НаименованиеСкладаДляЭтикетки", "");
	ПараметрыПечати.Вставить("ВидЦеныДополнительно", Справочники.ВидыЦен.ПустаяСсылка());
	ПараметрыПечати.Вставить("ДатаДополнительно",    Дата(1,1,1));
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона", Неопределено);
	
	Возврат ПараметрыПечати;
	
КонецФункции

&НаСервере
Функция ПолучитьПорядковыйНомер(ДокументДляПечати)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист.Код КАК УпаковочныйЛистКод
	               |ИЗ
	               |	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение.СрезПоследних(
	               |			,
	               |			ДокументОснование = &ДокументОснование
	               |				И НЕ УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	               |				И РабочееМесто = &РабочееМесто) КАК КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист.Код
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	УпаковочныйЛистКод";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	
	n=0;
	
	Пока Выборка.Следующий() Цикл
		n=n+1;
		Если Выборка.УпаковочныйЛист = ДокументДляПечати Тогда
			Возврат n;	
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьНаименованиеСкладаДляЭтикетки(ДокументДляПечати)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.СкладПолучатель КАК СкладПолучатель
	               |ИЗ
	               |	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение.СрезПоследних(
	               |			,
	               |			УпаковочныйЛист = &УпаковочныйЛист
	               |				И СкладОтправитель = &СкладОтправитель
	               |				И РабочееМесто = &РабочееМесто) КАК КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних";
	Запрос.УстановитьПараметр("УпаковочныйЛист", ДокументДляПечати);
	Запрос.УстановитьПараметр("СкладОтправитель", ДокументОснование.СкладОтправитель);
	Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СкладПолучатель;
	Иначе
		Возврат "ERROR";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой)
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	Если ЗначениеЧисла = 0 Тогда
		Возврат 0;
	КонецЕсли;
	Возврат ЗначениеЧисла;
КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ВладелецФормы, ПараметрыПечати = Неопределено, ПризнакДляПечати) Экспорт
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати); 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУпаковать(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаУпаковатьЗакончить", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
		
	ОткрытьФорму("ВнешняяОбработка.АРМКонтролера.Форма.ФормаВопрос", ПараметрыОткрытия, ЭтотОбъект, ,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Процедура КомандаУпаковатьНаСервере(Отказ, ЭтоБрак)
	
	Период = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
	               |	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
	               |	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
	               |	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
	               |	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
	               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
	               |	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
	               |ИЗ
	               |	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
	               |ГДЕ
	               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
	               |	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = &ЭтоБрак
	               |	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
	               |	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
	               |	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ЭтоБрак", ЭтоБрак);
	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда	
		СоздатьУпаковочныйЛист(Результат[0].Выгрузить(), Период);
	Иначе
		Отказ = Истина
	КонецЕсли;
	
	//Если НЕ Результат[1].Пустой() Тогда
	//	
	//	СоздатьУпаковочныйЛист(Результат[1].Выгрузить(), Период);
	//	
	//КонецЕсли;
	
	ОбновитьДеревоТоваровПоТабличнымЧастям();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУпаковатьЗакончить(ЭтоБрак, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
		
	КомандаУпаковатьНаСервере(Отказ, ЭтоБрак); 
		
	Если Отказ Тогда
		ПоказатьПредупреждение(,"Нет товара указанного качества для упаковки", 5, "Внимание!");
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПечать;
		Попытка
			КомандаПечать(Неопределено);
		Исключение
			ПоказатьПредупреждение(,"Ошибка печати!", 5, "Внимание!");
		КонецПопытки;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗавершитьСборкуНаСервере()
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МенеджерЗаписи = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДокументОснование = ДокументОснование;
		//МенеджерЗаписи.ДокументОснование  = ДокументПеремещение;
		МенеджерЗаписи.РабочееМесто = НастройкиРМК.РабочееМесто;
		МенеджерЗаписи.Пользователь = ТекущийПользователь;
		МенеджерЗаписи.Период = ТекущаяДатаСеанса;
		МенеджерЗаписи.Склад = ДокументОснование.СкладОтправитель;
		МенеджерЗаписи.Состояние = Перечисления.КАБС_СостояниеДокументов.Окончание;
		МенеджерЗаписи.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Сборка;
		МенеджерЗаписи.Записать();
		
		МенеджерЗаписи = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДокументОснование = ДокументОснование;
		//МенеджерЗаписи.ДокументОснование  = ДокументПеремещение;
		МенеджерЗаписи.РабочееМесто = НастройкиРМК.РабочееМесто;
		//МенеджерЗаписи.Пользователь = ТекущийПользователь;
		МенеджерЗаписи.Период = ТекущаяДатаСеанса+1;
		МенеджерЗаписи.Склад = ДокументОснование.СкладОтправитель;
		МенеджерЗаписи.Состояние = Перечисления.КАБС_СостояниеДокументов.КВыполнению;
		МенеджерЗаписи.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Контроль;
		МенеджерЗаписи.Записать();
	КонецЕсли;
			
	ДокументОснование = Документы.ЗаказНаПеремещение.ПустаяСсылка();
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
КонецПроцедуры

&НаСервере
Процедура КомандаНачатьКонтроль()
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда		
		МенеджерЗаписи = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДокументОснование = ДокументОснование;
		МенеджерЗаписи.РабочееМесто = НастройкиРМК.РабочееМесто;
		МенеджерЗаписи.Пользователь = ТекущийПользователь;
		МенеджерЗаписи.Период = ТекущаяДатаСеанса();
		МенеджерЗаписи.Склад = ДокументОснование.СкладОтправитель;
		МенеджерЗаписи.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало;
		МенеджерЗаписи.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Контроль;
		МенеджерЗаписи.Записать();
	КонецЕсли;
			
	//ДокументОснование = Документы.ЗаказНаПеремещение.ПустаяСсылка();
	//ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
КонецПроцедуры

&НаСервере
Процедура КомандаЗавершитьНаСервере()
	
	Период = ТекущаяДатаСеанса();
	
	МенеджерЗаписи = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДокументОснование = ДокументОснование;
	МенеджерЗаписи.РабочееМесто      = НастройкиРМК.РабочееМесто;
	МенеджерЗаписи.Пользователь      = ТекущийПользователь;
	МенеджерЗаписи.Период            = Период;
	МенеджерЗаписи.Склад             = ДокументОснование.СкладОтправитель;
	МенеджерЗаписи.Состояние         = Перечисления.КАБС_СостояниеДокументов.Окончание;
	МенеджерЗаписи.Этап              = Перечисления.КАБС_ЭтапыБизнесПроцессов.Контроль;
	МенеджерЗаписи.Записать();
	
	Если ЗначениеЗаполнено(ДокументПеремещение) Тогда
		Товары = ДокументПеремещение.Товары.Выгрузить(,"УпаковочныйЛист");
		Товары.Свернуть("УпаковочныйЛист");
		Для Каждого Строка ИЗ Товары Цикл
			МенеджерЗаписи = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ДокументОснование = ДокументОснование;
			МенеджерЗаписи.ДокументОтгрузки  = ДокументПеремещение;
			МенеджерЗаписи.УпаковочныйЛист   = Строка.УпаковочныйЛист;
			МенеджерЗаписи.РабочееМесто      = НастройкиРМК.РабочееМесто;
			МенеджерЗаписи.Пользователь      = ТекущийПользователь;
			МенеджерЗаписи.Период            = Период;
			МенеджерЗаписи.Склад             = ДокументОснование.СкладОтправитель;
			МенеджерЗаписи.Состояние         = Перечисления.КАБС_СостояниеДокументов.Начало;
			МенеджерЗаписи.Этап              = Перечисления.КАБС_ЭтапыБизнесПроцессов.Отгрузка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДокументПеремещениеБрак) Тогда
		Товары = ДокументПеремещениеБрак.Товары.Выгрузить(,"УпаковочныйЛист");
		Товары.Свернуть("УпаковочныйЛист");
		Для Каждого Строка ИЗ Товары Цикл
			МенеджерЗаписи = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ДокументОснование = ДокументОснование;
			МенеджерЗаписи.ДокументОтгрузки  = ДокументПеремещениеБрак;
			МенеджерЗаписи.УпаковочныйЛист   = Строка.УпаковочныйЛист;
			МенеджерЗаписи.РабочееМесто      = НастройкиРМК.РабочееМесто;
			МенеджерЗаписи.Пользователь      = ТекущийПользователь;
			МенеджерЗаписи.Период            = Период;
			МенеджерЗаписи.Склад             = ДокументОснование.СкладОтправитель;
			МенеджерЗаписи.Состояние         = Перечисления.КАБС_СостояниеДокументов.Начало;
			МенеджерЗаписи.Этап              = Перечисления.КАБС_ЭтапыБизнесПроцессов.Отгрузка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
	
	ДокументОснование = Документы.ЗаказНаПеремещение.ПустаяСсылка();
	ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка();
	втПараметрЗаказТовары.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗавершитьСборку(Команда)
	КомандаЗавершитьСборкуНаСервере();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
	УстановитьВидимостьДоступность()
КонецПроцедуры

&НаКлиенте
Процедура КомандаПродолжить(Команда)
	Если ЗначениеЗаполнено(ДокументПеремещение) Тогда
		ДокументПеремещение = Неопределено;
		ТекущийПользователь = Неопределено;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
	Иначе
		УпаковочныйЛист = Неопределено;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемкаОтгрузка;
	КонецЕсли;
	УстановитьВидимостьДоступность()
КонецПроцедуры

&НаКлиенте
Процедура ВызватьИнтерактивноеОкно(ДанныеШтрихкодов)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьШтрихкодыНоменклатуры", ЭтотОбъект, ДанныеШтрихкодов);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДанныеШтрихкодов", ДанныеШтрихкодов);
	
	ОткрытьФорму("ВнешняяОбработка.АРМКонтролера.Форма.ФормаВопрос", ПараметрыОткрытия, ЭтотОбъект, ,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Процедура ПринятьРасхожденияНаСервере()
	
	СтрокиДерева = РасхожденияДопущенныеПользователем.ПолучитьЭлементы();
	
	Для Каждого Строка ИЗ СтрокиДерева Цикл
		
		ДокументСсылка = Строка.ПолучитьЭлементы()[0].Акт;
		Если ЗначениеЗаполнено(ДокументСсылка) И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Статус = Перечисления.СтатусыАктаОРасхождениях.Отработано;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;	
			
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеЗвукаИВоспроизведение
&НаКлиенте
Процедура УстановитьСтрокуХТМЛНаКлиенте()
	
	ПолеХТМЛДокументаДляЗвукаСтрока = "<!DOCTYPE html>
	| <HTML>
	|<head>
	|<meta http-equiv=""X-UA-Compatible"" content=""IE=9""/>
	|</head>
	| <BODY scroll='no'>
	|	<audio id=""sound_web"">
	|   <button onclick=PlaySound()></button>
	| 	</audio>
	| <script>
	|	var audio = document.getElementById('sound_web');
	| 	function PlaySound() {
	|		audio.play();
	| 	}
	| </script>
	| </BODY>
	| </HTML>";
	
КонецПроцедуры

&НаКлиенте
Процедура ОзвучитьСумму(ТекстСуммыДляОзвучивания="")
	Элементы.ПолеХТМЛДокументаДляЗвука.Вперед();	
	
		Попытка
			Элементы.ПолеХТМЛДокументаДляЗвука.Документ.defaultView.audio.src = "file://" + ПутьКФайлуЗвукаВКаталогеВременныхФайлов; 
			
		Исключение
			Попытка
				Элементы.ПолеХТМЛДокументаДляЗвука.Документ.parentWindow.audio.src = "file://" + ПутьКФайлуЗвукаВКаталогеВременныхФайлов;
			Исключение
			КонецПопытки;
		КонецПопытки;                  		
		ПроигратьЗвук();
		
КонецПроцедуры

&НаКлиенте
Процедура ПроигратьЗвук()
	
	Попытка
		Элементы.ПолеХТМЛДокументаДляЗвука.Документ.defaultView.PlaySound();
	Исключение
		Попытка
			Элементы.ПолеХТМЛДокументаДляЗвука.Документ.parentWindow.PlaySound();
		Исключение
		КонецПопытки;
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти