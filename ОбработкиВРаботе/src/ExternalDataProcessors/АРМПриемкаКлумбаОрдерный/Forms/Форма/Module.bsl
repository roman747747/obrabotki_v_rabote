//АРМПриемкаКлумбаОрдерный - предназначениа для приемки товаров на ордерных торговых точках

&НаКлиенте
Перем ТекущаяСтраницаДоПереходаНаСтраницаОтладка;

#Область СобытияФормы

	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
		УстановитьТекущиеЭтапИПодэтап("Приемка", "Приемка коробов");

		УстановитьВидимостьДоступность();
		Если Строка(ПолучитьПараметрСеансаНаСервере("ТекущийПользователь")) = "Администратор" Тогда
			ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		КонецЕсли;
		
		//установка параметров обработки в реквизитах формы
		ИмяПечатнойФормыДляПриходногоОрдера = "ПриходныйОрдерНаТовары";
		ИмяПечатнойФормыДляАктаОРасхождениях = "АктОРасхожденияхПослеПеремещенияВПФ";
		
		ПараметрРазрешитьПриходоватьОтсутствующийВПеремещенииТовар = Истина;
		Если НЕ ЗначениеЗаполнено(ПараметрТекстВопросаОЗавершенииПриемкиУЛсРасхождениями) Тогда
			ПараметрТекстВопросаОЗавершенииПриемкиУЛсРасхождениями = "Вы уверены, что хотите завершить приемку по этому упаковочному листу с расхождениями на сумму %П1% руб.?"+Символы.ПС + "Сумма расхождений будет взыскана с Вас или с менеджера отправителя .";
		КонецЕсли;	
		
		//Запонение таблицы товаров принимаемых поштучно
		ЗаполнитьТаблицуТоваровПринимаемыхПоштучноНаСервере();
				
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриЗакрытии(ЗавершениеРаботы)
		МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);

		Если НЕ (Строка(ТекущийПользователь) = "Администратор") Тогда //  ИЛИ РолиДоступны("Полные права", ТекущийПользователь, Истина)  Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;

	КонецПроцедуры

	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
		ИнициализироватьРабочееМесто(Отказ);
		
		Если РолиДоступны("Полные права", ПараметрыСеанса.ТекущийПользователь) Тогда
			ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		Иначе
			ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;	
		КонецЕсли;	
		
		//заполнение параметров обработки
		ФормироватьПеремещениеВозврат = Ложь;
				 
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
		//активировать форму
		ЭтаФорма.Активизировать();
		ЭтаФорма.ТекущийЭлемент = Элементы.КомандаЗаблокировать;
		//ЭтаФорма.ТекущийЭлемент = Элементы.Шапка;
		// ПодключаемоеОборудование
		Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
			Если ИмяСобытия = "ScanData"
					И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
						
				Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокумент  Тогда 
						
					ОбработатьШтрихкодыРаспоряжений(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
						
				ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь
					ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУведомленияОНедостаткеКоробов Тогда
					ОбработатьШтрихкодыПользователя(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));	 
				ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтартВодитель Тогда
					
					Если ПроверитьСтрокуНаСоответствиеРегулярномуВыражению(Параметр[0],"\d+") Тогда //если шк содержит только цифры - это шк документа, иначе - пользователя
						ОбработатьШтрихкодыРаспоряжений(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));							
					Иначе
						ОбработатьШтрихкодыПользователя(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
					КонецЕсли;	
					
				ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ Тогда
					ОбработатьШтрихкодыУЛ(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
				ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка Тогда
					ВызватьИнтерактивноеОкно(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
				ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольИзлишков Тогда
					ОбработатьШтрихкодыНоменклатуры(Ложь, МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		//ОбновитьДеревоТоваровПоТабличнымЧастям();

		УстановитьВидимостьДоступность();
		//УстановитьОтборСпискаУЛ();
		
	КонецПроцедуры
#КонецОбласти

#Область КомандыФормы

	//tror20181005 #23
	&НаКлиенте
	Процедура ПослеВопросаОЗавершенииПриемкиУЛсРасхождениями(Результат, Параметры) Экспорт
		Если Результат = КодВозвратаДиалога.Да Тогда
				ЗавершитьПриемкуУпаковочногоЛиста();
				УстановитьОтборСпискаУЛ();
				ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
		КонецЕсли;	
	КонецПроцедуры
	//tror20181005 #23>
			
	&НаКлиенте
	Процедура КомандаЗавершить(Команда)

		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка Тогда
			
			//tror20181005 #23 Нужно выводить вопрос "Уверены ли вы, что хотите завершить приемку УЛ с расхождениями на сумму ХХХХ руб, эта сумма 
			//	может быть вычтена из вашей или контроллера зараплаты", если есть расхождения по УЛ
			
			СуммаРасхожденийПоУЛ = 0;
			Для Каждого СтрокаДерева Из  ТоварыДерево.ПолучитьЭлементы() Цикл
				
				Если СтрокаДерева.КоличествоУпаковокПлан > СтрокаДерева.КоличествоУпаковокФакт + СтрокаДерева.КоличествоУпаковокБрак Тогда
					Если Не ЗначениеЗаполнено(СтрокаДерева.Цена) Тогда
						СтрокаДерева.Цена = ПолучитьЦенуТовараНаСервере(Новый Структура("Номенклатура,Характеристика,Упаковка", СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика, СтрокаДерева.Упаковка));
					КонецЕсли;	
				
					СуммаРасхожденийПоУЛ = СуммаРасхожденийПоУЛ + (СтрокаДерева.КоличествоУпаковокПлан - (СтрокаДерева.КоличествоУпаковокФакт + СтрокаДерева.КоличествоУпаковокБрак))*СтрокаДерева.Цена;
				ИначеЕсли СтрокаДерева.КоличествоУпаковокПлан < СтрокаДерева.КоличествоУпаковокФакт + СтрокаДерева.КоличествоУпаковокБрак Тогда
					Если Не ЗначениеЗаполнено(СтрокаДерева.Цена) Тогда
						СтрокаДерева.Цена = ПолучитьЦенуТовараНаСервере(Новый Структура("Номенклатура,Характеристика,Упаковка", СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика, СтрокаДерева.Упаковка));
					КонецЕсли;	
				
					СуммаРасхожденийПоУЛ = СуммаРасхожденийПоУЛ + ((СтрокаДерева.КоличествоУпаковокФакт + СтрокаДерева.КоличествоУпаковокБрак) - СтрокаДерева.КоличествоУпаковокПлан)*СтрокаДерева.Цена;	 
				КонецЕсли;	
			КонецЦикла;
			
			Если СуммаРасхожденийПоУЛ > 0 Тогда
				ТекстВопроса = СтрЗаменить(ПараметрТекстВопросаОЗавершенииПриемкиУЛсРасхождениями, "%П1%", Строка(СуммаРасхожденийПоУЛ));  
				ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОЗавершенииПриемкиУЛсРасхождениями", ЭтаФорма, Новый Структура("НомерУЛ",УпаковочныйЛист)), ТекстВопроса, РежимДиалогаВопрос.ДаНет );	
			Иначе
				ЗавершитьПриемкуУпаковочногоЛиста();
				УстановитьОтборСпискаУЛ();
				ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
			КонецЕсли;	 
			//tror20181005 #23>
			
			
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ Тогда

			Если ТекущийЭтап = "Приемка" Тогда
				Если ТекущийПодэтап = "Приемка коробов" Тогда

					Отказ = Ложь;
					ВозвращаемаяСтруктура = Новый Структура;
					ЗавершитьПодЭтапПриемкаКоробов(Отказ, ВозвращаемаяСтруктура); //переход к контролю по упаковкам
					Если Не Отказ Тогда
						УстановитьТекущиеЭтапИПодэтап("Приемка", "Контроль");
						ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
						УстановитьОтборСпискаУЛ();
					Иначе
					//Вывод сообщения о потеряных коробах
						Режим = РежимДиалогаВопрос.ОКОтмена;
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОНепринятыхУЛ", ЭтаФорма, Параметры);

						ТекстВопроса = "По перемещению остались не переданные водителем упаковочные листы, 
							|материальная ответственность за товар в которых ложится на водителя:
							|";
						Если ВозвращаемаяСтруктура.Свойство("СуммыНепринятыхУЛ") Тогда
							Для Каждого НепринятыйУЛ ИЗ ВозвращаемаяСтруктура.СуммыНепринятыхУЛ Цикл
								ТекстВопроса = ТекстВопроса + Символы.ПС
									+ НепринятыйУЛ.УпаковочныйЛист + ", на сумму в ценах магазина: "
									+ НепринятыйУЛ.Сумма + " руб.";
							КонецЦикла;
							ТекстВопроса = ТекстВопроса + символы.ПС;
						КонецЕсли;
						ТекстВопроса = ТекстВопроса + "
							|
							|Для продолжения приемки товара приемщик и водитель должны подтвердить свое согласие с данной информацией 
							|считываением своих штрихкодов водителя и приемщика. В случае несогласия водителя, продолжить приемку можно после 
							|подтверждения только приемщиком, при этом информация об инциденте будет направлена в службу безопасности";

						ТекстУведомленияОНепринятыхУЛ = ТекстВопроса;

						ТекстВопроса = ТекстВопроса + "
							|
							|Продолжить?";

						ПоказатьВопрос(Оповещение, ТекстВопроса, Режим);

					КонецЕсли;

				ИначеЕсли ТекущийПодэтап = "Контроль" Тогда
					
					Отказ = Ложь;
					СтруктураВозврата = Новый Структура;
					ЗавершитьПриемкуЗаказа(Отказ, СтруктураВозврата);
					
					Если Не Отказ Тогда

						ПриемкаЗавершена = Ложь;
						Если СтруктураВозврата.Свойство("ПриемкаЗавершена", ПриемкаЗавершена)
								И ПриемкаЗавершена Тогда
							
							Если ФормироватьПеремещениеВозврат Тогда
								
								ПоказатьПредупреждение(, "Приемка завершена успешно. Передайте коробки с возвратным товаром водителю", 10);

								//перейти к этапу "Передача водителю"
								ДокументОтгрузки = ДокументПеремещениеВозврат;
								ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
								УстановитьТекущиеЭтапИПодэтап("Возврат", "Передача водителю");
								УстановитьОтборСпискаУЛ();
								
							Иначе
								
								Если ЗначениеЗаполнено(ДокументАктОРасхождениях) Тогда
									КомандаПечать("ПечатьАктаОРасхождениях");
									ПоказатьПредупреждение(, "Приемка завершена с расхождениями, распечатайте акт о расхождениях", 10);
								Иначе	
									ПоказатьПредупреждение(, "Приемка завершена успешно.", 10);
								КонецЕсли;
									
								КомандаЗаблокировать(Неопределено);	
								
							КонецЕсли;	

						Иначе

							ЕстьИзлишки = Ложь;
							Если СтруктураВозврата.Свойство("ЕстьИзлишки", ЕстьИзлишки)
									И ЕстьИзлишки Тогда
								
								УпаковочныйЛист = Неопределено; 
								УстановитьТекущиеЭтапИПодэтап("Возврат", "Контроль излишков");
								ПерейтиНаСтраницу(Элементы.СтраницаКонтрольИзлишков);
								ОбновитьДеревоТоваровПоТабличнымЧастям();

							КонецЕсли;

						КонецЕсли;
					Иначе

						//отказ = Истина
						СообщениеОбОшибке = "";
						Если СтруктураВозврата.Свойство("СообщениеОбОшибке", СообщениеОбОшибке)
								И ЗначениеЗаполнено(СообщениеОбОшибке) Тогда

							ПоказатьПредупреждение(, СообщениеОбОшибке, 10);

						КонецЕсли;

					КонецЕсли;

				КонецЕсли;
			ИначеЕсли ТекущийЭтап = "Возврат" Тогда

				Если ТекущийПодэтап = "Контроль излишков" Тогда
					
					//перейти к этапу "Передача водителю"
					ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
					УстановитьТекущиеЭтапИПодэтап("Возврат", "Передача водителю");
					УстановитьОтборСпискаУЛ();

				ИначеЕсли ТекущийПодэтап = "Передача водителю" Тогда

					Если ВсеУЛПринятыВодителем() Тогда
						ПоказатьПредупреждение(, "Приемка и возврат излишков и непринятого товара завершены успешно!", 10);
						ПерейтиНаСтраницу(Элементы.СтраницаПечать);
					Иначе
						Сообщить("Не все упаковочные листы на возврат имеют статус/состояние Транспортировка/Начало. Завершите передачу водителю");
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольИзлишков Тогда

			Отказ = Ложь;
			ЗавершитьВозвратИзлишковИБрака(Отказ);
			
			Если Не Отказ Тогда
				КомандаПечать(Неопределено);
				УстановитьТекущиеЭтапИПодэтап("Возврат", "Передача водителю");
				ДокументОтгрузки = ДокументПеремещениеВозврат;
				ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
				УстановитьОтборСпискаУЛ();
			КонецЕсли;

		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУведомленияОНедостаткеКоробов Тогда

			Если Элементы.ДекорацияВодительГалка.Видимость
					И Элементы.ДекорацияПриемщикГалка.Видимость Тогда
					//Водитель и Приемщик подтвердили, можно продолжить, предварительно записав состояние непереданных УЛ Как Транспортировка/КВыполнению
				ЗаписатьНепереданныеВодителемУЛКВыполнениюТранспортировки();
			ИначеЕсли Элементы.ДекорацияПриемщикГалка.Видимость Тогда
			//водитель не подтвердил согласие, нужно написать письмо в СБ 
				ПослатьПисьмоВСлужбуБезопасности();
				ЗаписатьНепереданныеВодителемУЛКВыполнениюТранспортировки();
			КонецЕсли;

			Отказ = Ложь;
			ВозвращаемаяСтруктура = Новый Структура;
			ЗавершитьПодЭтапПриемкаКоробов(Отказ, ВозвращаемаяСтруктура); //переход к контролю по упаковкам
			Если Не Отказ Тогда
				УстановитьТекущиеЭтапИПодэтап("Приемка", "Контроль");
				ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
				УстановитьОтборСпискаУЛ();
			Иначе
				Сообщить("Неудачная попытка завершить этап Приемка/Приемка коробов");
			КонецЕсли;

		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПечать Тогда
			КомандаЗаблокировать(Неопределено);
		КонецЕсли;

		УстановитьВидимостьДоступность();

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаОтменить(Команда)
		ПерейтиНаСтраницу(Элементы.СтраницаПользователь);
	КонецПроцедуры

	&НаКлиенте
	Процедура КомандаЗаблокировать(Команда)
		ТекущийПриемщик = Неопределено;
		ТекущийВодитель = Неопределено;
		УпаковочныйЛист = Неопределено;
		ДокументОтгрузки = Неопределено;
		ДокументОснование = Неопределено;
		ДокументПеремещениеВозврат = Неопределено;
		ДокументАктОРасхождениях = Неопределено;
		ПерейтиНаСтраницу(Элементы.СтраницаПользователь);
		ЭтаФорма.Заголовок = "";
		УстановитьВидимостьДоступность();
	КонецПроцедуры

	&НаКлиенте
	Процедура КомандаПечать(Команда)

	//перезаполнение Списоков упаковочных листов для возврата, на случай прерывания работы
		Если СписокУпаковочныхЛистовНепринятогоТовара.Количество() = 0
				ИЛИ СписокУпаковочныхЛистовИзлишков.Количество() = 0 Тогда
			ЗаполнитьСпискиУЛВозврата();
		КонецЕсли;

		Если Команда = "ПечатьУпаковочныхЛистовИзлишков" Тогда
			Для Каждого УЛ Из СписокУпаковочныхЛистовИзлишков Цикл
				Если ЗначениеЗаполнено(УЛ.Значение) И Не УЛ.Пометка Тогда
					ПараметрыПечати = Новый Структура;
					ПараметрыПечати.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					МассивОбъектов = Новый Массив;
					МассивОбъектов.Добавить(УЛ.Значение);
					УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.УпаковочныйЛист", "УпаковочныйЛистСРасшифровкой", МассивОбъектов, ЭтотОбъект, ПараметрыПечати);
					УЛ.Пометка = Истина; //признак, что уже распечатывали этот УЛ				
					ПечатьЭтикеток(УЛ.Значение);
				КонецЕсли;
			КонецЦикла;

			Возврат;
		КонецЕсли;

		Если Команда = "ПечатьУпаковочныхЛистовНепринятогоТовара" Тогда
			Для Каждого УЛ Из СписокУпаковочныхЛистовНепринятогоТовара Цикл
				Если ЗначениеЗаполнено(УЛ.Значение) И Не УЛ.Пометка Тогда
					ПараметрыПечати = Новый Структура;
					ПараметрыПечати.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					МассивОбъектов = Новый Массив;
					МассивОбъектов.Добавить(УЛ.Значение);
					УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.УпаковочныйЛист", "УпаковочныйЛистСРасшифровкой", МассивОбъектов, ЭтотОбъект, ПараметрыПечати);
					УЛ.Пометка = Истина; //признак, что уже распечатывали этот УЛ				
					ПечатьЭтикеток(УЛ.Значение);
				КонецЕсли;
			КонецЦикла;

			Возврат;
		КонецЕсли;

		//Печать перемещения излишков и брака 
		Если ЗначениеЗаполнено(ДокументПеремещениеВозврат) И ЗначениеЗаполнено(ИмяПечатнойФормыДляПеремещенияТоваров) Тогда
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("Ссылка", ДокументПеремещениеВозврат);
			СтруктураДополнительныхПараметров.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			СтруктураДополнительныхПараметров.Вставить("Редактирование", Ложь);
			СтруктураДополнительныхПараметров.Вставить("Защита", Истина);
			СтруктураДополнительныхПараметров.Вставить("СразуНаПринтер", Истина);
			СтруктураДополнительныхПараметров.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Ландшафт);
			СтруктураДополнительныхПараметров.Вставить("АвтоМасштаб", Истина);
			
			НапечататьДокумент(ДокументПриемки, ИмяПечатнойФормыДляПеремещенияТоваров, СтруктураДополнительныхПараметров, "ФормаОбъекта");
			
		КонецЕсли;

		//Печать приходного ордера на товары
		Если ЗначениеЗаполнено(ДокументПриемки) И ЗначениеЗаполнено(ИмяПечатнойФормыДляПриходногоОрдера) <> "" Тогда
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("Ссылка", ДокументПриемки);
			СтруктураДополнительныхПараметров.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			СтруктураДополнительныхПараметров.Вставить("Редактирование", Ложь);
			СтруктураДополнительныхПараметров.Вставить("Защита", Истина);
			СтруктураДополнительныхПараметров.Вставить("СразуНаПринтер", Истина);
			СтруктураДополнительныхПараметров.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Ландшафт);
			СтруктураДополнительныхПараметров.Вставить("АвтоМасштаб", Истина);
			
			НапечататьДокумент(ДокументПриемки, ИмяПечатнойФормыДляПриходногоОрдера, СтруктураДополнительныхПараметров, "ФормаСписка");
			
		КонецЕсли;
		
		//Печать акта о расхождениях после перемещения
		Если ЗначениеЗаполнено(ДокументАктОРасхождениях) И ЗначениеЗаполнено(ИмяПечатнойФормыДляАктаОРасхождениях) Тогда //ИЛИ Команда = "ПечатьАктаОРасхождениях"
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("Ссылка", ДокументАктОРасхождениях);
			СтруктураДополнительныхПараметров.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			СтруктураДополнительныхПараметров.Вставить("Редактирование", Ложь);
			СтруктураДополнительныхПараметров.Вставить("Защита", Истина);
			СтруктураДополнительныхПараметров.Вставить("СразуНаПринтер", Истина);
			СтруктураДополнительныхПараметров.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Ландшафт);
			СтруктураДополнительныхПараметров.Вставить("АвтоМасштаб", Истина);
			
			НапечататьДокумент(ДокументАктОРасхождениях, ИмяПечатнойФормыДляАктаОРасхождениях, СтруктураДополнительныхПараметров, "ФормаОбъекта");
			
		КонецЕсли;
		
	КонецПроцедуры


	&НаКлиенте
	Процедура КомандаЗавершитьРаботу(Команда)

		Закрыть();

	КонецПроцедуры

	&НаКлиенте
	Процедура Декорация1Нажатие(Элемент)
		
		ЭтоАдминистратор = Строка(ТекущийПользователь) = "Администратор" ИЛИ РолиДоступны("Полные права", ТекущийПользователь, Истина);
		ДоступКСтраницеОтладкиРазрешен = ЭтоАдминистратор ИЛИ ВвестиПарольДоступа(); 
		
		Если  ДоступКСтраницеОтладкиРазрешен Тогда
			
			Попытка
				ТекущаяСтраницаДоПереходаНаСтраницаОтладка = Элементы.Страницы.ТекущаяСтраница;
			Исключение
				Возврат;
			КонецПопытки;
					
			ПерейтиНаСтраницу(Элементы.СтраницаНастройка);
		
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Функция ВвестиПарольДоступа()
		
		НужныйПарольДоступаКСтраницеОтладка = 369852147532159;
		Массив = Новый Массив;
		Массив.Добавить(Тип("Число"));
		КЧ = Новый КвалификаторыЧисла(15,0);
		ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
		ВведенноеЗначение = 0;
		Если ВвестиЗначение(ВведенноеЗначение, "Введите пароль доступа", ОписаниеТипов) Тогда
    		
    		Если ВведенноеЗначение = НужныйПарольДоступаКСтраницеОтладка Тогда
    			Возврат Истина;
    		Иначе
    			Возврат Ложь;	
    		КонецЕсли;	
    		
		КонецЕсли;
		
	КонецФункции	

	&НаКлиенте
	Процедура КомандаВозвратИзОтладки(Команда)
		
		ПерейтиНаСтраницу(ТекущаяСтраницаДоПереходаНаСтраницаОтладка);
		
	КонецПроцедуры

#КонецОбласти



#Область ОбщиеПроцедурыИФункции

	&НаСервере
	Процедура ИнициализироватьРабочееМесто(Отказ)
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	НастройкиРМК.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиРМК КАК НастройкиРМК
			|ГДЕ
			|	НастройкиРМК.РабочееМесто = &РабочееМесто";
		Запрос.УстановитьПараметр("РабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			НастройкиРМК = Выборка.Ссылка;
		Иначе
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не найден элемент справочника НастройкиРМК, соответствующий данному рабочему месту " + Строка(ПараметрыСеанса.РабочееМестоКлиента);
			СообщениеПользователю.Сообщить();
		КонецЕсли;

		ПользовательИБ = ПараметрыСеанса.ТекущийПользователь;

		Для Счетчик = 1 По 100 Цикл
			НоваяСтрока = ПредставлениеЧисел.Добавить();
			НоваяСтрока.Число = Счетчик;
			НоваяСтрока.Строка = Строка(Счетчик);
		КонецЦикла;
		
		СкладДляВозвратаБракаИИзлишков = Справочники.Склады.НайтиПоКоду("00155");
		
		Если ЗначениеЗаполнено(НастройкиРМК) Тогда
			Для Каждого СтрокаСкладовРМК Из НастройкиРМК.СкладскаяЛогистика Цикл
				Если СтрокаСкладовРМК.Назначение = Перечисления.КАБС_НазначенияСкладов.Уценка Тогда
					СкладДляВозвратаБракаИИзлишков = СтрокаСкладовРМК.Склад;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
		Элементы.СтатусыУЛ.ТолькоПросмотр = НЕ (Строка(ПараметрыСеанса.ТекущийПользователь) = "Администратор"); 
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура УстановитьВидимостьДоступность()
		
		Элементы.КомандаЗавершить.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ
			ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка
			ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольИзлишков
			ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУведомленияОНедостаткеКоробов
			ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПечать;

		Элементы.КомандаЗаблокировать.Видимость = Истина; 
		
		Элементы.КомандаУпаковать.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка
			ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольИзлишков
			ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ
			И ТекущийЭтап = "Приемка"
			И ФормироватьПеремещениеВозврат;

		Элементы.КомандаПечать.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПечать;
		
		Элементы.КомандаЗавершитьРаботу.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь
			ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтартВодитель;
		
		Элементы.КомандаУпаковать.Доступность = МожноУпаковать И ФормироватьПеремещениеВозврат;

		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУведомленияОНедостаткеКоробов Тогда
			Элементы.КомандаЗавершить.Заголовок = "Продолжить";
			Элементы.КомандаЗавершить.Доступность = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУведомленияОНедостаткеКоробов
				И Элементы.ДекорацияПриемщикГалка.Видимость;
		Иначе
			Элементы.КомандаЗавершить.Заголовок = "Завершить";
			
			Если ТекущийПодЭтап = "Передача водителю" Тогда
				МожноЗавершить = ВсеУЛПринятыВодителем();
			КонецЕсли;
				
			Элементы.КомандаЗавершить.Доступность = (МожноЗавершить
				И НЕ МожноУпаковать) ИЛИ ТекущийПодэтап = "Прием коробов"
				ИЛИ ТекущийПодэтап = "Контроль"
				ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПечать;
		КонецЕсли;

		ЭтаФорма.Заголовок = "Этап " + ТекущийЭтап + ", " + ТекущийПодэтап;

	КонецПроцедуры

	&НаСервере
	Процедура УстановитьОтборСпискаУЛ()

		СтатусыУЛ.Отбор.Элементы.Очистить();

		Если ТекущийЭтап = "Приемка" Тогда

			ЭлементОтбора = СтатусыУЛ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОтгрузки");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ПравоеЗначение = ДокументОтгрузки;

			Если ТекущийПодэтап = "Приемка коробов" Тогда

				ЭлементОтбора = СтатусыУЛ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этап");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Перечисления.КАБС_ЭтапыБизнесПроцессов.Транспортировка;
				ЭлементОтбора.Использование = Истина;

				//на этапе приемки коробов УЛ с состояние Квыполнению не показываем
				ЭлементОтбора = СтатусыУЛ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.ПравоеЗначение = Перечисления.КАБС_СостояниеДокументов.КВыполнению;
				ЭлементОтбора.Использование = Истина;

				//показываем только УЛ, которые везет выбранный водитель
				ЭлементОтбора = СтатусыУЛ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Пользователь");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущийВодитель;
				ЭлементОтбора.Использование = Истина;

			ИначеЕсли ТекущийПодэтап = "Контроль" Тогда

				ЭлементОтбора = СтатусыУЛ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этап");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Перечисления.КАБС_ЭтапыБизнесПроцессов.Приемка;
				ЭлементОтбора.Использование = Истина;

			КонецЕсли;

		ИначеЕсли ТекущийЭтап = "Возврат" Тогда

			ЭлементОтбора = СтатусыУЛ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументОтгрузки");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ПравоеЗначение = ДокументПеремещениеВозврат;

			ЭлементОтбора = СтатусыУЛ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этап");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Перечисления.КАБС_ЭтапыБизнесПроцессов.Транспортировка;

			ПодстрокаПоиска = "Выбор Когда РегистрСведенийКАБС_КонтрольРабочегоВремениСрезПоследних.Состояние = Значение(Перечисление.КАБС_СостояниеДокументов.Окончание)";
			ПодстрокаЗамены = "Выбор Когда РегистрСведенийКАБС_КонтрольРабочегоВремениСрезПоследних.Состояние = Значение(Перечисление.КАБС_СостояниеДокументов.Начало)";
			СтатусыУЛ.ТекстЗапроса = СтрЗаменить(СтатусыУЛ.ТекстЗапроса, ПодстрокаПоиска, ПодстрокаЗамены);
			Элементы.СтатусыУЛ.ПодчиненныеЭлементы.СтатусыУЛОкончаниеЭтапа.Заголовок = "Передан";
			
		КонецЕсли;

	КонецПроцедуры

	&НаСервере
	Процедура УстановитьТекущиеЭтапИПодэтап(Этап = Неопределено,
			Подэтап = Неопределено)

		Если ЗначениеЗаполнено(Этап) Тогда
			ТекущийЭтап = Этап;
		КонецЕсли;
		Если ЗначениеЗаполнено(Подэтап) Тогда
			ТекущийПодэтап = Подэтап;
		КонецЕсли;

	КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

	#Область ОбработкаШтрихкодов

		&НаКлиенте
		Процедура ОбработатьШтрихкодыПользователя(Данные)


			ПользовательПоШтрихкоду = ПолучитьПользователяПоШтрихкоду(Данные.Штрихкод);

			Если ЗначениеЗаполнено(ПользовательПоШтрихкоду) Тогда
				ЭтоВодитель = РолиДоступны("КАБС_Водитель", ПользовательПоШтрихкоду, Истина);
				ЭтоПриемщик = РолиДоступны("КАБС_Приемщик", ПользовательПоШтрихкоду, Истина);

				Если ЭтоВодитель Тогда

					Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтартВодитель Тогда
						ТекущийВодитель = ПользовательПоШтрихкоду;
						ПерейтиНаСтраницу(Элементы.СтраницаДокумент);
					ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУведомленияОНедостаткеКоробов Тогда
					//УстановитьКартинкуНаСервере("Водитель");
						Если ПользовательПоШтрихкоду = ТекущийВодитель Тогда
							Элементы.ДекорацияВодительМинус.Видимость = Ложь;
							Элементы.ДекорацияВодительГалка.Видимость = Истина;
							Элементы.ДекорацияВодительНаименование.Заголовок = Строка(ПользовательПоШтрихкоду);
							УстановитьВидимостьДоступность();
						КонецЕсли;
					ИначеЕсли	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь Тогда
						ПоказатьПредупреждение(Неопределено, НСтр("ru = 'У пользователя не установлена роль Приемщик'"));
					КонецЕсли;
					

				ИначеЕсли ЭтоПриемщик Тогда

					Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУведомленияОНедостаткеКоробов Тогда
						Если ПользовательПоШтрихкоду = ТекущийПриемщик Тогда
							Элементы.ДекорацияПриемщикМинус.Видимость = Ложь;
							Элементы.ДекорацияПриемщикГалка.Видимость = Истина;
							Элементы.ДекорацияПриемщикНаименование.Заголовок = Строка(ПользовательПоШтрихкоду);
							УстановитьВидимостьДоступность();
						КонецЕсли;
					Иначе

						ТекущийПриемщик = ПользовательПоШтрихкоду;

						Если ЗначениеЗаполнено(ТекущийВодитель) Тогда

							Если ПроверкаВозможностиРаботыПользователя(ПользовательПоШтрихкоду) Тогда

								Если ТекущийЭтап = "Возврат" Тогда
									ПерейтиНаСтраницу(Элементы.СтраницаКонтрольИзлишков);
									ОбновитьДеревоТоваровПоТабличнымЧастям();
								Иначе
									Если ЗначениеЗаполнено(УпаковочныйЛист) Тогда
										ПерейтиНаСтраницу(Элементы.СтраницаПриемка);
									Иначе
										ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
										УстановитьОтборСпискаУЛ();
									КонецЕсли;
								КонецЕсли;

							Иначе
								ПерейтиНаСтраницу(Элементы.СтраницаДокумент);
							КонецЕсли;
						Иначе
							ПерейтиНаСтраницу(Элементы.СтраницаСтартВодитель);
						КонецЕсли;
					КонецЕсли;

				Иначе
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'У пользователя не установлена роль Водитель или Приемщик'"));
				КонецЕсли
			Иначе
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Пользователь не обнаружен.'"));
			КонецЕсли;

			УстановитьВидимостьДоступность();

		КонецПроцедуры

		&НаКлиенте
		Процедура ОбработатьШтрихкодыРаспоряжений(Данные)

			МассивСсылок = ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод, ПредопределенноеЗначение("Документ.ПеремещениеТоваров.ПустаяСсылка"));
			Если МассивСсылок.Количество() > 0 Тогда

				пДокументПеремещение = МассивСсылок[0];
				
				СтруктураРезультатыПроверки = Новый Структура;
				
				Если ПроверкаВозможностиРаботыСДокументом(пДокументПеремещение, СтруктураРезультатыПроверки) Тогда
					Если НЕ ЗначениеЗаполнено(ДокументОтгрузки) Тогда
						ДокументОтгрузки = пДокументПеремещение;
					КонецЕсли;

					Если ТекущийЭтап = "Приемка" Тогда
						Если ТекущийПодэтап = "Приемка коробов" Тогда
							ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
						ИначеЕсли ТекущийПодэтап = "Контроль" Тогда
							ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
						КонецЕсли;
					ИначеЕсли ТекущийЭтап = "Возврат" Тогда
						Если ТекущийПодэтап = "Контроль излишков" Тогда
							ПерейтиНаСтраницу(Элементы.СтраницаКонтрольИзлишков);
							ОбновитьДеревоТоваровПоТабличнымЧастям();
						ИначеЕсли ТекущийПодэтап = "Передача водителю" Тогда
							ПерейтиНаСтраницу(Элементы.СтраницаУЛ);
						КонецЕсли;
					КонецЕсли;

					УстановитьОтборСпискаУЛ();
				Иначе
					
					СообщениеПользователюТекст = "По данному перемещению нет упаковочных листов к приемке от текущего водителя" +
						?(ФормироватьПеремещениеВозврат," или возврату излишков и брака!","!");
					Если ЗначениеЗаполнено(СтруктураРезультатыПроверки) Тогда 
						СтруктураРезультатыПроверки.Свойство("СообщениеПользователюТекст", СообщениеПользователюТекст);
					КонецЕсли;
					ПоказатьПредупреждение(Неопределено, СообщениеПользователюТекст, 5, "Отказ");
						
				КонецЕсли;
			Иначе
				Сообщить("Не найден документ перемещение по шктрихкоду!" + Данные.Штрихкод);
			КонецЕсли;

			УстановитьВидимостьДоступность();

		КонецПроцедуры

		&НаКлиенте
		Процедура ОбработатьШтрихкодыНоменклатуры(ЭтоБрак, ДанныеШтрихкодов) Экспорт
			
			СтруктураРезультатОбработки = Новый Структура("Товар,Номенклатура,Упаковка,КоличествоУпаковок");
			ОбработатьШтрихкодыНоменклатурыНаСервере(ЭтоБрак, ДанныеШтрихкодов, СтруктураРезультатОбработки);
			Если ЗначениеЗаполнено(Информация) Тогда
				ПоказатьПредупреждение(Неопределено, Информация, 5, "Отказ");
				Информация = "";
			КонецЕсли;
			
			ОбновитьДеревоТоваровПоТабличнымЧастям();
			УстановитьКурсорВДереве(СтруктураРезультатОбработки.Товар);
			УстановитьВидимостьДоступность();

		КонецПроцедуры

		&НаСервере
		Процедура ОбработатьШтрихкодыНоменклатурыНаСервере(ЭтоБрак,
				ДанныеШтрихкодов, СтруктураРезультатОбработки)

			Если ЭтоБрак = Неопределено Тогда
				Возврат
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПредставлениеЧисел.Число КАК Число,
			|	ПредставлениеЧисел.Строка КАК Строка
			|ПОМЕСТИТЬ врПредставлениеЧисел
			|ИЗ
			|	&ПредставлениеЧисел КАК ПредставлениеЧисел
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
			|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
			|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА ШтрихкодыНоменклатуры.Упаковка.Числитель = 0
			|				ТОГДА 1
			|			ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Числитель
			|		КОНЕЦ
			|	КОНЕЦ КАК Коэффициент
			|ПОМЕСТИТЬ врШтрихкоды
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
			|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
			|	ПеремещениеТоваровТовары.Количество КАК Количество,
			|	ПеремещениеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
			|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
			|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
			|	ПеремещениеТоваровТовары.КодСтроки КАК КодСтроки,
			|	ПеремещениеТоваровТовары.Назначение КАК Назначение,
			|	ПеремещениеТоваровТовары.Серия КАК Серия,
			|	ПеремещениеТоваровТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	ВЫБОР
			|		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
			|				ТОГДА 1
			|			ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
			|		КОНЕЦ
			|	КОНЕЦ КАК Коэффициент,
			|	ПеремещениеТоваровТовары.Цена КАК Цена
			|ПОМЕСТИТЬ врЗаказТовары
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			|ГДЕ
			|	ПеремещениеТоваровТовары.Ссылка = &ДокументОтгрузки
			|	И ПеремещениеТоваровТовары.УпаковочныйЛист = &УпаковочныйЛист
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
			|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
			|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.Количество) КАК Количество,
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки,
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель, 1) КАК Коэффициент
			|ПОМЕСТИТЬ врОстаткиОтгружено
			|ИЗ
			|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
			|	И КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель = &СкладОтправитель
			|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
			|	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
			|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
			|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = &УпаковочныйЛист
			|СГРУППИРОВАТЬ ПО
			|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто,
			|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель,
			|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка,
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель, 1)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(врЗаказТовары.Номенклатура, врОстаткиОтгружено.Номенклатура) КАК Номенклатура,
			|	ЕСТЬNULL(врЗаказТовары.Характеристика, врОстаткиОтгружено.Характеристика) КАК Характеристика,
			|	врЗаказТовары.КодСтроки КАК КодСтроки,
			|	ЕСТЬNULL(врЗаказТовары.Количество, 0) КАК КОформлениюОстаток,
			|	СУММА(ЕСТЬNULL(врОстаткиОтгружено.Количество, 0)) КАК ОтгруженоОстаток,
			|	ЕСТЬNULL(врЗаказТовары.Упаковка, врОстаткиОтгружено.Упаковка) КАК Упаковка,
			|	ЕСТЬNULL(врЗаказТовары.Упаковка.Числитель, 1) КАК Коэффициент,
			|	врЗаказТовары.НомерСтроки КАК НомерСтроки,
			|	врЗаказТовары.Цена КАК Цена
			|ПОМЕСТИТЬ врОстаткиКЗаказу
			|ИЗ
			|	врЗаказТовары КАК врЗаказТовары
			|		ПОЛНОЕ СОЕДИНЕНИЕ врОстаткиОтгружено КАК врОстаткиОтгружено
			|		ПО врЗаказТовары.Номенклатура = врОстаткиОтгружено.Номенклатура
			|		И врЗаказТовары.Характеристика = врОстаткиОтгружено.Характеристика
			|		И врЗаказТовары.Коэффициент = врОстаткиОтгружено.Коэффициент
			|		И врЗаказТовары.КодСтроки = врОстаткиОтгружено.КодСтроки
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(врЗаказТовары.Количество, 0),
			|	врЗаказТовары.КодСтроки,
			|	ЕСТЬNULL(врЗаказТовары.Характеристика, врОстаткиОтгружено.Характеристика),
			|	ЕСТЬNULL(врЗаказТовары.Номенклатура, врОстаткиОтгружено.Номенклатура),
			|	ЕСТЬNULL(врЗаказТовары.Упаковка, врОстаткиОтгружено.Упаковка),
			|	врЗаказТовары.НомерСтроки,
			|	ВЫБОР
			|		КОГДА врЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА врЗаказТовары.Упаковка.Числитель = 0
			|				ТОГДА 1
			|			ИНАЧЕ врЗаказТовары.Упаковка.Числитель
			|		КОНЕЦ
			|	КОНЕЦ,
			|	ЕСТЬNULL(врЗаказТовары.Упаковка.Числитель, 1),
			|	врЗаказТовары.Цена
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	врЗаказТовары.КодСтроки,
			|	Упаковка,
			|	Коэффициент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врШтрихкоды.Штрихкод КАК Штрихкод,
			|	врШтрихкоды.Номенклатура КАК Номенклатура,
			|	врШтрихкоды.Характеристика КАК Характеристика,
			|	врШтрихкоды.Упаковка КАК Упаковка,
			|	&СкладОтправитель КАК СкладОтправитель,
			|	&СкладПолучатель КАК СкладПолучатель,
			|	&ДокументОснование КАК ДокументОснование,
			|	&ДокументОтгрузки КАК ДокументОтгрузки,
			|	1 КАК КоличествоУпаковок,
			|	&Пользователь КАК Пользователь,
			|	&РабочееМесто КАК РабочееМесто,
			|	&Период КАК Период,
			|	ЕСТЬNULL(врОстаткиКЗаказу.Цена, 0) КАК Цена,
			|	ЕСТЬNULL(врОстаткиКЗаказу.Цена, 0) КАК Сумма,
			|	врШтрихкоды.Коэффициент КАК Количество,
			|	&ЭтоБрак КАК ЭтоБрак,
			|	ЕСТЬNULL(врОстаткиКЗаказу.КОформлениюОстаток, 0) КАК КОформлениюОстаток,
			|	ЕСТЬNULL(врОстаткиКЗаказу.ОтгруженоОстаток, 0) КАК ОтгруженоОстаток,
			|	врОстаткиКЗаказу.КодСтроки КАК КодСтроки,
			|	ВЫБОР
			|		КОГДА врШтрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			ТОГДА врШтрихкоды.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|		ИНАЧЕ врШтрихкоды.Номенклатура.Наименование + "", "" + врШтрихкоды.Характеристика.Наименование + "", "" +
			|			врПредставлениеЧисел.Строка + "" шт""
			|	КОНЕЦ КАК Товар,
			|	&УпаковочныйЛист КАК УпаковочныйЛист
			|ИЗ
			|	врШтрихкоды КАК врШтрихкоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ врОстаткиКЗаказу КАК врОстаткиКЗаказу
			|		ПО врШтрихкоды.Номенклатура = врОстаткиКЗаказу.Номенклатура
			|		И врШтрихкоды.Характеристика = врОстаткиКЗаказу.Характеристика
			|		И врШтрихкоды.Коэффициент = врОстаткиКЗаказу.Коэффициент
			|		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
			|		ПО врШтрихкоды.Коэффициент = врПредставлениеЧисел.Число
			|УПОРЯДОЧИТЬ ПО
			|	КодСтроки УБЫВ
			|ИТОГИ
			|	СУММА(КОформлениюОстаток),
			|	СУММА(ОтгруженоОстаток),
			|	МАКСИМУМ(врШтрихкоды.Коэффициент),
			|	МАКСИМУМ(врШтрихкоды.Номенклатура)
			|ПО
			|	Товар";

			Запрос.УстановитьПараметр("ПредставлениеЧисел", ПредставлениеЧисел.Выгрузить());
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
			Запрос.УстановитьПараметр("УпаковочныйЛист", УпаковочныйЛист);
			Запрос.УстановитьПараметр("СкладОтправитель", ДокументОснование.СкладОтправитель);
			Запрос.УстановитьПараметр("ШтрихКод", ДанныеШтрихкодов[0].Штрихкод);

			Запрос.УстановитьПараметр("СкладПолучатель", ДокументОснование.СкладПолучатель);
			Запрос.УстановитьПараметр("ВидЦены", ДокументОснование.СкладПолучатель.УчетныйВидЦены);
			Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
			Запрос.УстановитьПараметр("Пользователь", ТекущийПриемщик);
			Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("ЭтоБрак", ЭтоБрак);

			Если Элементы.страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольИзлишков Тогда
				Запрос.Текст = ТекстЗапросаОбработатьШтрихкодыНоменклатурыИзлишки();
				Запрос.УстановитьПараметр("СкладОтправитель", ДокументОснование.СкладПолучатель);
				Запрос.УстановитьПараметр("СкладДляВозврата", СкладДляВозвратаБракаИИзлишков);
			КонецЕсли;

			Результат = Запрос.Выполнить();

			Если Результат.Пустой() Тогда
				Информация = "Товар не найден!";
				Возврат;
			КонецЕсли;

			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока Выборка.Следующий() Цикл
				
				Если Выборка.КОформлениюОстаток < Выборка.ОтгруженоОстаток + Выборка.Количество  Тогда
					
					Если НЕ ПараметрРазрешитьПриходоватьОтсутствующийВПеремещенииТовар Тогда
						Информация = "Отсутствует товар " + Выборка.Товар
						+ " в упаковочном листе!" + Символы.ПС + "Считайте штрихкод упаковки!";
						Прервать;
					КонецЕсли;
					
					Если Выборка.Количество <=1 Тогда
						Если ТаблицаТоваровИзСегментаПринимаемыхШтучно.НайтиСтроки(Новый Структура("ЭлементСписка", Выборка.Номенклатура)).Количество() = 0 Тогда
							Информация = "Сосканирован штрихкод одной штуки товара " + Выборка.Товар + ", который не входит в сегмент товаров принимаемых поштучно! " + Символы.ПС + "Считайте штрихкод упаковки!";
							Прервать;
						КонецЕсли;
					КонецЕсли;		
					
				КонецЕсли;

				ВыборкаДетальныеЗаписи = Выборка.Выбрать();

				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.КОформлениюОстаток >= ВыборкаДетальныеЗаписи.ОтгруженоОстаток
							+ ВыборкаДетальныеЗаписи.Количество 
							ИЛИ (ПараметрРазрешитьПриходоватьОтсутствующийВПеремещенииТовар И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодСтроки))
							ИЛИ  ВыборкаДетальныеЗаписи.КОформлениюОстаток = Выборка.КОформлениюОстаток  
							Тогда
						
							//пишем в рабочий запись
						МенеджерЗаписи = РегистрыСведений.КАБС_ПредварительныеСтрокиПеремещение.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
						МенеджерЗаписи.Прочитать();
						Если МенеджерЗаписи.Выбран() Тогда
							МенеджерЗаписи.КоличествоУпаковок = МенеджерЗаписи.КоличествоУпаковок
								+ ВыборкаДетальныеЗаписи.КоличествоУпаковок;
							МенеджерЗаписи.Количество = МенеджерЗаписи.Количество
								+ ВыборкаДетальныеЗаписи.Количество;
							МенеджерЗаписи.Сумма = МенеджерЗаписи.Сумма
								+ ВыборкаДетальныеЗаписи.Сумма;
						Иначе
							ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
						КонецЕсли;

						Если Элементы.страницы.ТекущаяСтраница = Элементы.СтраницаПриемка Тогда
							МенеджерЗаписи.Записать();
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(СтруктураРезультатОбработки, ВыборкаДетальныеЗаписи);
						
						//пишем в рабочий запись для формирования возврата с линии
						Если ЭтоБрак
								ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольИзлишков Тогда
							МенеджерЗаписи = РегистрыСведений.КАБС_ПредварительныеСтрокиПеремещение.СоздатьМенеджерЗаписи();
							ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
							//перемещаем упаковочный лист в родителя
							МенеджерЗаписи.УпаковочныйЛистРодитель = МенеджерЗаписи.УпаковочныйЛист;
							МенеджерЗаписи.УпаковочныйЛист = Документы.УпаковочныйЛист.ПустаяСсылка();
							МенеджерЗаписи.ДокументОтгрузки = Документы.ПеремещениеТоваров.ПустаяСсылка();
							МенеджерЗаписи.СкладПолучатель = СкладДляВозвратаБракаИИзлишков;
							МенеджерЗаписи.СкладОтправитель = ДокументОснование.СкладПолучатель;

							МенеджерЗаписи.Прочитать();

							Если МенеджерЗаписи.Выбран() Тогда
								МенеджерЗаписи.КоличествоУпаковок = МенеджерЗаписи.КоличествоУпаковок
									+ ВыборкаДетальныеЗаписи.КоличествоУпаковок;
								МенеджерЗаписи.Количество = МенеджерЗаписи.Количество
									+ ВыборкаДетальныеЗаписи.Количество;
								МенеджерЗаписи.Сумма = МенеджерЗаписи.Сумма
									+ ВыборкаДетальныеЗаписи.Сумма;
							Иначе
								ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
								//перемещаем упаковочный лист в родителя
								МенеджерЗаписи.УпаковочныйЛистРодитель = МенеджерЗаписи.УпаковочныйЛист;
								МенеджерЗаписи.УпаковочныйЛист = Документы.УпаковочныйЛист.ПустаяСсылка();
								МенеджерЗаписи.ДокументОтгрузки = Документы.ПеремещениеТоваров.ПустаяСсылка();
								МенеджерЗаписи.СкладПолучатель = СкладДляВозвратаБракаИИзлишков;
								МенеджерЗаписи.СкладОтправитель = ДокументОснование.СкладПолучатель;

							КонецЕсли;
							МенеджерЗаписи.Записать();
						КонецЕсли;
						
						//УстановитьКурсорВДереве(ВыборкаДетальныеЗаписи.Товар);
						Прервать;

					Иначе
						//превышение остатка к оформлению. На странице Приемка можно превышать. На странице КонтрольИзлишков нельзя
						//Сообщить("Превышен остаток к оформлению по товару");
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

		КонецПроцедуры

		&НаКлиенте
		Процедура ОбработатьШтрихкодыУЛ(Данные)

			пУпаковочныйЛист = ПолучитьУпаковочныйЛист(Данные.Штрихкод);
			Если НЕ пУпаковочныйЛист = Неопределено Тогда

				Если ПроверкаВозможностиРаботыСУЛ(пУпаковочныйЛист) Тогда
					Если ТекущийЭтап = "Приемка" Тогда
						Если ТекущийПодэтап = "Приемка коробов" ИЛИ ТекущийПодэтап = "" Тогда
							СнятиеУпаковочногоЛистаСВодителя(пУпаковочныйЛист);
						ИначеЕсли ТекущийПодэтап = "Контроль" Тогда
							УпаковочныйЛист = пУпаковочныйЛист;
							НачатьПриемкуУпаковочногоЛиста();
							ПерейтиНаСтраницу(Элементы.СтраницаПриемка);
							ОбновитьДеревоТоваровПоТабличнымЧастям();
						КонецЕсли;
					ИначеЕсли ТекущийЭтап = "Возврат" Тогда
						ЗаписатьНачалоТранспортировкиУпаковочногоЛиста(пУпаковочныйЛист);
					КонецЕсли;
				Иначе
					Сообщить("Этот упаковочный лист " + пУпаковочныйЛист + " уже сосканирован и передан или не относится к обрабатываемому перемещению");
				КонецЕсли;
			Иначе
				Сообщить("Не найден упаковочный лист по штрихкоду");
			КонецЕсли;

		КонецПроцедуры
	#КонецОбласти

	#Область ПроверкаВозможностиРаботы

		&НаСервере
		Функция ПроверкаВозможностиРаботыПользователя(ЗначениеПроверки)

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Период КАК Период,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОснование КАК ДокументОснование,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументПриемки КАК ДокументПриемки,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Этап КАК Этап,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Состояние КАК Состояние,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.РабочееМесто КАК РабочееМесто,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Пользователь КАК Пользователь,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Склад КАК Склад
				|ПОМЕСТИТЬ врСостоянияДокументов
				|ИЗ
				|	РегистрСведений.КАБС_КонтрольРабочегоВремени.СрезПоследних КАК КАБС_КонтрольРабочегоВремениСрезПоследних
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	врСостоянияДокументов.Период КАК Период,
				|	врСостоянияДокументов.ДокументОснование КАК ДокументОснование,
				|	врСостоянияДокументов.ДокументОтгрузки КАК ДокументОтгрузки,
				|	врСостоянияДокументов.ДокументПриемки КАК ДокументПриемки,
				|	врСостоянияДокументов.УпаковочныйЛист КАК УпаковочныйЛист,
				|	врСостоянияДокументов.Этап КАК Этап,
				|	врСостоянияДокументов.Состояние КАК Состояние,
				|	врСостоянияДокументов.РабочееМесто КАК РабочееМесто,
				|	врСостоянияДокументов.Пользователь КАК Пользователь,
				|	врСостоянияДокументов.Склад КАК Склад,
				|	ВЫБОР
				|		КОГДА врСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Начало)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК НачалоПриемкиПоУл,
				|	ВЫБОР
				|		КОГДА врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Сборка)
				|			ТОГДА 1
				|		ИНАЧЕ ВЫБОР
				|				КОГДА врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Контроль)
				|					ТОГДА 2
				|				ИНАЧЕ ВЫБОР
				|						КОГДА врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Отгрузка)
				|							ТОГДА 3
				|						ИНАЧЕ ВЫБОР
				|								КОГДА врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка)
				|									ТОГДА 4
				|								ИНАЧЕ ВЫБОР
				|										КОГДА врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)
				|											ТОГДА 5
				|										ИНАЧЕ ВЫБОР
				|												КОГДА врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Возврат)
				|													ТОГДА 6
				|												ИНАЧЕ 0
				|											КОНЕЦ
				|									КОНЕЦ
				|							КОНЕЦ
				|					КОНЕЦ
				|			КОНЕЦ
				|	КОНЕЦ КАК Порядок
				|ИЗ
				|	врСостоянияДокументов КАК врСостоянияДокументов
				|ГДЕ
				|	врСостоянияДокументов.Пользователь = &Пользователь
				|	И (врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)
				|			ИЛИ врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Возврат))
				|	И (врСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Начало)
				|			ИЛИ врСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Окончание))
				|
				|УПОРЯДОЧИТЬ ПО
				|	Порядок УБЫВ,
				|	Состояние
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	врСостоянияДокументов.Период КАК Период,
				|	врСостоянияДокументов.ДокументОснование КАК ДокументОснование,
				|	врСостоянияДокументов.ДокументОтгрузки КАК ДокументОтгрузки,
				|	врСостоянияДокументов.ДокументПриемки КАК ДокументПриемки,
				|	врСостоянияДокументов.УпаковочныйЛист КАК УпаковочныйЛист,
				|	врСостоянияДокументов.Этап КАК Этап,
				|	врСостоянияДокументов.Состояние КАК Состояние,
				|	врСостоянияДокументов.РабочееМесто КАК РабочееМесто,
				|	врСостоянияДокументов.Пользователь КАК Пользователь,
				|	врСостоянияДокументов.Склад КАК Склад
				|ИЗ
				|	врСостоянияДокументов КАК врСостоянияДокументов
				|ГДЕ
				|	врСостоянияДокументов.Пользователь = &Пользователь
				|	И (врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)
				|			ИЛИ врСостоянияДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Возврат))
				|	И врСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.КВыполнению)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
				|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
				|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
				|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
				|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
				|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
				|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
				|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
				|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
				|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
				|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
				|ИЗ
				|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
				|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
				|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
				|	И НЕ КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)";

			Запрос.УстановитьПараметр("Пользователь", ЗначениеПроверки);
			Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);

			Результат = Запрос.ВыполнитьПакет();

			МожноЗавершить = Результат[2].Пустой();
			МожноУпаковать = Не Результат[3].Пустой();

			Выборка = Результат[1].Выбрать();
			Если Выборка.Следующий() Тогда

				Если Выборка.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Возврат
						И Не МожноУпаковать Тогда

					Если Выборка.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало Тогда
						ДокументОснование = Выборка.ДокументОснование;
						ДокументОтгрузки = Выборка.ДокументОтгрузки;
						УстановитьТекущиеЭтапИПодэтап(Строка(Выборка.Этап), "Контроль излишков");
						Возврат Истина;
					КонецЕсли;

				ИначеЕсли Выборка.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Приемка Тогда
					ДокументОснование = Выборка.ДокументОснование;
					ДокументОтгрузки = Выборка.ДокументОтгрузки;
					Если Выборка.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало Тогда
						УпаковочныйЛист = Выборка.УпаковочныйЛист;
					КонецЕсли;
					Возврат Истина;
				Иначе

				КонецЕсли;

			Иначе
				Возврат Ложь;
			КонецЕсли;

			Возврат Истина;

		КонецФункции

		&НаСервере
		Функция ПроверкаВозможностиРаботыСДокументом(ЗначениеПроверки, СтруктураВозврата = Неопределено)

			Если НЕ ТипЗнч(ЗначениеПроверки) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
				Возврат Ложь;
			КонецЕсли;

			Если НЕ ЗначениеПроверки.СкладПолучатель = НастройкиРМК.СкладПолучатель Тогда
				Сообщить("Склад получатель накладной " + ЗначениеПроверки.СкладПолучатель
					+ " не совпадает со складом получателем рабочего места "
					+ НастройкиРМК.СкладПолучатель);
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка) КАК Этап
			|ПОМЕСТИТЬ втСписокЭтапов
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Возврат)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Период КАК Период,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОснование КАК ДокументОснование,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Этап КАК Этап,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Состояние КАК Состояние,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.РабочееМесто КАК РабочееМесто,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Пользователь КАК Пользователь,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Склад КАК Склад,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОтгрузки КАК ДокументОтгрузки,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументПриемки КАК ДокументПриемки
			|ПОМЕСТИТЬ врСостояниеДокументов
			|ИЗ
			|	РегистрСведений.КАБС_КонтрольРабочегоВремени.СрезПоследних(, ДокументОснование = &ДокументОснование
			|	И Этап В
			|		(ВЫБРАТЬ
			|			втСписокЭтапов.Этап
			|		ИЗ
			|			втСписокЭтапов)
			|	И Склад В (&СписокСкладов)) КАК КАБС_КонтрольРабочегоВремениСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	врСостояниеДокументов.ДокументОтгрузки КАК ДокументОтгрузки
			|ПОМЕСТИТЬ втПеремещенияПоДокументуОснованию
			|ИЗ
			|	врСостояниеДокументов КАК врСостояниеДокументов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументПеремещениеТоваров.Ссылка КАК Ссылка,
			|	ДокументПеремещениеТоваров.СкладПолучатель КАК СкладПолучатель
			|ПОМЕСТИТЬ втСкладыПеремещения
			|ИЗ
			|	Документ.ПеремещениеТоваров КАК ДокументПеремещениеТоваров
			|ГДЕ
			|	ДокументПеремещениеТоваров.Ссылка В
			|		(ВЫБРАТЬ
			|			втПеремещенияПоДокументуОснованию.ДокументОтгрузки
			|		ИЗ
			|			втПеремещенияПоДокументуОснованию)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врСостояниеДокументов.Период КАК Период,
			|	врСостояниеДокументов.ДокументОснование КАК ДокументОснование,
			|	врСостояниеДокументов.УпаковочныйЛист КАК УпаковочныйЛист,
			|	врСостояниеДокументов.Этап КАК Этап,
			|	врСостояниеДокументов.Состояние КАК Состояние,
			|	врСостояниеДокументов.РабочееМесто КАК РабочееМесто,
			|	врСостояниеДокументов.Пользователь КАК Пользователь,
			|	врСостояниеДокументов.Склад КАК Склад,
			|	врСостояниеДокументов.ДокументОтгрузки КАК ДокументОтгрузки,
			|	врСостояниеДокументов.ДокументПриемки КАК ДокументПриемки,
			|	втСкладыПеремещения.СкладПолучатель КАК СкладПолучатель,
			|	ВЫБОР
			|		КОГДА врСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Сборка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА врСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Контроль)
			|				ТОГДА 2
			|			ИНАЧЕ ВЫБОР
			|				КОГДА врСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Отгрузка)
			|					ТОГДА 3
			|				ИНАЧЕ ВЫБОР
			|					КОГДА врСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка)
			|					И втСкладыПеремещения.СкладПолучатель = &СкладМагазина
			|					И
			|					НЕ врСостояниеДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.КВыполнению)
			|					И врСостояниеДокументов.Пользователь = &Водитель
			|						ТОГДА 4
			|					ИНАЧЕ ВЫБОР
			|						КОГДА врСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)
			|							ТОГДА 5
			|						ИНАЧЕ ВЫБОР
			|							КОГДА врСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Возврат)
			|								ТОГДА 6
			|							ИНАЧЕ ВЫБОР
			|								КОГДА врСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка)
			|								И втСкладыПеремещения.СкладПолучатель = &СкладВозврата
			|								И врСостояниеДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.КВыполнению)
			|									ТОГДА 7
			|								ИНАЧЕ ВЫБОР
			|									КОГДА врСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка)
			|									И втСкладыПеремещения.СкладПолучатель = &СкладВозврата
			|									И врСостояниеДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Начало)
			|										ТОГДА 8
			|								КОНЕЦ
			|							КОНЕЦ
			|						КОНЕЦ
			|					КОНЕЦ
			|				КОНЕЦ
			|			КОНЕЦ
			|		КОНЕЦ
			|	КОНЕЦ КАК НомерЭтапа
			|ПОМЕСТИТЬ втСостояниеДокументовНомераЭтапов
			|ИЗ
			|	врСостояниеДокументов КАК врСостояниеДокументов
			|		ЛЕВОЕ СОЕДИНЕНИЕ втСкладыПеремещения КАК втСкладыПеремещения
			|		ПО врСостояниеДокументов.ДокументОтгрузки = втСкладыПеремещения.Ссылка
			|;
			|
			|/////////////////////////////////////////////////////////////////////////////////
			|Выбрать 
			|	ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.КВыполнению) КАК Состояние,
			|	1 КАК Порядок
			|Поместить втСостоянияДокументов
			|Объединить ВСЕ
			|Выбрать ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Начало),2
			|Объединить ВСЕ
			|Выбрать ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Окончание),3
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втСостояниеДокументовНомераЭтапов.ДокументОснование КАК ДокументОснование,
			|	втСостояниеДокументовНомераЭтапов.ДокументОтгрузки КАК ДокументОтгрузки,
			|	МАКСИМУМ(втСостояниеДокументовНомераЭтапов.НомерЭтапа) КАК НомерЭтапаМакс,
			|	МИНИМУМ(втСостояниеДокументовНомераЭтапов.НомерЭтапа) КАК НомерЭтапаМин,
			|	МИНИМУМ(втСостояниеДокументовНомераЭтапов.Состояние) КАК Состояние,
			|	МАКСИМУМ(втСостоянияДокументов.Порядок) КАК СостояниеПорядокМАКС,
			|	МИНИМУМ(втСостоянияДокументов.Порядок) КАК СостояниеПорядокМИН,
			|	втСостояниеДокументовНомераЭтапов.СкладПолучатель КАК СкладПолучатель,
			|	втСостояниеДокументовНомераЭтапов.Этап КАК Этап
			|ИЗ
			|	втСостояниеДокументовНомераЭтапов КАК втСостояниеДокументовНомераЭтапов
			|	Левое Соединение втСостоянияДокументов КАК втСостоянияДокументов
			|	ПО втСостоянияДокументов.Состояние = втСостояниеДокументовНомераЭтапов.Состояние
			|ГДЕ
			|	втСостояниеДокументовНомераЭтапов.НомерЭтапа МЕЖДУ 3 AND 8
			|СГРУППИРОВАТЬ ПО
			|	втСостояниеДокументовНомераЭтапов.ДокументОтгрузки,
			|	втСостояниеДокументовНомераЭтапов.ДокументОснование,
			|	втСостояниеДокументовНомераЭтапов.СкладПолучатель,
			|	втСостояниеДокументовНомераЭтапов.Этап
			|УПОРЯДОЧИТЬ ПО
			|	НомерЭтапаМин УБЫВ";

			СписокСкладов = Новый СписокЗначений;
			СписокСкладов.Добавить(ЗначениеПроверки.СкладОтправитель);
			СписокСкладов.Добавить(ЗначениеПроверки.СкладПолучатель);
			
			СписокЭтапов = Новый СписокЗначений;
			СписокЭтапов.Добавить(Перечисления.КАБС_ЭтапыБизнесПроцессов.Транспортировка);
			СписокЭтапов.Добавить(Перечисления.КАБС_ЭтапыБизнесПроцессов.Приемка);
			СписокЭтапов.Добавить(Перечисления.КАБС_ЭтапыБизнесПроцессов.Возврат);
			Запрос.УстановитьПараметр("СписокЭтапов", СписокЭтапов);

			Запрос.УстановитьПараметр("ДокументОтгрузки", ЗначениеПроверки);
			Запрос.УстановитьПараметр("ДокументОснование", ЗначениеПроверки.ЗаказНаПеремещение);
			Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
			Запрос.УстановитьПараметр("СкладВозврата", СкладДляВозвратаБракаИИзлишков);
			Запрос.УстановитьПараметр("СкладМагазина", НастройкиРМК.СкладПолучатель);
			Запрос.УстановитьПараметр("Водитель", ТекущийВодитель);

			Результат = Запрос.Выполнить();

			Выборка = Результат.Выбрать();

			Если Выборка.Следующий() Тогда
				ДокументОснование = Выборка.ДокументОснование;
				Если Выборка.НомерЭтапаМин = 4 Тогда
					УстановитьТекущиеЭтапИПодэтап("Приемка", "Приемка коробов");
				ИначеЕсли Выборка.НомерЭтапаМин = 5 Тогда
					Если ФормироватьПеремещениеВозврат 
						ИЛИ Выборка.СостояниеПорядокМИН < 3 Тогда //Порядок состояний: КВыполнению =1, Начало = 2, Окончание = 3
						УстановитьТекущиеЭтапИПодэтап("Приемка", "Контроль");
					Иначе
						СтруктураВозврата.Вставить("СообщениеПользователюТекст", "По данному перемещению уже выполнена приемка");	
						Возврат Ложь;		
					КонецЕсли;	
				ИначеЕсли Выборка.НомерЭтапаМин = 6 Тогда
					УстановитьТекущиеЭтапИПодэтап("Возврат", "Контроль излишков");
					ДокументПеремещениеВозврат = Выборка.ДокументОтгрузки;
				ИначеЕсли Выборка.НомерЭтапаМин = 7
						И Выборка.Состояние = Перечисления.КАБС_СостояниеДокументов.КВыполнению Тогда
					ДокументОтгрузки = Выборка.ДокументОтгрузки;
					ДокументПеремещениеВозврат = Выборка.ДокументОтгрузки;
					
					УстановитьТекущиеЭтапИПодэтап("Возврат", "Передача водителю");
				ИначеЕсли Выборка.НомерЭтапаМин = 8 Тогда
					
					Если СтруктураВозврата = Неопределено Тогда 			
						СтруктураВозврата = Новый Структура;
					КонецЕсли;
					
					СтруктураВозврата.Вставить("СообщениеПользователюТекст", "По данному перемещению уже сделана приемка
					| и все упаковочные листы с возвратом брака и излишков переданы водителю");	
					Возврат Ложь;
					
				Иначе
					Возврат Ложь;
				КонецЕсли;

				Если Выборка.НомерЭтапаМин = Выборка.НомерЭтапаМакс
						ИЛИ (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУЛ
						И ТекущийЭтап = "Приемка") Тогда
					МожноЗавершить = Истина;
				КонецЕсли;

				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;

		КонецФункции

		&НаСервере
		Функция ПроверкаВозможностиРаботыСУЛ(ЗначениеПроверки)

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Состояние КАК Состояние,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОснование КАК ДокументОснование,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Пользователь КАК Пользователь,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Этап КАК Этап
			|ПОМЕСТИТЬ врСтатусыУпаковочныхЛистов
			|ИЗ
			|	РегистрСведений.КАБС_КонтрольРабочегоВремени.СрезПоследних(, ДокументОснование = &ДокументОснование И УпаковочныйЛист = &УпаковочныйЛист) КАК КАБС_КонтрольРабочегоВремениСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врСтатусыУпаковочныхЛистов.Состояние КАК Состояние,
			|	врСтатусыУпаковочныхЛистов.ДокументОснование КАК ДокументОснование,
			|	врСтатусыУпаковочныхЛистов.Пользователь КАК Пользователь,
			|	врСтатусыУпаковочныхЛистов.Этап КАК Этап
			|ИЗ
			|	врСтатусыУпаковочныхЛистов КАК врСтатусыУпаковочныхЛистов";

			Если ТекущийЭтап = "Приемка" Тогда
				Если ТекущийПодэтап = "Приемка коробов" Тогда
					Запрос.Текст = Запрос.Текст + "
						|ГДЕ
						|	врСтатусыУпаковочныхЛистов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Начало)
						|	И врСтатусыУпаковочныхЛистов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка)";
				ИначеЕсли ТекущийПодэтап = "Контроль" Тогда
					Запрос.Текст = Запрос.Текст + "
						|ГДЕ
						|   врСтатусыУпаковочныхЛистов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)
						|	И (врСтатусыУпаковочныхЛистов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.КВыполнению)
						|	ИЛИ врСтатусыУпаковочныхЛистов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Начало))";
				КонецЕсли;

			ИначеЕсли ТекущийЭтап = "Возврат" Тогда
				Запрос.Текст = Запрос.Текст + "
					|ГДЕ
					|	 врСтатусыУпаковочныхЛистов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.КВыполнению)
					|	И врСтатусыУпаковочныхЛистов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка)";

			КонецЕсли;

			Запрос.УстановитьПараметр("УпаковочныйЛист", ЗначениеПроверки);
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;

		КонецФункции

	#КонецОбласти

	&НаКлиенте
	Процедура ВызватьИнтерактивноеОкно(ДанныеШтрихкодов)

		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьШтрихкодыНоменклатуры", ЭтотОбъект, ДанныеШтрихкодов);

		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДанныеШтрихкодов", ДанныеШтрихкодов);

		ОткрытьФорму("ВнешняяОбработка.АРМПриемкаКлумбаОрдерный.Форма.ФормаВопрос", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

	КонецПроцедуры

	&НаКлиенте
	Функция ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Штрихкод, ТипМетаданных)

		Менеджеры = Новый Массив();
		Менеджеры.Добавить(ТипМетаданных);
		Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);

	КонецФункции
	
#КонецОбласти

#Область ПолучениеДанных
	
	
	// Возвращает цену номенклатуры по учетному виду цен склада получателя из настроек РМК
	//
	// Параметры:  
	// Параметры - Структура("Номенклатура,Характеристика,Упаковка,ВидЦен")
	//
	&НаСервере
	Функция ПолучитьЦенуТовараНаСервере(Параметры)
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены = &ВидЦены
		|	И Номенклатура = &Номенклатура
		|	И Характеристика = &Характеристика
		|	И Упаковка = &Упаковка) КАК ЦеныНоменклатурыСрезПоследних";
		Запрос.УстановитьПараметр("ВидЦены", НастройкиРМК.СкладПолучатель.УчетныйВидЦены);
		Запрос.УстановитьПараметр("Номенклатура", Параметры.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Параметры.Характеристика);
		Запрос.УстановитьПараметр("Упаковка", Параметры.Упаковка);
		ТЗРезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если ТЗРезультатЗапроса.Количество() > 0 Тогда
			Возврат ТЗРезультатЗапроса[0].Цена;
		КонецЕсли;	
		Возврат 0;
	КонецФункции	
	
	&НаСервере
	Процедура ЗаполнитьТаблицуТоваровПринимаемыхПоштучноНаСервере()
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НЕ ЗначениеЗаполнено(СегментТоваровПринимаемыхПоштучно) Тогда
			
			Если Не ЗначениеЗаполнено(СегментТоваровПринимаемыхПоштучно) Тогда
				СегментТоваровПринимаемыхПоштучно = Справочники.СегментыНоменклатуры.НайтиПоНаименованию("СегментНоменклатурыПринимаемойПоштучно", Истина);
			КонецЕсли;
			Если 	Не ЗначениеЗаполнено(СегментТоваровПринимаемыхПоштучно) Тогда 
				Возврат;
			КонецЕсли;
				
		КонецЕсли;
		
		ТаблицаНоменклатурыСегмента = СегментыСервер.ТаблицаЗначений(СегментТоваровПринимаемыхПоштучно);
		ТаблицаНоменклатурыСегмента.Свернуть("ЭлементСписка");	
		ТаблицаТоваровИзСегментаПринимаемыхШтучно.Загрузить(ТаблицаНоменклатурыСегмента);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецПроцедуры	
	
	&НаСервере
	Функция ПолучитьОписаниеТиповНаСервере(КакоеТоЗначение) Экспорт
		МассивТипов = Новый Массив;
		ТипЗнач = ТипЗнч(КакоеТоЗначение);
		Если строка(ТипЗнач) = "Строка" Тогда
			КС = Новый КвалификаторыСтроки(100);
			МассивТипов.Добавить(ТипЗнач);
			ОписаниеТипов1 = Новый ОписаниеТипов(МассивТипов, , , , КС);
		Иначе
			МассивТипов.Добавить(ТипЗнач);
			ОписаниеТипов1 = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		Возврат ОписаниеТипов1;
	КонецФункции

	&НаСервере
	Функция ПолучитьУпаковочныйЛист(Код)

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	УпаковочныйЛист.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.УпаковочныйЛист КАК УпаковочныйЛист
			|ГДЕ
			|	УпаковочныйЛист.Код = &Код";
		Запрос.УстановитьПараметр("Код", Код);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка
		Иначе
			Возврат Неопределено;
		КонецЕсли;

	КонецФункции

	//Перезаполнение списокв УЛ по регистру в случае прерывания работы
	&НаСервере
	Процедура ЗаполнитьСпискиУЛВозврата()
		Если НЕ ЗначениеЗаполнено(СписокУпаковочныхЛистовИзлишков)
				ИЛИ НЕ ЗначениеЗаполнено(СписокУпаковочныхЛистовНепринятогоТовара) Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак
				|ПОМЕСТИТЬ втКАБС_ПредварительныеСтрокиПеремещение
				|ИЗ
				|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
				|	И КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель = &СкладПолучатель
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	втКАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист
				|ИЗ
				|	втКАБС_ПредварительныеСтрокиПеремещение КАК втКАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	втКАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист
				|ИЗ
				|	втКАБС_ПредварительныеСтрокиПеремещение КАК втКАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	НЕ втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак";

			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.УстановитьПараметр("СкладПолучатель", СкладДляВозвратаБракаИИзлишков);
			Результат = Запрос.ВыполнитьПакет();
			ТЗСписокУЛБрак = Результат[Результат.Количество() - 2].Выгрузить();
			ТЗСписокУЛИзлишки = Результат[Результат.Количество() - 1].Выгрузить();

			Если НЕ ЗначениеЗаполнено(СписокУпаковочныхЛистовИзлишков)
					И ТЗСписокУЛИзлишки.Количество() > 0 Тогда
				СписокУпаковочныхЛистовИзлишков.ЗагрузитьЗначения(ТЗСписокУЛИзлишки.ВыгрузитьКолонку("УпаковочныйЛист"));
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СписокУпаковочныхЛистовНепринятогоТовара)
					И ТЗСписокУЛБрак.Количество() > 0 Тогда
				СписокУпаковочныхЛистовНепринятогоТовара.ЗагрузитьЗначения(ТЗСписокУЛБрак.ВыгрузитьКолонку("УпаковочныйЛист"));
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры

	&НаСервере
	Функция ПолучитьПользователяПоШтрихкоду(Штрихкод)

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИдентификационныеДанныеПользователей.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.ИдентификационныеДанныеПользователей КАК ИдентификационныеДанныеПользователей
			|ГДЕ
			|	ИдентификационныеДанныеПользователей.Штрихкод = &Штрихкод");

		Запрос.УстановитьПараметр("Штрихкод", Штрихкод);

		Результат = Запрос.Выполнить();
		
		УстановитьПривилегированныйРежим(Ложь);

		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Пользователь;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

	КонецФункции

	&НаСервере
	Функция ВсеУЛПринятыВодителем()
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Период КАК Период,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОснование КАК ДокументОснование,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОтгрузки КАК ДокументОтгрузки,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументПриемки КАК ДокументПриемки,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Этап КАК Этап,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Состояние КАК Состояние,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.РабочееМесто КАК РабочееМесто,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Пользователь КАК Пользователь,
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Склад КАК Склад
			|ИЗ
			|	РегистрСведений.КАБС_КонтрольРабочегоВремени.СрезПоследних КАК КАБС_КонтрольРабочегоВремениСрезПоследних
			|ГДЕ
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.Этап = &Этап
			|	И КАБС_КонтрольРабочегоВремениСрезПоследних.Состояние = &Состояние
			|	И КАБС_КонтрольРабочегоВремениСрезПоследних.РабочееМесто = &РабочееМесто
			|	И КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОтгрузки = &ДокументОтгрузки";

		Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
		Запрос.УстановитьПараметр("Этап", Перечисления.КАБС_ЭтапыБизнесПроцессов.Транспортировка);
		Запрос.УстановитьПараметр("Состояние", Перечисления.КАБС_СостояниеДокументов.КВыполнению);
		Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
		Результат = Запрос.Выполнить();

		Возврат Результат.Пустой();

	КонецФункции

	&НаСервере
	Функция ПолучитьТаблицуРасхожденияТоваров()

		Если НЕ ЗначениеЗаполнено(ДокументОтгрузки) Тогда
			Возврат Неопределено;
		КонецЕсли;

		Запрос = Новый Запрос;
		//tror20181007 добавление возможности приходовать товар, которого нет в перемещении
		Если ПараметрРазрешитьПриходоватьОтсутствующийВПеремещенииТовар Тогда
			Запрос.Текст = "ВЫБРАТЬ
				|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
				|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
				|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
				|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
				|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
				|	ПеремещениеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
				|	ПеремещениеТоваровТовары.Количество КАК Количество,
				|	ПеремещениеТоваровТовары.КодСтроки КАК КодСтроки,
				|	ПеремещениеТоваровТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	ПеремещениеТоваровТовары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
				|	ПеремещениеТоваровТовары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
				|	ПеремещениеТоваровТовары.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
				|	ПеремещениеТоваровТовары.Сделка КАК Сделка,
				|	ПеремещениеТоваровТовары.Назначение КАК Назначение,
				|	ПеремещениеТоваровТовары.НазначениеОтправителя КАК НазначениеОтправителя,
				|	ПеремещениеТоваровТовары.Серия КАК Серия,
				|	ПеремещениеТоваровТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
				|	ПеремещениеТоваровТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
				|	ПеремещениеТоваровТовары.Цена КАК Цена,
				|	ПеремещениеТоваровТовары.Сумма КАК Сумма,
				|	ПеремещениеТоваровТовары.ВидЦены КАК ВидЦены,
				|	ПеремещениеТоваровТовары.УпаковочныйЛист КАК УпаковочныйЛист,
				|	ПеремещениеТоваровТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	ПеремещениеТоваровТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист
				|ПОМЕСТИТЬ втТоварыДокументаОтгрузки
				|ИЗ
				|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
				|ГДЕ
				|	ПеремещениеТоваровТовары.Ссылка = &ДокументОтгрузки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Номенклатура КАК Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Характеристика КАК Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Упаковка КАК Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.КодСтроки КАК КодСтроки,
				|	СУММА(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.КоличествоУпаковок) КАК КоличествоУпаковок,
				|	СУММА(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Количество) КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель
				|ПОМЕСТИТЬ втПредварительныеСтрокиПеремещения
				|ИЗ
				|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки = &ДокументОтгрузки
				|	И КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.РабочееМесто = &РабочееМесто
				|	И КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Пользователь = &Пользователь
				|	И
				|		(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
				|	ИЛИ КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки = &ДокументОтгрузки)
				|СГРУППИРОВАТЬ ПО
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛистРодитель,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.КодСтроки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&ДокументОтгрузки КАК ДокументОснование,
				|	&Заказ КАК Заказ,
				|	ИСТИНА КАК ЗаполненоПоОснованию,
				|	ЕСТЬNULL(втТоварыДокументаОтгрузки.Номенклатура, КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Номенклатура) КАК
				|		Номенклатура,
				|	ЕСТЬNULL(втТоварыДокументаОтгрузки.Характеристика,
				|		КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Характеристика) КАК Характеристика,
				|	ЕСТЬNULL(втТоварыДокументаОтгрузки.Упаковка, КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Упаковка) КАК
				|		Упаковка,
				|	ЕСТЬNULL(втТоварыДокументаОтгрузки.УпаковочныйЛист,
				|		КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист) КАК УпаковочныйЛистПоДокументу,
				|	ЕСТЬNULL(втТоварыДокументаОтгрузки.УпаковочныйЛистРодитель,
				|		КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛистРодитель) КАК УпаковочныйЛистРодительПоДокументу,
				|	ЕСТЬNULL(втТоварыДокументаОтгрузки.Количество, 0) КАК КоличествоПоДокументу,
				|	ЕСТЬNULL(втТоварыДокументаОтгрузки.КоличествоУпаковок, 0) КАК КоличествоУпаковокПоДокументу,
				|	втТоварыДокументаОтгрузки.КодСтроки КАК КодСтроки,
				|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
				|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Количество, 0) КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Количество, 0) -
				|			ЕСТЬNULL(втТоварыДокументаОтгрузки.Количество, 0) > 0
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется)
				|	КОНЕЦ КАК Действие
				|ИЗ
				|	втТоварыДокументаОтгрузки КАК втТоварыДокументаОтгрузки
				|		ПОЛНОЕ СОЕДИНЕНИЕ втПредварительныеСтрокиПеремещения КАК КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних
				|		ПО втТоварыДокументаОтгрузки.Номенклатура = КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Номенклатура
				|		И втТоварыДокументаОтгрузки.Характеристика = КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Характеристика
				|		И втТоварыДокументаОтгрузки.Упаковка = КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Упаковка
				|		И втТоварыДокументаОтгрузки.УпаковочныйЛист = КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист
				|		И втТоварыДокументаОтгрузки.КодСтроки = КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.КодСтроки
				|ГДЕ
				|	НЕ ЕСТЬNULL(втТоварыДокументаОтгрузки.Количество,
				|		0) = ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Количество, 0)";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
				|	ПеремещениеТоваровТовары.Ссылка КАК Ссылка,
				|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
				|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
				|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
				|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
				|	ПеремещениеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
				|	ПеремещениеТоваровТовары.Количество КАК Количество,
				|	ПеремещениеТоваровТовары.КодСтроки КАК КодСтроки,
				|	ПеремещениеТоваровТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	ПеремещениеТоваровТовары.СтатусУказанияСерийОтправитель КАК СтатусУказанияСерийОтправитель,
				|	ПеремещениеТоваровТовары.СтатусУказанияСерийПолучатель КАК СтатусУказанияСерийПолучатель,
				|	ПеремещениеТоваровТовары.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
				|	ПеремещениеТоваровТовары.Сделка КАК Сделка,
				|	ПеремещениеТоваровТовары.Назначение КАК Назначение,
				|	ПеремещениеТоваровТовары.НазначениеОтправителя КАК НазначениеОтправителя,
				|	ПеремещениеТоваровТовары.Серия КАК Серия,
				|	ПеремещениеТоваровТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
				|	ПеремещениеТоваровТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
				|	ПеремещениеТоваровТовары.Цена КАК Цена,
				|	ПеремещениеТоваровТовары.Сумма КАК Сумма,
				|	ПеремещениеТоваровТовары.ВидЦены КАК ВидЦены,
				|	ПеремещениеТоваровТовары.УпаковочныйЛист КАК УпаковочныйЛист,
				|	ПеремещениеТоваровТовары.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	ПеремещениеТоваровТовары.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист
				|ПОМЕСТИТЬ втТоварыДокументаОтгрузки
				|ИЗ
				|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
				|ГДЕ
				|	ПеремещениеТоваровТовары.Ссылка = &ДокументОтгрузки
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Номенклатура КАК Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Характеристика КАК Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Упаковка КАК Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.КодСтроки КАК КодСтроки,
				|	СУММА(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.КоличествоУпаковок) КАК КоличествоУпаковок,
				|	СУММА(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Количество) КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель
				|ПОМЕСТИТЬ втПредварительныеСтрокиПеремещения
				|ИЗ
				|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки = &ДокументОтгрузки
				|	И КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.РабочееМесто = &РабочееМесто
				|	И КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Пользователь = &Пользователь
				|	И
				|		(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки = Значение(Документ.ПеремещениеТоваров.ПустаяСсылка)
				|	ИЛИ КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки = &ДокументОтгрузки)
				|СГРУППИРОВАТЬ ПО
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛистРодитель,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.КодСтроки
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&ДокументОтгрузки КАК ДокументОснование,
				|	&Заказ КАК Заказ,
				|	Истина КАК ЗаполненоПоОснованию,
				|	втТоварыДокументаОтгрузки.Номенклатура КАК Номенклатура,
				|	втТоварыДокументаОтгрузки.Характеристика КАК Характеристика,
				|	втТоварыДокументаОтгрузки.Упаковка КАК Упаковка,
				|	втТоварыДокументаОтгрузки.УпаковочныйЛист КАК УпаковочныйЛистПоДокументу,
				|	втТоварыДокументаОтгрузки.УпаковочныйЛист КАК УпаковочныйЛистРодительПоДокументу,
				|	втТоварыДокументаОтгрузки.Количество КАК КоличествоПоДокументу,
				|	втТоварыДокументаОтгрузки.КоличествоУпаковок КАК КоличествоУпаковокПоДокументу,
				|	втТоварыДокументаОтгрузки.КодСтроки КАК КодСтроки,
				|	ЕстьNULL(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.КоличествоУпаковок,0) КАК КоличествоУпаковок,
				|	ЕстьNULL(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Количество,0) КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	Выбор Когда ЕстьNULL(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Количество,0) - ЕстьNULL(втТоварыДокументаОтгрузки.Количество,0) > 0 Тогда
				|		Значение(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного)
				|	Иначе
				|		Значение(Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется)
				|	Конец КАК Действие
				|ИЗ
				|	втТоварыДокументаОтгрузки КАК втТоварыДокументаОтгрузки
				|		ЛЕВОЕ СОЕДИНЕНИЕ втПредварительныеСтрокиПеремещения КАК КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних
				|		ПО втТоварыДокументаОтгрузки.Номенклатура = КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Номенклатура
				|		И втТоварыДокументаОтгрузки.Характеристика = КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Характеристика
				|		И втТоварыДокументаОтгрузки.Упаковка = КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Упаковка
				|		И втТоварыДокументаОтгрузки.УпаковочныйЛист = КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.УпаковочныйЛист
				|ГДЕ
				|	НЕ втТоварыДокументаОтгрузки.Количество = ЕстьNULL(КАБС_ПредварительныеСтрокиПеремещениеСрезПоследних.Количество,0)";
		КонецЕсли;

		Запрос.УстановитьПараметр("Заказ", ДокументОснование);
		Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
		Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПриемщик);

		Возврат Запрос.Выполнить().Выгрузить();

	КонецФункции
	
	&НаСервере
	Функция ПолучитьСписокРолейИзСтрокиСИменами(ИменаРолей)
		
		СписокРолей = Новый СписокЗначений;
		МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРолей,","); 
		
		Для Каждого ИмяРоли Из МассивИмен Цикл
			НайденнаяРоль = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию(ИмяРоли + " (Роль)");
			Если НайденнаяРоль <> Неопределено И ЗначениеЗаполнено(НайденнаяРоль) Тогда
				СписокРолей.Добавить(НайденнаяРоль);				
			КонецЕсли;	
		КонецЦикла;	
		
		Возврат СписокРолей;
		
	КонецФункции
	
	&НаСервере
	Функция РолиДоступны(ИменаРолей, Пользователь,  ПривилегированныйРежим = Ложь)
		
		//Возврат Пользователи.РолиДоступны(ИменаРолей, Пользователь,  ПривилегированныйРежим);
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ГруппыПользователейСостав.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ втГруппыПользователя
		               |ИЗ
		               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		               |ГДЕ
		               |	ГруппыПользователейСостав.Пользователь = &Пользователь
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ГруппыДоступаПользователи.Ссылка КАК Ссылка,
		               |	ГруппыДоступаПользователи.Пользователь КАК Пользователь,
		               |	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль,
		               |	ПрофилиГруппДоступаРоли.Роль КАК Роль
		               |ИЗ
		               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		               |		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		               |ГДЕ
		               |	(ГруппыДоступаПользователи.Пользователь = &Пользователь
		               |			ИЛИ ГруппыДоступаПользователи.Пользователь В
		               |				(ВЫБРАТЬ
		               |					втГруппыПользователя.Ссылка
		               |				ИЗ
		               |					втГруппыПользователя))
		               |	И ПрофилиГруппДоступаРоли.Роль В(&СписокРолей)";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		СписокРолей = ПолучитьСписокРолейИзСтрокиСИменами(ИменаРолей); 
		Запрос.УстановитьПараметр("СписокРолей", СписокРолей);
		Результат = Запрос.Выполнить();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
		
	КонецФункции

	&НаСервере
	Функция МассивУпаковочныхЛистовПоПеремещению(ДокументПеремещениеСсылка)

		ТЗУпаковочныеЛистыПеремещения = ДокументПеремещениеСсылка.Товары.Выгрузить(, "УпаковочныйЛист");
		ТЗУпаковочныеЛистыПеремещения.Свернуть("УпаковочныйЛист");

		Возврат ТЗУпаковочныеЛистыПеремещения.ВыгрузитьКолонку("УпаковочныйЛист");

	КонецФункции

	&НаСервере
	Функция ПолучитьПараметрСеансаНаСервере(НаименованиеПараметра)
		Возврат ПараметрыСеанса[НаименованиеПараметра];
	КонецФункции
	
#КонецОбласти

#Область ЗаписьДанных

	#Область СозданиеДокументов
	
		&НаСервере
		Функция НайтиИлиСоздатьАктОрасхождениях()
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	АктОРасхожденияхПослеПеремещенияТовары.Ссылка КАК Ссылка,
			|	АктОРасхожденияхПослеПеремещенияТовары.ДокументОснование КАК ДокументОснование,
			|	АктОРасхожденияхПослеПеремещенияТовары.Заказ КАК Заказ
			|ИЗ
			|	Документ.АктОРасхожденияхПослеПеремещения.Товары КАК АктОРасхожденияхПослеПеремещенияТовары
			|ГДЕ
			|	АктОРасхожденияхПослеПеремещенияТовары.ДокументОснование = &ДокументОтгрузки
			|	И
			|	НЕ АктОРасхожденияхПослеПеремещенияТовары.Ссылка.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ДокументОтгрузки",ДокументОтгрузки);
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				ТЗАкты = Результат.Выгрузить();
				ПервыйАкт = ТЗАкты[0].Ссылка; 
				Возврат ПервыйАкт.ПолучитьОбъект();
			КонецЕсли;
			
			Возврат Документы.АктОРасхожденияхПослеПеремещения.СоздатьДокумент();
			
		КонецФункции	
		
		&НаСервере
		Функция СформироватьАктОРасхождениях(Отказ)

			ТоварыДляДокумента = ПолучитьТаблицуРасхожденияТоваров();
			Если Не (ТипЗнч(ТоварыДляДокумента) = Тип("ТаблицаЗначений") И ТоварыДляДокумента.Количество()  > 0)  Тогда
				Возврат Неопределено;
			КонецЕсли;
				 
			ДокументОбъект = НайтиИлиСоздатьАктОрасхождениях();
			ЗаполнитьАктОРасхожденияхНаОсновании(ДокументОбъект, ДокументОтгрузки);

			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Товары.Загрузить(ТоварыДляДокумента);
			ДокументОбъект.Статус = Перечисления.СтатусыАктаОРасхождениях.НеСогласовано;
			ДокументОбъект.Комментарий = "#АРМ приемки: Создан при приемке товаров на т.т.";
			
			//Запись текущего приемщика в допреквизит Акта
			СвойствоПриемщик = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Приемщик (Акт о расхождениях после перемещения)");
			Если СвойствоПриемщик <> Неопределено Тогда
				НайденныеСтрокиДопРекизитов = ДокументОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", СвойствоПриемщик));
				Если НайденныеСтрокиДопРекизитов.Количество() > 0 Тогда
					СтрокаДопРеквизитовСПриемщиком = НайденныеСтрокиДопРекизитов[0];
					СтрокаДопРеквизитовСПриемщиком.Значение = ТекущийПриемщик;
				Иначе
					НоваяСтрокаДопРеквизитовДокумента = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
					НоваяСтрокаДопРеквизитовДокумента.Свойство = СвойствоПриемщик;
					НоваяСтрокаДопРеквизитовДокумента.Значение = ТекущийПриемщик;	
				КонецЕсли;	
			КонецЕсли;	
			//Запись текущего приемщика в допреквизит Акта>

			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				ДокументАктОРасхождениях = ДокументОбъект.Ссылка;
			Исключение
				Отказ = Истина;
			КонецПопытки;

			Возврат ДокументОбъект.Ссылка;

		КонецФункции

		&НаСервере
		Процедура ЗаполнитьАктОРасхожденияхНаОсновании(ДокументОбъект, Основание)

			Запрос = Новый Запрос;

			Запрос.Текст = Документы.АктОРасхожденияхПослеПеремещения.ТекстЗапросаПоОснованиюПеремещения();

			Запрос.УстановитьПараметр("Основания", Основание);
			РезультатЗапроса = Запрос.ВыполнитьПакет();

			РеквизитыОснования = РезультатЗапроса[0].Выбрать();
			РеквизитыОснования.Следующий();

			МассивДопустимыхСтатусов = Новый Массив;
			МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыПеремещенийТоваров.Отгружено);
			МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыПеремещенийТоваров.Принято);

			ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(РеквизитыОснования.ДокументОснование, РеквизитыОснования.СтатусДокумента, РеквизитыОснования.ЕстьОшибкиПроведен, РеквизитыОснования.ЕстьОшибкиСтатус, МассивДопустимыхСтатусов);

			// Заполнение шапки
			ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыОснования);
			
		КонецПроцедуры

		&НаСервере
		Функция СформироватьПеремещениеНаСкладВозвратов(Отказ)
			
			Если НЕ ФормироватьПеремещениеВозврат Тогда
				Возврат Неопределено; 
			КонецЕсли;
				
			Период = ТекущаяДатаСеанса();

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
				|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
				|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
				|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
				|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
				|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
				|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
				|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
				|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
				|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
				|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
				|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
				|ИЗ
				|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
				|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
				|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
				|	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
				|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ Различные
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки
				|ИЗ
				|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
				|	И КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель = &СкладПолучатель
				|	И КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель = &СкладОтправитель
				|	И НЕ КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
				|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
				|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
				|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
				|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
				|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
				|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
				|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
				|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
				|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
				|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
				|ИЗ
				|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
				|	И КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель = &СкладОтправитель
				|	И КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель = &СкладПолучатель
				|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)";

			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
			Запрос.УстановитьПараметр("Пользователь", ТекущийПриемщик);
			Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
			Запрос.УстановитьПараметр("СкладОтправитель", НастройкиРМК.СкладПолучатель);
			Запрос.УстановитьПараметр("СкладПолучатель", СкладДляВозвратаБракаИИзлишков);

			Результат = Запрос.ВыполнитьПакет();

			Если Результат[0].Пустой() Тогда
				Если НЕ Результат[Результат.Количество() - 1].Пустой() Тогда
					
					ДокументПеремещениеВозврат = СоздатьДокументПеремещения(ДокументПеремещениеВозврат, Результат[Результат.Количество()
						- 1].Выгрузить(), Период, СкладДляВозвратаБракаИИзлишков, "Излишек", Отказ);
						
				ИначеЕсли НЕ Результат[Результат.Количество() - 2].Пустой() Тогда
					
					ДокументПеремещениеВозврат = Результат[Результат.Количество() - 2].Выгрузить()[0].ДокументОтгрузки;
						
				КонецЕсли;
			Иначе
				Сообщить("Существуют неупакованные товары к возврату! Необходимо их упаковать для продолжения.");
				Отказ = Истина;
			КонецЕсли;

			Возврат ДокументПеремещениеВозврат;

		КонецФункции

		// Формирует ПеремещениеТоваров на склад возвратов и возвращает ссылку
		//
		// Параметры:
		// Ссылка           - Документ.ПеремещениеТоваров.Ссылка Ссылка на документ, если не пустая, новый документ не создается, а заполняется переданный в ссылке.	
		// ТаблицаТоваров	- ТаблицаЗначений таблица для заполнения табличной части документа.
		// Период 			- Дата Дата создаваемого документа.
		// СкладПолучатель  - СправочникСсылка.Склады 
		// ДополнениеКомментария  - Строка 
		// Отказ			- Булево - признак успешного выполнения 
		//
		&НаСервере
		Функция СоздатьДокументПеремещения(Ссылка, ТаблицаТоваров, Период,
				СкладПолучатель, ДополнениеКомментария = "", Отказ = Ложь)
				
			УстановитьПривилегированныйРежим(Истина);	
			
			ТоварыДляДокумента = ТаблицаТоваров.Скопировать(, "Номенклатура, Характеристика, Упаковка, УпаковочныйЛист, УпаковочныйЛистРодитель, КоличествоУпаковок, Количество, Цена, Сумма");
			ТоварыДляДокумента.Свернуть("Номенклатура, Характеристика, Упаковка, УпаковочныйЛист, УпаковочныйЛистРодитель, Цена", "КоличествоУпаковок, Количество, Сумма");

			Если ЗначениеЗаполнено(Ссылка) Тогда
				ДокументОбъект = Ссылка.ПолучитьОбъект();
			Иначе
				ДокументОбъект = Документы.ПеремещениеТоваров.СоздатьДокумент();
			КонецЕсли;

			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(ДокументОснование);
			ПараметрыОткрытия = ВводНаОснованииУТВызовСервера.ПеремещениеТоваровПараметрыОткрытияФормы(МассивЗаказов);
			ДокументОбъект.Заполнить(ПараметрыОткрытия.Основание);
			ДокументОбъект.ЗаказНаПеремещение = ДокументОснование;
			ДокументОбъект.СкладОтправитель = ДокументОтгрузки.СкладПолучатель;
			ДокументОбъект.СкладПолучатель = СкладПолучатель;
			ДокументОбъект.Дата = Период;
			ДокументОбъект.Товары.Загрузить(ТоварыДляДокумента);
			ДокументОбъект.Комментарий = "#АРМ приемки: Создан при приемке товаров на т.т."
				+ ДополнениеКомментария;

			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				Отказ = Истина;
				Возврат Неопределено;
			КонецПопытки;

			Для Каждого Строка ИЗ ТаблицаТоваров Цикл

				МенеджерЗаписи = РегистрыСведений.КАБС_ПредварительныеСтрокиПеремещение.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.ДокументОтгрузки = ДокументОбъект.Ссылка;
					МенеджерЗаписи.Записать(Истина);
				КонецЕсли;

			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Возврат ДокументОбъект.Ссылка;
			
		КонецФункции

		&НаСервере
		Процедура СоздатьДокументПриемки(ТаблицаЗначений, Период, Отказ = Ложь)
			
			УстановитьПривилегированныйРежим(Истина);
			
			//tror20181007
			//ТоварыДляДокумента = ТаблицаЗначений.Скопировать(, "ДокументОтгрузки, Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, Количество, Цена, Сумма");
			ТоварыДляДокумента = ТаблицаЗначений.Скопировать(, "ДокументОтгрузки, Номенклатура, Характеристика, Упаковка, УпаковочныйЛист, УпаковочныйЛистРодитель, КоличествоУпаковок, Количество, Цена, Сумма");
			//tror20181007>
			
			//ТоварыДляДокумента.Свернуть("ДокументОтгрузки, Номенклатура, Характеристика, Упаковка, Цена,УпаковочныйЛист, УпаковочныйЛистРодитель", "КоличествоУпаковок, Количество, Сумма");
			ТоварыДляДокумента.Свернуть("ДокументОтгрузки, Номенклатура, Характеристика, Упаковка, Цена", "КоличествоУпаковок, Количество, Сумма"); //tror20181012

			ДокументОбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();

			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(ДокументОтгрузки);

			ДокументОбъект.Распоряжение = ДокументОснование;
			ДокументОбъект.Склад = ДокументОтгрузки.СкладПолучатель;
			ДокументОбъект.Дата = Период;
			ДокументОбъект.Комментарий = "#АРМ Приемки: Создан при приемке товаров пользователем";
			ДокументОбъект.Товары.Загрузить(ТоварыДляДокумента);
			
			ДокументОбъект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
			ДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			ДокументОбъект.Ответственный = ТекущийПриемщик;

			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				ДокументПриемки = ДокументОбъект.Ссылка;
			Исключение
				Отказ = Истина;
			КонецПопытки;

			Если Не Отказ Тогда
				Для Каждого Строка ИЗ ТаблицаЗначений Цикл

					МенеджерЗаписи = РегистрыСведений.КАБС_ПредварительныеСтрокиПеремещение.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
					МенеджерЗаписи.Прочитать();
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.ДокументПриемки = ДокументОбъект.Ссылка;
						МенеджерЗаписи.Записать(Истина);
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецПроцедуры

		&НаСервере
		Функция СоздатьУпаковочныйЛист(ТаблицаЗначений, Период, Отказ = Ложь);
			
			УстановитьПривилегированныйРежим(Истина);
			
			ТоварыДляДокумента = ТаблицаЗначений.Скопировать(, "Номенклатура, Характеристика, Упаковка, УпаковочныйЛист, КоличествоУпаковок, Количество");
			ТоварыДляДокумента.Свернуть("Номенклатура, Характеристика, Упаковка, УпаковочныйЛист", "КоличествоУпаковок, Количество");

			УпаковочныйЛистОбъект = Документы.УпаковочныйЛист.СоздатьДокумент();
			УпаковочныйЛистОбъект.Дата = Период;
			УпаковочныйЛистОбъект.Вид = Перечисления.ВидыУпаковочныхЛистов.Исходящий;
			УпаковочныйЛистОбъект.Товары.Загрузить(ТоварыДляДокумента);
			УпаковочныйЛистОбъект.Комментарий = "#АРМ Приемки: Создан при приемке на т.т.";

			УпаковочныйЛистОбъектСсылка = Неопределено;

			Попытка

				УпаковочныйЛистОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				УпаковочныйЛистОбъектСсылка = УпаковочныйЛистОбъект.Ссылка;

				Для Каждого Строка ИЗ ТаблицаЗначений Цикл

					МенеджерЗаписи = РегистрыСведений.КАБС_ПредварительныеСтрокиПеремещение.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
					МенеджерЗаписи.Прочитать();
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.УпаковочныйЛист = УпаковочныйЛистОбъектСсылка;
						МенеджерЗаписи.Записать(Истина);
					КонецЕсли;

				КонецЦикла;

			Исключение

				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ошибка при попытке создания упаковочного листа";
				Сообщение.Сообщить();

			КонецПопытки;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Возврат УпаковочныйЛистОбъектСсылка;

		КонецФункции
		
//		Функция СформироватьРасходныйОрдерНаТовары(ДокументПеремещениеСсылка, ДатаСоздаваемогоДокумента = Неопределено, Отказ = Ложь)
//			
//			Если Не ЗначениеЗаполнено(ДокументПеремещениеСсылка) Тогда
//				Возврат Неопределено;
//			КонецЕсли;
//				
//			УстановитьПривилегированныйРежим(Истина);
//			
//			ДокументОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
//
//			МассивЗаказов = Новый Массив;
//			МассивЗаказов.Добавить(ДокументПеремещениеСсылка);
//
//			ДокументОбъект.Склад = ДокументПеремещениеСсылка.СкладОтправитель;
//			Если ЗначениеЗаполнено(ДатаСоздаваемогоДокумента) Тогда
//				ДокументОбъект.Дата = ДатаСоздаваемогоДокумента;
//			Иначе
//				ДокументОбъект.Дата = ТекущаяДатаСеанса();
//			КонецЕсли;
//					
//			ДокументОбъект.Комментарий = "#АРМ Приемки: Создан при приемке товаров пользователем";
//			
//			ДокументОбъект.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
//			ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
//			ДокументОбъект.Заполнить(ДокументПеремещениеСсылка);
//
//			Попытка
//				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
//				Возврат ДокументОбъект.Ссылка;
//			Исключение
//				Отказ = Истина;
//			КонецПопытки;
//			
//			УстановитьПривилегированныйРежим(Ложь);
//			
//			Возврат Неопределено;
//				
//		КонецФункции	
		
	#КонецОбласти

	#Область ЗавершениеЭтапов

		&НаСервере
		Процедура ЗавершитьПодЭтапПриемкаКоробов(Отказ,
				СтруктураВозврата = Неопределено) // ПереходККонтролю
				
			УстановитьПривилегированныйРежим(Истина);	
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = "ВЫБРАТЬ
				|	ДокументПеремещениеТОваров.СкладОтправитель КАК Склад
				|ПОМЕСТИТЬ втСкладыДокументаОтгрузки
				|ИЗ
				|	Документ.ПеремещениеТоваров КАК ДокументПеремещениеТОваров
				|ГДЕ
				|	ДокументПеремещениеТОваров.Ссылка = &ДокументОтгрузки
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ПеремещениеТоваров.СкладПолучатель
				|ИЗ
				|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
				|ГДЕ
				|	ПеремещениеТоваров.Ссылка = &ДокументОтгрузки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Период КАК Период,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОснование КАК ДокументОснование,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументПриемки КАК ДокументПриемки,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Этап КАК Этап,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Состояние КАК Состояние,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.РабочееМесто КАК РабочееМесто,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Пользователь КАК Пользователь,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Склад КАК Склад
				|ПОМЕСТИТЬ втСостояниеДокументов
				|ИЗ
				|	РегистрСведений.КАБС_КонтрольРабочегоВремени.СрезПоследних(
				|			,
				|			ДокументОтгрузки = &ДокументОтгрузки
				|			И Пользователь = &ТекущийВодитель
				|				И Склад В
				|					(ВЫБРАТЬ
				|						втСкладыДокументаОтгрузки.Склад
				|					ИЗ
				|						втСкладыДокументаОтгрузки)) КАК КАБС_КонтрольРабочегоВремениСрезПоследних
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втСостояниеДокументов.Период КАК Период,
				|	втСостояниеДокументов.ДокументОснование КАК ДокументОснование,
				|	втСостояниеДокументов.ДокументОтгрузки КАК ДокументОтгрузки,
				|	втСостояниеДокументов.ДокументПриемки КАК ДокументПриемки,
				|	втСостояниеДокументов.УпаковочныйЛист КАК УпаковочныйЛист,
				|	втСостояниеДокументов.Этап КАК Этап,
				|	втСостояниеДокументов.Состояние КАК Состояние,
				|	втСостояниеДокументов.РабочееМесто КАК РабочееМесто,
				|	втСостояниеДокументов.Пользователь КАК Пользователь,
				|	втСостояниеДокументов.Склад КАК Склад
				|ПОМЕСТИТЬ втНепринятыеУпаковочныеЛисты
				|ИЗ
				|	втСостояниеДокументов КАК втСостояниеДокументов
				|ГДЕ
				|	втСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка)
				|	И НЕ втСостояниеДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Окончание)
				|	И НЕ втСостояниеДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.КВыполнению)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втНепринятыеУпаковочныеЛисты.УпаковочныйЛист КАК УпаковочныйЛист,
				|	УпаковочныйЛистТовары.Номенклатура КАК Номенклатура,
				|	УпаковочныйЛистТовары.Характеристика КАК Характеристика,
				|	УпаковочныйЛистТовары.Упаковка КАК Упаковка,
				|	ВЫБОР
				|		КОГДА УпаковочныйЛистТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|			ТОГДА 1
				|		ИНАЧЕ ВЫБОР
				|				КОГДА УпаковочныйЛистТовары.Упаковка.Числитель = 0
				|					ТОГДА 1
				|				ИНАЧЕ УпаковочныйЛистТовары.Упаковка.Числитель
				|			КОНЕЦ
				|	КОНЕЦ КАК Коэффициент,
				|	УпаковочныйЛистТовары.КоличествоУпаковок КАК КоличествоУпаковок,
				|	УпаковочныйЛистТовары.Количество КАК Количество
				|ПОМЕСТИТЬ втТоварыНепринятыхУпаковочныхЛистов
				|ИЗ
				|	втНепринятыеУпаковочныеЛисты КАК втНепринятыеУпаковочныеЛисты
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УпаковочныйЛист.Товары КАК УпаковочныйЛистТовары
				|		ПО втНепринятыеУпаковочныеЛисты.УпаковочныйЛист = УпаковочныйЛистТовары.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втТоварыНепринятыхУпаковочныхЛистов.УпаковочныйЛист КАК УпаковочныйЛист,
				|	СУММА(втТоварыНепринятыхУпаковочныхЛистов.Количество * ЦеныНоменклатурыСрезПоследних.Цена) КАК Сумма
				|ИЗ
				|	втТоварыНепринятыхУпаковочныхЛистов КАК втТоварыНепринятыхУпаковочныхЛистов
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|				,
				|				ВидЦены = &ВидЦены
				|					И Номенклатура В
				|						(ВЫБРАТЬ
				|							втТоварыНепринятыхУпаковочныхЛистов.Номенклатура
				|						ИЗ
				|							втТоварыНепринятыхУпаковочныхЛистов)) КАК ЦеныНоменклатурыСрезПоследних
				|		ПО втТоварыНепринятыхУпаковочныхЛистов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
				|			И втТоварыНепринятыхУпаковочныхЛистов.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
				|			И (ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель, 1) = 1)
				|
				|СГРУППИРОВАТЬ ПО
				|	втТоварыНепринятыхУпаковочныхЛистов.УпаковочныйЛист
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&Период КАК Период,
				|	втСостояниеДокументов.Период КАК ПериодЗаписи,
				|	втСостояниеДокументов.ДокументОснование КАК ДокументОснование,
				|	втСостояниеДокументов.ДокументОтгрузки КАК ДокументОтгрузки,
				|	втСостояниеДокументов.ДокументПриемки КАК ДокументПриемки,
				|	втСостояниеДокументов.УпаковочныйЛист КАК УпаковочныйЛист,
				|	втСостояниеДокументов.Этап КАК Этап,
				|	втСостояниеДокументов.Состояние КАК Состояние,
				|	втСостояниеДокументов.РабочееМесто КАК РабочееМесто,
				|	втСостояниеДокументов.Пользователь КАК Пользователь,
				|	втСостояниеДокументов.Склад КАК Склад
				|ИЗ
				|	втСостояниеДокументов КАК втСостояниеДокументов
				|ГДЕ
				|	втСостояниеДокументов.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Транспортировка)
				|	И втСостояниеДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Окончание)";

			Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
			Запрос.УстановитьПараметр("ВидЦены", ДокументОтгрузки.СкладПолучатель.УчетныйВидЦены);
			Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("ТекущийВодитель", ТекущийВодитель);

			Результат = Запрос.ВыполнитьПакет();

			Если Результат[Результат.Количество() - 2].Пустой() Тогда //нет непринятых у водителя коробов
				Выборка = Результат[Результат.Количество() - 1].Выбрать();

				Пока Выборка.Следующий() Цикл

					МЗ = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МЗ, Выборка);
					МЗ.Этап = ПЕречисления.КАБС_ЭтапыБизнесПроцессов.Приемка;
					МЗ.Состояние = ПЕречисления.КАБС_СостояниеДокументов.КВыполнению;
					МЗ.Пользователь = ТекущийПриемщик;
					МЗ.Записать(Ложь);

				КонецЦикла;

			Иначе

			//есть непринятые у водителя короба, возвращается структура с суммами товаров в ценах магазина по непринятым коробам
				СписокНепереданныхУЛ.Загрузить(Запрос.МенеджерВременныхТаблиц.Таблицы["втНепринятыеУпаковочныеЛисты"].ПолучитьДанные().Выгрузить());
				СтруктураВозврата.Вставить("СуммыНепринятыхУЛ", ПолучитьМассивСтруктурИзТЗ(Результат[Результат.Количество()
					- 2].Выгрузить()));
				Отказ = Истина;

			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		Конецпроцедуры

		&НаСервере
		Процедура ЗавершитьПриемкуУпаковочногоЛиста();
			
			УстановитьПривилегированныйРежим(Истина);
			
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();

			НоваяЗапись = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
			НоваяЗапись.ДокументОснование = ДокументОснование;
			НоваяЗапись.ДокументОтгрузки = ДокументОтгрузки;
			НоваяЗапись.УпаковочныйЛист = УпаковочныйЛист;
			НоваяЗапись.Период = ТекущаяДатаСеанса;
			НоваяЗапись.Пользователь = ТекущийПриемщик;
			НоваяЗапись.РабочееМесто = НастройкиРМК.РабочееМесто;
			НоваяЗапись.Склад = ДокументОтгрузки.СкладПолучатель;
			НоваяЗапись.Состояние = Перечисления.КАБС_СостояниеДокументов.Окончание;
			НоваяЗапись.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Приемка;
			НоваяЗапись.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецПроцедуры

		// Завершает прием заказа: формирует приходный ордер и 
		// делает запись в РС.КАБС_КонтрольРабочегоВремени о начале этапа "Возврат" по упаковочным листа, прошедшим контроль 
		//
		&НаСервере
		Процедура ЗавершитьПриемкуЗаказа(Отказ, СтруктураВозврата);
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Не ЗначениеЗаполнено(ДокументОтгрузки) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не выбран документ отгрузки для завершения приемки";
				Сообщение.Сообщить();
				Отказ = Истина;
				Возврат;
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Период КАК Период,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОснование КАК ДокументОснование,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументПриемки КАК ДокументПриемки,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Этап КАК Этап,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Состояние КАК Состояние,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.РабочееМесто КАК РабочееМесто,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Пользователь КАК Пользователь,
				|	КАБС_КонтрольРабочегоВремениСрезПоследних.Склад КАК Склад
				|ПОМЕСТИТЬ втСостояниеУпакочныхЛистовПоПеремещению
				|ИЗ
				|	РегистрСведений.КАБС_КонтрольРабочегоВремени.СрезПоследних(
				|			,
				|			ДокументОтгрузки = &ДокументОтгрузки
				|				И Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)) КАК КАБС_КонтрольРабочегоВремениСрезПоследних
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
				|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
				|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
				|	ВЫБОР
				|		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|			ТОГДА 1
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
				|					ТОГДА 1
				|				ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
				|			КОНЕЦ
				|	КОНЕЦ КАК Коэффициент,
				|	СУММА(ПеремещениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
				|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
				|ПОМЕСТИТЬ втСтрокиДокументаОтгузки
				|ИЗ
				|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
				|ГДЕ
				|	ПеремещениеТоваровТовары.Ссылка = &ДокументОтгрузки
				|	И ПеремещениеТоваровТовары.УпаковочныйЛист В
				|			(ВЫБРАТЬ
				|				втСостояниеУпакочныхЛистовПоПеремещению.УпаковочныйЛист
				|			ИЗ
				|				втСостояниеУпакочныхЛистовПоПеремещению)
				|
				|СГРУППИРОВАТЬ ПО
				|	ПеремещениеТоваровТовары.Номенклатура,
				|	ПеремещениеТоваровТовары.Характеристика,
				|	ПеремещениеТоваровТовары.Упаковка,
				|	ВЫБОР
				|		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|			ТОГДА 1
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
				|					ТОГДА 1
				|				ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
				|			КОНЕЦ
				|	КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
				|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
				|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
				|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
				|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
				|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
				|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
				|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
				|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
				|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
				|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки,
				|	ВЫБОР
				|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|			ТОГДА 1
				|		ИНАЧЕ ВЫБОР
				|				КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
				|					ТОГДА 1
				|				ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
				|			КОНЕЦ
				|	КОНЕЦ КАК Коэффициент
				|ПОМЕСТИТЬ втКАБС_ПредварительныеСтрокиПеремещение
				|ИЗ
				|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
				|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
				|	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
				|	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
				|	ВЫБОР
				|		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|			ТОГДА 1
				|		ИНАЧЕ ВЫБОР
				|				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
				|					ТОГДА 1
				|				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
				|			КОНЕЦ
				|	КОНЕЦ КАК Коэффициент,
				|	СУММА(ВЫБОР
				|			КОГДА НЕ втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак
				|				ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.Количество
				|		КОНЕЦ) КАК КоличествоПринято,
				|	СУММА(ВЫБОР
				|			КОГДА НЕ втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак
				|				ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок
				|		КОНЕЦ) КАК КоличествоУпаковокПринято,
				|	СУММА(ВЫБОР
				|			КОГДА втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак
				|				ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.Количество
				|		КОНЕЦ) КАК КоличествоБрак,
				|	СУММА(ВЫБОР
				|			КОГДА втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак
				|				ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок
				|		КОНЕЦ) КАК КоличествоУпаковокБрак
				|ПОМЕСТИТЬ втПринятоПоПеремещению
				|ИЗ
				|	втКАБС_ПредварительныеСтрокиПеремещение КАК втКАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	втКАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
				|	И втКАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
				|	И втКАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
				|
				|СГРУППИРОВАТЬ ПО
				|	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка,
				|	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
				|	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика,
				|	ВЫБОР
				|		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|			ТОГДА 1
				|		ИНАЧЕ ВЫБОР
				|				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
				|					ТОГДА 1
				|				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
				|			КОНЕЦ
				|	КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ Различные
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки
				|ИЗ
				|	втКАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
				|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
				|	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
				|	И НЕ КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки = ЗНАЧЕНИЕ(Документ.ПриходныйОрдерНаТовары.ПустаяСсылка)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втСтрокиДокументаОтгузки.Номенклатура КАК Номенклатура,
				|	втСтрокиДокументаОтгузки.Характеристика КАК Характеристика,
				|	втСтрокиДокументаОтгузки.Упаковка КАК Упаковка,
				|	втСтрокиДокументаОтгузки.Коэффициент КАК Коэффициент,
				|	втСтрокиДокументаОтгузки.Количество КАК КоличествоПлан,
				|	втСтрокиДокументаОтгузки.КоличествоУпаковок КАК КоличествоУпаковокПлан,
				|	втПринятоПоПеремещению.КоличествоПринято КАК КоличествоПринято,
				|	втПринятоПоПеремещению.КоличествоУпаковокПринято КАК КоличествоУпаковокПринято,
				|	втПринятоПоПеремещению.КоличествоБрак КАК КоличествоБрак,
				|	втПринятоПоПеремещению.КоличествоУпаковокБрак КАК КоличествоУпаковокБрак,
				|	втПринятоПоПеремещению.КоличествоПринято - втСтрокиДокументаОтгузки.Количество КАК КоличествоИзлишек,
				|	втПринятоПоПеремещению.КоличествоУпаковокПринято - втСтрокиДокументаОтгузки.КоличествоУпаковок КАК КоличествоУпаковокИзлишек
				|ИЗ
				|	втСтрокиДокументаОтгузки КАК втСтрокиДокументаОтгузки
				|		ЛЕВОЕ СОЕДИНЕНИЕ втПринятоПоПеремещению КАК втПринятоПоПеремещению
				|		ПО втСтрокиДокументаОтгузки.Номенклатура = втПринятоПоПеремещению.Номенклатура
				|			И втСтрокиДокументаОтгузки.Характеристика = втПринятоПоПеремещению.Характеристика
				|			И втСтрокиДокументаОтгузки.Упаковка = втПринятоПоПеремещению.Упаковка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втСостояниеУпакочныхЛистовПоПеремещению.Период КАК Период,
				|	втСостояниеУпакочныхЛистовПоПеремещению.ДокументОснование КАК ДокументОснование,
				|	втСостояниеУпакочныхЛистовПоПеремещению.ДокументОтгрузки КАК ДокументОтгрузки,
				|	втСостояниеУпакочныхЛистовПоПеремещению.ДокументПриемки КАК ДокументПриемки,
				|	втСостояниеУпакочныхЛистовПоПеремещению.УпаковочныйЛист КАК УпаковочныйЛист,
				|	втСостояниеУпакочныхЛистовПоПеремещению.Этап КАК Этап,
				|	втСостояниеУпакочныхЛистовПоПеремещению.Состояние КАК Состояние,
				|	втСостояниеУпакочныхЛистовПоПеремещению.РабочееМесто КАК РабочееМесто,
				|	втСостояниеУпакочныхЛистовПоПеремещению.Пользователь КАК Пользователь,
				|	втСостояниеУпакочныхЛистовПоПеремещению.Склад КАК Склад
				|ИЗ
				|	втСостояниеУпакочныхЛистовПоПеремещению КАК втСостояниеУпакочныхЛистовПоПеремещению
				|ГДЕ
				|	втСостояниеУпакочныхЛистовПоПеремещению.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Окончание)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втСостояниеУпакочныхЛистовПоПеремещению.Период КАК Период,
				|	втСостояниеУпакочныхЛистовПоПеремещению.ДокументОснование КАК ДокументОснование,
				|	втСостояниеУпакочныхЛистовПоПеремещению.ДокументОтгрузки КАК ДокументОтгрузки,
				|	втСостояниеУпакочныхЛистовПоПеремещению.ДокументПриемки КАК ДокументПриемки,
				|	втСостояниеУпакочныхЛистовПоПеремещению.УпаковочныйЛист КАК УпаковочныйЛист,
				|	втСостояниеУпакочныхЛистовПоПеремещению.Этап КАК Этап,
				|	втСостояниеУпакочныхЛистовПоПеремещению.Состояние КАК Состояние,
				|	втСостояниеУпакочныхЛистовПоПеремещению.РабочееМесто КАК РабочееМесто,
				|	втСостояниеУпакочныхЛистовПоПеремещению.Пользователь КАК Пользователь,
				|	втСостояниеУпакочныхЛистовПоПеремещению.Склад КАК Склад
				|ИЗ
				|	втСостояниеУпакочныхЛистовПоПеремещению КАК втСостояниеУпакочныхЛистовПоПеремещению
				|ГДЕ
				|	НЕ втСостояниеУпакочныхЛистовПоПеремещению.Состояние = ЗНАЧЕНИЕ(Перечисление.КАБС_СостояниеДокументов.Окончание)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
				|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
				|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
				|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
				|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
				|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
				|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
				|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
				|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
				|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
				|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
				|ИЗ
				|	втКАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
				|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
				|	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
				|	И НЕ КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
				|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
				|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки = ЗНАЧЕНИЕ(Документ.ПриходныйОрдерНаТовары.ПустаяСсылка)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
				|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
				|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
				|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
				|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
				|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
				|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
				|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
				|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
				|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
				|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
				|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
				|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
				|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
				|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
				|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
				|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
				|ИЗ
				|	втКАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
				|ГДЕ
				|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
				|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
				|	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
				|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки = ЗНАЧЕНИЕ(Документ.ПриходныйОрдерНаТовары.ПустаяСсылка)";

				//Запрос.УстановитьПараметр("Период",            ТекущаяДатаСеанса);
			Запрос.УстановитьПараметр("Пользователь", ТекущийПриемщик);
			Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
			Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

			Результат = Запрос.ВыполнитьПакет();
			Если НЕ Результат[Результат.Количество() - 2].Пустой()
				И ФормироватьПеремещениеВозврат Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Есть неупакованный к возврату непринятый товар. Упакуйте его, нажмите кнопку Упаковать и наклейте полученную этикетку на короб";
				Сообщение.Сообщить();
				Отказ = Истина;
				Возврат;
			КонецЕсли;

			Если Результат[Результат.Количество() - 3].Пустой() Тогда //Все УЛ по перемещению приняты и проконтролированы, можно закрывать и переходить в этапу Возврат
				
				Результат1 = Результат[Результат.Количество() - 1];

				//сформировать приходный ордер
				Отказ = Ложь;
				Если (Не Результат1.Пустой()) И ЗначениеЗаполнено(ДокументОтгрузки)
					ИЛИ НЕ Результат[Результат.Количество() - 6].Пустой() Тогда
						
					Если Не Результат1.Пустой() Тогда	
						СоздатьДокументПриемки(Результат1.Выгрузить(), ТекущаяДата(), Отказ);
					Иначе
						ДокументПриемки = Результат[Результат.Количество() - 6].Выгрузить()[0].ДокументПриемки;
					КонецЕсли;		

					Если Не Отказ И ЗначениеЗаполнено(ДокументПриемки) Тогда
						СформироватьАктОРасхождениях(Отказ);
					КонецЕсли;
						 
					//Запись окончания этапа приемки, подэтапа контроль, начала этапа возврат
					//ПроверенныеУЛ = Результат[Результат.Количество() - 4].Выгрузить();

					//МассивУпаковочныхЛистов = МассивУпаковочныхЛистовПоПеремещению(ДокументОтгрузки);
					ЕстьБрак = Результат[Результат.Количество() - 5].Выгрузить().Итог("КоличествоУпаковокБрак");
					ЕстьИзлишки = Результат[Результат.Количество() - 5].Выгрузить().Итог("КоличествоУпаковокИзлишек");
					СтруктураВозврата.Вставить("ЕстьИзлишки", ЕстьИзлишки);
					СтруктураВозврата.Вставить("ЕстьБрак", ЕстьБрак);

					Если Не Отказ Тогда

						Если (ЕстьИзлишки ИЛИ ЕстьБрак) 
							И ФормироватьПеремещениеВозврат Тогда

							//запись этапа Возврат/Начало
							НоваяЗапись = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
							НоваяЗапись.Период = ТекущаяДатаСеанса();
							НоваяЗапись.ДокументОснование = ДокументОснование;
							//НоваяЗапись.ДокументОтгрузки = ДокументПеремещениеВозврат;
							НоваяЗапись.ДокументОтгрузки = Документы.ПеремещениеТоваров.ПустаяСсылка();
							НоваяЗапись.УпаковочныйЛист = Документы.УпаковочныйЛист.ПустаяСсылка();
							НоваяЗапись.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Возврат;
							НоваяЗапись.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало;
							НоваяЗапись.Пользователь = ТекущийПриемщик;
							НоваяЗапись.РабочееМесто = НастройкиРМК.РабочееМесто;
							НоваяЗапись.Склад = ДокументОснование.СкладПолучатель;
							НоваяЗапись.Записать();

							Если НЕ ЕстьИзлишки Тогда

								ЗавершитьВозвратИзлишковИБрака(Отказ);
								Если Не Отказ Тогда
									СтруктураВозврата.Вставить("ПриемкаЗавершена", Истина);
								Иначе
									СтруктураВозврата.Вставить("СообщениеОбОшибке", "Неудачная попытка завершить возврат, обратитесь в техподдержку!");	
								КонецЕсли;	

							КонецЕсли;

						Иначе
							// нет излишков или брака к возврату
							// Возвращаем в структуре возврата признак завершения приемки для сообщения пользователю о завершении приемки
							СтруктураВозврата.Вставить("ПриемкаЗавершена", Истина);
						КонецЕсли;

					Иначе
						
						// проблема при создании документа приемки
						Отказ = Истина;
						СтруктураВозврата.Вставить("СообщениеОбОшибке", "Неудачная попытка создать документ приемки, обратитесь в техподдержку!");
						
					КонецЕсли;

				Иначе

					Отказ = Истина;
					СтруктураВозврата.Вставить("СообщениеОбОшибке", "Неудачная попытка создания документа приемки!");

				КонецЕсли;
			Иначе

				// есть непринятые УЛ по перемещению
				Отказ = Истина;
				СтруктураВозврата.Вставить("СообщениеОбОшибке", "Есть непроконтролированные упаковочные листы, завершите их контроль!");
				СтруктураВозврата.Вставить("ЕстьНепроконтролированыеУЛ", Истина);

			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецПроцедуры

		// Процедура формирования Перемещения на возврат и запись окончания этапа Возврат и начала этапа Транпортировка
		//
		// Параметры:
		//  Отказ  - Булево - Признак успешного выполнения
		//
		&НаСервере
		Процедура ЗавершитьВозвратИзлишковИБрака(Отказ)
			
			УстановитьПривилегированныйРежим(Истина); 
			
			Отказ = Ложь;
			Если ФормироватьПеремещениеВозврат Тогда
				ДокументПеремещениеВозврат = СформироватьПеремещениеНаСкладВозвратов(Отказ);
			КонецЕсли;	
			
			//расходный ордер пока не создается
			//
			//Если Не Отказ И ЗначениеЗаполнено(НастройкиРМК.СкладПолучатель) И НастройкиРМК.СкладПолучатель.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
			//	ДокументРасходныйОрдерНаТоварыВозврат = СформироватьРасходныйОрдерНаТовары(ДокументПеремещениеВозврат);
			//КонецЕсли;
				
			Если Не Отказ Тогда
			// запись окончания возврата
				МассивУЛ = МассивУпаковочныхЛистовПоПеремещению(ДокументПеремещениеВозврат);
				Для Каждого УЛ из МассивУЛ Цикл

				//запись Возврат Окончание
					НоваяЗапись = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
					НоваяЗапись.Период = ТекущаяДатаСеанса();
					НоваяЗапись.ДокументОснование = ДокументОснование;
					НоваяЗапись.ДокументОтгрузки = ДокументПеремещениеВозврат;
					НоваяЗапись.УпаковочныйЛист = УЛ;
					НоваяЗапись.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Возврат;
					НоваяЗапись.Состояние = Перечисления.КАБС_СостояниеДокументов.Окончание;
					НоваяЗапись.Пользователь = ТекущийПриемщик;
					НоваяЗапись.РабочееМесто = НастройкиРМК.РабочееМесто;
					НоваяЗапись.Склад = ДокументОснование.СкладПолучатель;
					НоваяЗапись.Записать();

					//запись Транспортировка КВыполнению
					НоваяЗапись = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
					НоваяЗапись.Период = ТекущаяДатаСеанса() + 1;
					НоваяЗапись.ДокументОснование = ДокументОснование;
					НоваяЗапись.ДокументОтгрузки = ДокументПеремещениеВозврат;
					НоваяЗапись.УпаковочныйЛист = УЛ;
					НоваяЗапись.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Транспортировка;
					НоваяЗапись.Состояние = Перечисления.КАБС_СостояниеДокументов.КВыполнению;
					НоваяЗапись.Пользователь = Справочники.Пользователи.ПустаяСсылка();
					НоваяЗапись.РабочееМесто = НастройкиРМК.РабочееМесто;
					НоваяЗапись.Склад = ДокументОснование.СкладПолучатель;
					НоваяЗапись.Записать();

				КонецЦикла;

			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Неудачная попытка создать и провести документ Перемещение товаров для возврата брака/излишков! Обратитесь в техподдержку";
				Сообщение.Сообщить();
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина); 
			
		КонецПроцедуры
	#КонецОбласти

	&НаСервере
	Процедура СнятиеУпаковочногоЛистаСВодителя(УпаковочныйЛист)
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		//снимем с водителя УЛ
		НоваяЗапись = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
		НоваяЗапись.ДокументОснование = ДокументОснование;
		НоваяЗапись.ДокументОтгрузки = ДокументОтгрузки;
		НоваяЗапись.УпаковочныйЛист = УпаковочныйЛист;
		НоваяЗапись.Период = ТекущаяДатаСеанса;
		НоваяЗапись.Пользователь = ТекущийВодитель;
		НоваяЗапись.РабочееМесто = НастройкиРМК.РабочееМесто;
		НоваяЗапись.Склад = ДокументОтгрузки.СкладПолучатель;
		НоваяЗапись.Состояние = Перечисления.КАБС_СостояниеДокументов.Окончание;
		НоваяЗапись.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Транспортировка;
		НоваяЗапись.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		//обновить список УЛ
		Элементы.СтатусыУЛ.Обновить();

	КонецПроцедуры

	&НаСервере
	Процедура НачатьПриемкуУпаковочногоЛиста()

		УстановитьПривилегированныйРежим(Истина);
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		//фиксируем начало работы с ул
		НоваяЗапись = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
		НоваяЗапись.ДокументОснование = ДокументОснование;
		НоваяЗапись.ДокументОтгрузки = ДокументОтгрузки;
		НоваяЗапись.УпаковочныйЛист = УпаковочныйЛист;
		НоваяЗапись.Период = ТекущаяДатаСеанса;
		НоваяЗапись.Пользователь = ТекущийПриемщик;
		НоваяЗапись.РабочееМесто = НастройкиРМК.РабочееМесто;
		НоваяЗапись.Склад = ДокументОтгрузки.СкладПолучатель;
		НоваяЗапись.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало;
		НоваяЗапись.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Приемка;
		НоваяЗапись.Записать();
		//обновить список ул
		Элементы.СтатусыУЛ.Обновить();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецПроцедуры

	&НаСервере
	Процедура ЗаписатьНепереданныеВодителемУЛКВыполнениюТранспортировки()
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТЗСписокНепереданныхУЛ = РеквизитФормыВЗначение("СписокНепереданныхУЛ");
		Для Каждого СтрокаТаблицы Из ТЗСписокНепереданныхУЛ Цикл

			МенеджерЗаписи = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
			МенеджерЗаписи.Прочитать();

			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Состояние = Перечисления.КАБС_СостояниеДокументов.КВыполнению;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;

		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
	Конецпроцедуры

	&НаСервере
	Процедура ЗаписатьНачалоТранспортировкиУпаковочногоЛиста(пУпаковочныйЛист)
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();

		НоваяЗапись = РегистрыСведений.КАБС_КонтрольРабочегоВремени.СоздатьМенеджерЗаписи();
		НоваяЗапись.ДокументОснование = ДокументОснование;
		НоваяЗапись.ДокументОтгрузки = ДокументОтгрузки;
		НоваяЗапись.УпаковочныйЛист = пУпаковочныйЛист;
		НоваяЗапись.Период = ТекущаяДатаСеанса;
		НоваяЗапись.Пользователь = ТекущийВодитель;
		НоваяЗапись.РабочееМесто = НастройкиРМК.РабочееМесто;
		НоваяЗапись.Склад = НастройкиРМК.СкладПолучатель;
		НоваяЗапись.Состояние = Перечисления.КАБС_СостояниеДокументов.Начало;
		НоваяЗапись.Этап = Перечисления.КАБС_ЭтапыБизнесПроцессов.Транспортировка;
		НоваяЗапись.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецПроцедуры
#КонецОбласти //ЗаписьДанных

#Область Упаковка

	&НаСервере
	Процедура КомандаУпаковатьНаСервере(Отказ)

		Период = ТекущаяДатаСеанса();

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
			|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
			|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
			|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
			|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
			|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
			|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
			|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
			|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
			|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
			|ИЗ
			|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
			|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
			|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
			|	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь";

		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольИзлишков Тогда
			Запрос.Текст = Запрос.Текст
				+ " И НЕ КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак";
			Запрос.Текст = Запрос.Текст
				+ " И КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель = &СкладПолучатель";
		Иначе
			Запрос.Текст = Запрос.Текст
				+ " И КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак";
		КонецЕсли;

		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПриемщик);
		Запрос.УстановитьПараметр("СкладПолучатель", СкладДляВозвратаБракаИИзлишков);
		
		УстановитьПривилегированныйРежим(Истина);

		Результат = Запрос.ВыполнитьПакет();
		
		УстановитьПривилегированныйРежим(Ложь);


		Если НЕ Результат[0].Пустой() Тогда
			Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольИзлишков
					ИЛИ ТекущийЭтап = "Возврат" Тогда
				УЛ = СоздатьУпаковочныйЛист(Результат[0].Выгрузить(), Период, Отказ);
				СписокУпаковочныхЛистовИзлишков.Добавить(УЛ);
			Иначе
				УЛ = СоздатьУпаковочныйЛист(Результат[0].Выгрузить(), Период, Отказ);
				СписокУпаковочныхЛистовНепринятогоТовара.Добавить(УЛ);
			КонецЕсли;
		Иначе
			Отказ = Истина
		КонецЕсли;

		ОбновитьДеревоТоваровПоТабличнымЧастям();

	КонецПроцедуры

	&НаКлиенте
	Процедура КомандаУпаковать(Команда)

		Отказ = Ложь;

		КомандаУпаковатьНаСервере(Отказ);

		Если Отказ Тогда
			ПоказатьПредупреждение(, "Нет товара указанного качества для упаковки", 5, "Внимание!");
		Иначе
			Если ТекущийПодЭтап = "Контроль" Тогда
				КомандаПечать("ПечатьУпаковочныхЛистовНепринятогоТовара");
			ИначеЕсли ТекущийПодЭтап = "Контроль излишков" Тогда
				КомандаПечать("ПечатьУпаковочныхЛистовИзлишков");
			КонецЕсли;
		КонецЕсли;

		УстановитьВидимостьДоступность();

	КонецПроцедуры
#КонецОбласти

#Область Печать
	
// Формирует и выводит указанную печатную форму на экран и/или распечатает документ сразу на принтер 
//
// Параметры:
//	ДокументСсылка - Документ, который нужно распечатать
//	ИмяПечатнойФормы - Наименование печатной формы документа, Можно указать внешнюю подключенную форму
// ДополнительныеПараметры - структура дополнительных параметров
// ТипФормы - Тип формы, для получения команды печати, ФормаОбъекта, ФормаСписка, ФормаВыбора
// Пример
//		СтруктураДополнительныхПараметров = Новый Структура;
//		СтруктураДополнительныхПараметров.Вставить("Ссылка", ДокументПриемки);
//		СтруктураДополнительныхПараметров.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//		СтруктураДополнительныхПараметров.Вставить("Редактирование", Ложь);
//		СтруктураДополнительныхПараметров.Вставить("Защита", Истина);
//		СтруктураДополнительныхПараметров.Вставить("СразуНаПринтер", Истина);
//		СтруктураДополнительныхПараметров.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Ландшафт);
//		СтруктураДополнительныхПараметров.Вставить("АвтоМасштаб", Истина);
//		ИмяПечатнойФормыДляПриходногоОрдера = "ПриходныйОрдерНаТовары";
//		НапечататьДокумент(ДокументПриемки, ИмяПечатнойФормыДляПриходногоОрдера, СтруктураДополнительныхПараметров);
&НаКлиенте
Процедура НапечататьДокумент(ДокументСсылка, ИмяПечатнойФормы, СтруктураДополнительныхПараметров, ТипФормы = "ФормаОбъекта")
		
		ВидРаспечатываемогоДокумента = Строка(ТипЗнч(ДокументСсылка));
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТипРаспечатываемогоДокумента = "Документ.ПриходныйОрдерНаТовары";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОРасхожденияхПослеПеремещения") Тогда
			ТипРаспечатываемогоДокумента = "Документ.АктОРасхожденияхПослеПеремещения";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ТипРаспечатываемогоДокумента = "Документ.ПеремещениеТоваров";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.УпаковочныйЛист") Тогда
			ТипРаспечатываемогоДокумента = "Документ.УпаковочныйЛист";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			ТипРаспечатываемогоДокумента = "Документ.ЗаказНаПеремещение";
		КонецЕсли;	
		
		Попытка
			
			ФормаДокументаДляПечати = ПолучитьФорму(ТипРаспечатываемогоДокумента + "." + ТипФормы);
			НайденнаяКомандаПечатиНаФорме = Неопределено;

			Если НЕ ФормаДокументаДляПечати = Неопределено Тогда

				КомандаАдресКомандПечати = ФормаДокументаДляПечати.Команды.Найти("АдресКомандПечатиВоВременномХранилище");
				АдресКомандПечати = КомандаАдресКомандПечати.Действие;
				
				ИмяКомандыПечатиНаФорме = ПолучитьИмяКомандыПечатиНаФормеПоНаименованиюПечатнойФормы(АдресКомандПечати, ИмяПечатнойФормы);
				НайденнаяКомандаПечатиНаФорме = ФормаДокументаДляПечати.Команды.Найти(ИмяКомандыПечатиНаФорме);

			Иначе

				Сообщить("ФормаДокументаДляПечати не определена!");
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Ошибка печати! Неудачная попытка получить форму с наименованием "+ ИмяПечатнойФормы +" документа вида " + ВидРаспечатываемогоДокумента;
				СообщениеПользователю.Сообщить();
				
				Возврат;

			КонецЕсли;	
			
			Если НЕ НайденнаяКомандаПечатиНаФорме = Неопределено Тогда
		
				УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(НайденнаяКомандаПечатиНаФорме, ФормаДокументаДляПечати, СтруктураДополнительныхПараметров);
			
			Иначе
			
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Ошибка печати! Не найдена команда печати на форме документа " + ДокументСсылка + " для печатной формы с наименованием " + ИмяПечатнойФормы ;
				СообщениеПользователю.Сообщить();	
			
			КонецЕсли;	
			 
		Исключение
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Ошибка печати! Неудачная попытка выполнить печать " + ИмяПечатнойФормы + Символы.ПС + Строка(ИнформацияОбОшибке().Описание);
			СообщениеПользователю.Сообщить();
			
		КонецПопытки;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяКомандыПечатиНаФормеПоНаименованиюПечатнойФормы(АдресКомандПечати, ИмяПечатнойФормы) Экспорт

	СтруктураКомандПечати = ПолучитьИзВременногоХранилища(АдресКомандПечати);
	
	Для Каждого КомандаПечати из СтруктураКомандПечати Цикл
		Если КомандаПечати.Идентификатор = ИмяПечатнойФормы Тогда
			Возврат КомандаПечати.ИмяКомандыНаФорме;
		КонецЕсли;
	КонецЦикла; 				
	
	Возврат Неопределено;
	
КонецФункции	
	
	&НаКлиенте
	Процедура ПечатьЭтикеток(ПризнакДляПечати)

		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		ИменаМакетов = "ЭтикеткаТовары";

		Попытка
			ВыполнитьКомандуПечати("Обработка.ПечатьЭтикетокИЦенников", ИменаМакетов, ПараметрКоманды, ЭтаФорма, ПолучитьПараметры(ПризнакДляПечати), ПризнакДляПечати);
		Исключение
			Инфо = ИнформацияОбОшибке();
			Сообщить("Описание='" + Инфо.Описание + "'");
			Сообщить("ИмяМодуля='" + Инфо.ИмяМодуля + "'");
			Сообщить("НомерСтроки=" + Инфо.НомерСтроки);
			Сообщить("ИсходнаяСтрока='" + Инфо.ИсходнаяСтрока + "'");
		КонецПопытки;

	КонецПроцедуры

	&НаКлиенте
	Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов,
			МассивОбъектов, ВладелецФормы, ПараметрыПечати = Неопределено,
			ПризнакДляПечати) Экспорт

		УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати);

	КонецПроцедуры

	&НаСервере
	Функция ПолучитьПараметры(ДокументДляПечати)

		Товары = Новый ТаблицаЗначений;
		Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Строка"));
		Товары.Колонки.Добавить("ЦенаЗаПачку", Новый ОписаниеТипов("Строка"));
		Товары.Колонки.Добавить("ЦенаДополнительно", Новый ОписаниеТипов("Число"));
		Товары.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
		Товары.Колонки.Добавить("ШтрихкодБазовой", Новый ОписаниеТипов("Строка"));
		Товары.Колонки.Добавить("Партия", Новый ОписаниеТипов("Строка"));
		Товары.Колонки.Добавить("Качество", Новый ОписаниеТипов("Строка"));
		Товары.Колонки.Добавить("НаименованиеСкладаДляЭтикетки", Новый ОписаниеТипов("Строка"));
		Товары.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
		Товары.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
		Товары.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
		Товары.Колонки.Добавить("ШаблонЭтикеткиПодготовлено", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
		Товары.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число"));
		Товары.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число"));
		Товары.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число"));
		Товары.Колонки.Добавить("Весовой", Новый ОписаниеТипов("Булево"));
		Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦены", Новый ОписаниеТипов("Дата"));
		Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно", Новый ОписаниеТипов("Дата"));
		Товары.Колонки.Добавить("ИмяПринтера", Новый ОписаниеТипов("Строка"));

		НаименованиеСкладаДляЭтикетки = ПолучитьНаименованиеСкладаДляЭтикетки(ДокументОснование.СкладОтправитель);
		КолВоЭтикеток = 1;

		Строка = ДокументДляПечати.Товары[0];
		НоваяСтрока = Товары.Добавить();

		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.Характеристика = Строка.Характеристика;
		НоваяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();

		НоваяСтрока.Цена = СтрЗаменить(ПривестиСтрокуКЧислу(Строка.Количество), Символы.НПП, ""); // используется для вывода количества в шт.
		НоваяСтрока.ЦенаЗаПачку = СтрЗаменить(Строка.Количество, Символы.НПП, ""); //используется для вывода количества упаковок в упак.
		НоваяСтрока.ЦенаДополнительно = 0;
		НоваяСтрока.Штрихкод = СокрЛП(ДокументДляПечати.Код);

		НоваяСтрока.Партия = "";
		НоваяСтрока.Качество = "";
		НоваяСтрока.НаименованиеСкладаДляЭтикетки = НаименованиеСкладаДляЭтикетки;
		НоваяСтрока.ШтрихкодБазовой = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ТекущийПользователь.Наименование); //используется для вывода ФИО упаковщика
		НоваяСтрока.ШаблонЦенника = Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка(); //НайтиПоНаименованию("ЦенникБольшойА6 95x138");
		НоваяСтрока.КоличествоЦенников = 0;
		НоваяСтрока.ШаблонЭтикетки = Справочники.ШаблоныЭтикетокИЦенников.НайтиПоНаименованию("УпаковочныйЛистДляОтгрузки");
		НоваяСтрока.ШаблонЭтикеткиПодготовлено = Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка();
		НоваяСтрока.КоличествоЭтикеток = КолВоЭтикеток;
		НоваяСтрока.ОстатокНаСкладе = 0;
		НоваяСтрока.Весовой = Ложь;
		НоваяСтрока.ДатаПоследнегоИзмененияЦены = Дата(1, 1, 1);
		НоваяСтрока.ДатаПоследнегоИзмененияЦеныДополнительно = Дата(1, 1, 1);
		НоваяСтрока.ИмяПринтера = ПолучитьИмяПринтераИзнастроекРМК(Перечисления.КАБС_ТипыПринтеров.ПринтерЭтикеток);

		МаксимальныйКодВесовогоТовара = 99999; //ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара();
		УстановитьПривилегированныйРежим(Истина);
		ПравилоВыгрузкиВВесы = Ложь; //(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПравилоОбмена, "ТипПодключаемогоОборудования") = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
		УстановитьПривилегированныйРежим(Ложь);

		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("Товары", ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор));
		ПараметрыПечати.Вставить("Организация", ДокументОснование.Организация);
		ПараметрыПечати.Вставить("ПравилоОбмена", Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПустаяСсылка());
		ПараметрыПечати.Вставить("МаксимальныйКодВесовогоТовара", МаксимальныйКодВесовогоТовара);
		ПараметрыПечати.Вставить("ПравилоВыгрузкиВВесы", ПравилоВыгрузкиВВесы);
		ПараметрыПечати.Вставить("ВидЦены", ДокументОснование.СкладОтправитель.УчетныйВидЦены);
		ПараметрыПечати.Вставить("Дата", ТекущаяДата());
		ПараметрыПечати.Вставить("Склад", ДокументОснование.СкладОтправитель); //Справочники.Склады.ПустаяСсылка());
		ПараметрыПечати.Вставить("НаименованиеСкладаДляЭтикетки", "");
		ПараметрыПечати.Вставить("ВидЦеныДополнительно", Справочники.ВидыЦен.ПустаяСсылка());
		ПараметрыПечати.Вставить("ДатаДополнительно", Дата(1, 1, 1));
		ПараметрыПечати.Вставить("СтруктураМакетаШаблона", Неопределено);

		Возврат ПараметрыПечати;

	КонецФункции

	&НаСервере
	Функция ПолучитьНаименованиеСкладаДляЭтикетки(Склад)
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	СкладыДополнительныеРеквизиты.Ссылка,
			|	СкладыДополнительныеРеквизиты.Свойство,
			|	СкладыДополнительныеРеквизиты.Значение
			|ИЗ
			|	Справочник.Склады.ДополнительныеРеквизиты КАК СкладыДополнительныеРеквизиты
			|ГДЕ
			|	СкладыДополнительныеРеквизиты.Ссылка = &Ссылка
			|	И СкладыДополнительныеРеквизиты.Свойство.Наименование = &Свойство");
		Запрос.Параметры.Вставить("Ссылка", Склад);

		НаименованиеСвойстваНаименованиеСкладаДляЭтикетки = "НаименованиеСкладаДляЭтикетки (Склады и магазины)";
		Запрос.Параметры.Вставить("Свойство", НаименованиеСвойстваНаименованиеСкладаДляЭтикетки);

		ТЗРезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Если ТЗРезультатЗапроса.Количество() > 0 Тогда
			ЗначениеДопРеквизита = ТЗРезультатЗапроса[0].Значение;
			Если ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
				Возврат ЗначениеДопРеквизита;
			Иначе
				Возврат "Ошибка в определении значения доп. реквизита "
					+ НаименованиеСвойстваНаименованиеСкладаДляЭтикетки;
			КонецЕсли;
		Иначе
			Возврат "ОШИБКА в определении значения доп. реквизита "
				+ НаименованиеСвойстваНаименованиеСкладаДляЭтикетки;
		КонецЕсли;

	КонецФункции

	Функция ПолучитьИмяПринтераИЗНастроекРМК(ТипПринтера)

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	НастройкиРМКПринтеры.Ссылка КАК Ссылка,
			|	НастройкиРМКПринтеры.НомерСтроки КАК НомерСтроки,
			|	НастройкиРМКПринтеры.ИмяПринтера КАК ИмяПринтера,
			|	НастройкиРМКПринтеры.Тип КАК Тип,
			|	НастройкиРМКПринтеры.Склад КАК Склад,
			|	НастройкиРМКПринтеры.Подразделение КАК Подразделение,
			|	НастройкиРМКПринтеры.КоличествоКопий КАК КоличествоКопий
			|ИЗ
			|	Справочник.НастройкиРМК.Принтеры КАК НастройкиРМКПринтеры
			|ГДЕ
			|	НастройкиРМКПринтеры.Ссылка.РабочееМесто = &РабочееМесто
			|	И НастройкиРМКПринтеры.Тип = &ТипПринтера";
		Запрос.УстановитьПараметр("РабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
		Запрос.УстановитьПараметр("ТипПринтера", ТипПринтера);

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда

			Возврат Выборка.ИмяПринтера;

		Иначе

			Возврат "Red";

		КонецЕсли;

	КонецФункции
#КонецОбласти

#Область ПрочиеПроцедурыИФункции
	
	&НаСервере
Процедура УбратьОшибкиИтоговПоИерархии(Строки, Поле = "Номенклатура", Родитель = Неопределено)
    //Убираем все элементы, равные текущему
	//Если Родитель = Неопределено Тогда
	//	Строки.Удалить(Строки[0]);	
	//КонецЕсли;	
	
    Всего = Строки.Количество();
    Для Инд = 1 По Всего  Цикл
        Стр = Строки[Всего-Инд];
        Зн = Стр[Поле];
		
		Если (Родитель <> Неопределено И Зн = Родитель) Тогда 
            Строки.Удалить(Стр);
        Иначе
            УбратьОшибкиИтоговПоИерархии(Стр.Строки, Поле, Зн);
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
	&НаСервере
	Процедура ОбновитьДеревоТоваровПоТабличнымЧастям()

		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрольИзлишков Тогда
			ОбновитьДеревоТоваровПоИзлишкам();
			Возврат;
		КонецЕсли;

		Запрос = Новый Запрос;
		
		Если ПараметрРазрешитьПриходоватьОтсутствующийВПеремещенииТовар Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ПредставлениеЧисел.Число КАК Число,
			|	ПредставлениеЧисел.Строка КАК Строка
			|ПОМЕСТИТЬ врПредставлениеЧисел
			|ИЗ
			|	&ПредставлениеЧисел КАК ПредставлениеЧисел
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Номенклатура.Наименование, """") КАК НоменклатураНаименование,
			|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
			|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
			|				ТОГДА 1
			|			ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
			|		КОНЕЦ
			|	КОНЕЦ КАК Коэффициент,
			|	ПеремещениеТоваровТовары.УпаковочныйЛист КАК УпаковочныйЛист,
			|	СУММА(ПеремещениеТоваровТовары.Количество) КАК КоличествоПлан,
			|	СУММА(ПеремещениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковокПлан,
			|	ПеремещениеТоваровТовары.Цена КАК Цена,
			|	СУММА(ПеремещениеТоваровТовары.Сумма) КАК Сумма
			|ПОМЕСТИТЬ врТаблицаТоварыПлан
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			|ГДЕ
			|	ПеремещениеТоваровТовары.Ссылка = &ДокументОтгрузки
			|	И ПеремещениеТоваровТовары.УпаковочныйЛист = &УпаковочныйЛист
			|СГРУППИРОВАТЬ ПО
			|	ПеремещениеТоваровТовары.Номенклатура,
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Номенклатура.Наименование, """"),
			|	ПеремещениеТоваровТовары.Характеристика,
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Характеристика.Наименование, """"),
			|	ПеремещениеТоваровТовары.Упаковка,
			|	ВЫБОР
			|		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
			|				ТОГДА 1
			|			ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
			|		КОНЕЦ
			|	КОНЕЦ,
			|	ПеремещениеТоваровТовары.УпаковочныйЛист,
			|	ПеремещениеТоваровТовары.Цена
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
			|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
			|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
			|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
			|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
			|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
			|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
			|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
			|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
			|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
			|ПОМЕСТИТЬ втКАБС_ПредварительныеСтрокиПеремещение
			|ИЗ
			|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
			|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
			|	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование, """") КАК НоменклатураНаименование,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|				ТОГДА 1
			|			ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|		КОНЕЦ
			|	КОНЕЦ КАК Коэффициент,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.Количество) КАК КоличествоФакт,
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок) КАК КоличествоУпаковокФакт,
			|	NULL КАК КоличествоБрак,
			|	NULL КАК КоличествоУпаковокБрак
			|ПОМЕСТИТЬ врТаблицаТоварыФактПред
			|ИЗ
			|	втКАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ЛОЖЬ
			|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
			|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = &УпаковочныйЛист
			|СГРУППИРОВАТЬ ПО
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика,
			|	ВЫБОР
			|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|				ТОГДА 1
			|			ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|		КОНЕЦ
			|	КОНЕЦ,
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование, """"),
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Характеристика.Наименование, """")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование, """"),
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика,
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Характеристика.Наименование, """"),
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка,
			|	ВЫБОР
			|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|				ТОГДА 1
			|			ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|		КОНЕЦ
			|	КОНЕЦ,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист,
			|	NULL,
			|	NULL,
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.Количество),
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок)
			|ИЗ
			|	втКАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ИСТИНА
			|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
			|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = &УпаковочныйЛист
			|СГРУППИРОВАТЬ ПО
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист,
			|	ВЫБОР
			|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|			КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|				ТОГДА 1
			|			ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|		КОНЕЦ
			|	КОНЕЦ,
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование, """"),
			|	ЕСТЬNULL(КАБС_ПредварительныеСтрокиПеремещение.Характеристика.Наименование, """")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врТаблицаТоварыФактПред.Номенклатура КАК Номенклатура,
			|	врТаблицаТоварыФактПред.НоменклатураНаименование КАК НоменклатураНаименование,
			|	врТаблицаТоварыФактПред.Характеристика КАК Характеристика,
			|	врТаблицаТоварыФактПред.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
			|	врТаблицаТоварыФактПред.Упаковка КАК Упаковка,
			|	врТаблицаТоварыФактПред.Коэффициент КАК Коэффициент,
			|	врТаблицаТоварыФактПред.УпаковочныйЛист КАК УпаковочныйЛист,
			|	СУММА(врТаблицаТоварыФактПред.КоличествоФакт) КАК КоличествоФакт,
			|	СУММА(врТаблицаТоварыФактПред.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт,
			|	СУММА(врТаблицаТоварыФактПред.КоличествоБрак) КАК КоличествоБрак,
			|	СУММА(врТаблицаТоварыФактПред.КоличествоУпаковокБрак) КАК КоличествоУпаковокБрак
			|ПОМЕСТИТЬ врТаблицаТоварыФакт
			|ИЗ
			|	врТаблицаТоварыФактПред КАК врТаблицаТоварыФактПред
			|СГРУППИРОВАТЬ ПО
			|	врТаблицаТоварыФактПред.Номенклатура,
			|	врТаблицаТоварыФактПред.НоменклатураНаименование,
			|	врТаблицаТоварыФактПред.Характеристика,
			|	врТаблицаТоварыФактПред.ХарактеристикаНаименование,
			|	врТаблицаТоварыФактПред.Упаковка,
			|	врТаблицаТоварыФактПред.Коэффициент,
			|	врТаблицаТоварыФактПред.УпаковочныйЛист
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА
			|		НЕ врТаблицаТоварыПлан.Номенклатура ЕСТЬ NULL
			|			ТОГДА ВЫБОР
			|				КОГДА врТаблицаТоварыПлан.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|					ТОГДА врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|				ИНАЧЕ врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врТаблицаТоварыПлан.ХарактеристикаНаименование + "", ""
			|					+ врПредставлениеЧисел.Строка + "" шт""
			|			КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|			КОГДА врТаблицаТоварыФакт.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|				ТОГДА врТаблицаТоварыФакт.НоменклатураНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|			ИНАЧЕ врТаблицаТоварыФакт.НоменклатураНаименование + "", "" + врТаблицаТоварыФакт.ХарактеристикаНаименование + "", "" +
			|				врПредставлениеЧисел.Строка + "" шт""
			|		КОНЕЦ
			|	КОНЕЦ КАК Товар,
			|	ЕСТЬNULL(врТаблицаТоварыПлан.Номенклатура, врТаблицаТоварыФакт.Номенклатура) КАК Номенклатура,
			|	ЕСТЬNULL(врТаблицаТоварыПлан.Характеристика, врТаблицаТоварыФакт.Характеристика) КАК Характеристика,
			|	врТаблицаТоварыФакт.УпаковочныйЛист КАК УпаковочныйЛист,
			|	СУММА(врТаблицаТоварыПлан.КоличествоПлан) КАК КоличествоПлан,
			|	СУММА(врТаблицаТоварыПлан.КоличествоУпаковокПлан) КАК КоличествоУпаковокПлан,
			|	СУММА(врТаблицаТоварыФакт.КоличествоФакт) КАК КоличествоФакт,
			|	СУММА(врТаблицаТоварыФакт.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт,
			|	СУММА(врТаблицаТоварыФакт.КоличествоБрак) КАК КоличествоБрак,
			|	СУММА(врТаблицаТоварыФакт.КоличествоУпаковокБрак) КАК КоличествоУпаковокБрак,
			|	врТаблицаТоварыПлан.Цена КАК Цена,
			|	СУММА(врТаблицаТоварыПлан.Цена * врТаблицаТоварыПлан.КоличествоУпаковокПлан) КАК СуммаПлан,
			|	ЕСТЬNULL(врТаблицаТоварыПлан.Упаковка, врТаблицаТоварыФакт.Упаковка) КАК Упаковка,
			|	ЕСТЬNULL(врТаблицаТоварыПлан.Коэффициент, врТаблицаТоварыФакт.Коэффициент) КАК Коэффициент
			|ИЗ
			|	врТаблицаТоварыПлан КАК врТаблицаТоварыПлан
			|		ПОЛНОЕ СОЕДИНЕНИЕ врТаблицаТоварыФакт КАК врТаблицаТоварыФакт
			|		ПО врТаблицаТоварыПлан.Номенклатура = врТаблицаТоварыФакт.Номенклатура
			|		И врТаблицаТоварыПлан.Характеристика = врТаблицаТоварыФакт.Характеристика
			|		И врТаблицаТоварыПлан.Коэффициент = врТаблицаТоварыФакт.Коэффициент
			|		И врТаблицаТоварыПлан.Упаковка = врТаблицаТоварыФакт.Упаковка
			|		И врТаблицаТоварыПлан.УпаковочныйЛист = врТаблицаТоварыФакт.УпаковочныйЛист
			|		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
			|		ПО ВЫБОР
			|			КОГДА
			|			НЕ врТаблицаТоварыПлан.Номенклатура ЕСТЬ NULL
			|				ТОГДА врТаблицаТоварыПлан.Коэффициент = врПредставлениеЧисел.Число
			|			ИНАЧЕ врТаблицаТоварыФакт.Коэффициент = врПредставлениеЧисел.Число
			|		КОНЕЦ
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(врТаблицаТоварыПлан.Упаковка, врТаблицаТоварыФакт.Упаковка),
			|	ЕСТЬNULL(врТаблицаТоварыПлан.Номенклатура, врТаблицаТоварыФакт.Номенклатура),
			|	ЕСТЬNULL(врТаблицаТоварыПлан.Характеристика, врТаблицаТоварыФакт.Характеристика),
			|	врТаблицаТоварыФакт.УпаковочныйЛист,
			|	ЕСТЬNULL(врТаблицаТоварыПлан.Коэффициент, врТаблицаТоварыФакт.Коэффициент),
			|	врТаблицаТоварыПлан.Цена,
			|	ВЫБОР
			|		КОГДА
			|		НЕ врТаблицаТоварыПлан.Номенклатура ЕСТЬ NULL
			|			ТОГДА ВЫБОР
			|				КОГДА врТаблицаТоварыПлан.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|					ТОГДА врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|				ИНАЧЕ врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врТаблицаТоварыПлан.ХарактеристикаНаименование + "", ""
			|					+ врПредставлениеЧисел.Строка + "" шт""
			|			КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|			КОГДА врТаблицаТоварыФакт.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|				ТОГДА врТаблицаТоварыФакт.НоменклатураНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|			ИНАЧЕ врТаблицаТоварыФакт.НоменклатураНаименование + "", "" + врТаблицаТоварыФакт.ХарактеристикаНаименование + "", "" +
			|				врПредставлениеЧисел.Строка + "" шт""
			|		КОНЕЦ
			|	КОНЕЦ,
			|	врПредставлениеЧисел.Строка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
			|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
			|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
			|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
			|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
			|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
			|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
			|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
			|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
			|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
			|ИЗ
			|	втКАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
			|	И
			|	НЕ КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
			|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)";
						
			
		Иначе	  
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ПредставлениеЧисел.Число КАК Число,
			|	ПредставлениеЧисел.Строка КАК Строка
			|ПОМЕСТИТЬ врПредставлениеЧисел
			|ИЗ
			|	&ПредставлениеЧисел КАК ПредставлениеЧисел
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Номенклатура.Наименование, """") КАК НоменклатураНаименование,
			|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
			|	ЕСТЬNULL(ПеремещениеТоваровТовары.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
			|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ КАК Коэффициент,
			|	ПеремещениеТоваровТовары.УпаковочныйЛист КАК УпаковочныйЛист,
			|	ПеремещениеТоваровТовары.Количество КАК КоличествоПлан,
			|	ПеремещениеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковокПлан,
			|	ПеремещениеТоваровТовары.Цена КАК Цена,
			|	ПеремещениеТоваровТовары.Сумма КАК Сумма
			|ПОМЕСТИТЬ врТаблицаТоварыПлан
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			|ГДЕ
			|	ПеремещениеТоваровТовары.Ссылка = &ДокументОтгрузки
			|	И ПеремещениеТоваровТовары.УпаковочныйЛист = &УпаковочныйЛист
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
			|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
			|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
			|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
			|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
			|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
			|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
			|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
			|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
			|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
			|ПОМЕСТИТЬ втКАБС_ПредварительныеСтрокиПеремещение
			|ИЗ
			|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
			|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
			|	И КАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ КАК Коэффициент,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.Количество) КАК КоличествоФакт,
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок) КАК КоличествоУпаковокФакт,
			|	NULL КАК КоличествоБрак,
			|	NULL КАК КоличествоУпаковокБрак
			|ПОМЕСТИТЬ врТаблицаТоварыФакт
			|ИЗ
			|	втКАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ЛОЖЬ
			|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
			|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = &УпаковочныйЛист
			|
			|СГРУППИРОВАТЬ ПО
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика,
			|	ВЫБОР
			|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка,
			|	ВЫБОР
			|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист,
			|	NULL,
			|	NULL,
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.Количество),
			|	СУММА(КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок)
			|ИЗ
			|	втКАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ИСТИНА
			|	И КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
			|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = &УпаковочныйЛист
			|
			|СГРУППИРОВАТЬ ПО
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист,
			|	ВЫБОР
			|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА врТаблицаТоварыПлан.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			ТОГДА врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|		ИНАЧЕ врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врТаблицаТоварыПлан.ХарактеристикаНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|	КОНЕЦ КАК Товар,
			|	врТаблицаТоварыПлан.Номенклатура КАК Номенклатура,
			|	врТаблицаТоварыПлан.Характеристика КАК Характеристика,
			|	врТаблицаТоварыФакт.УпаковочныйЛист КАК УпаковочныйЛист,
			|	врТаблицаТоварыПлан.КоличествоПлан КАК КоличествоПлан,
			|	врТаблицаТоварыПлан.КоличествоУпаковокПлан КАК КоличествоУпаковокПлан,
			|	СУММА(врТаблицаТоварыФакт.КоличествоФакт) КАК КоличествоФакт,
			|	СУММА(врТаблицаТоварыФакт.КоличествоУпаковокФакт) КАК КоличествоУпаковокФакт,
			|	СУММА(врТаблицаТоварыФакт.КоличествоБрак) КАК КоличествоБрак,
			|	СУММА(врТаблицаТоварыФакт.КоличествоУпаковокБрак) КАК КоличествоУпаковокБрак,
			|	врТаблицаТоварыПлан.Цена КАК Цена,
			|	Сумма(врТаблицаТоварыПлан.Цена * врТаблицаТоварыПлан.КоличествоУпаковокПлан) КАК СуммаПлан,
			|	врТаблицаТоварыПлан.Упаковка КАК Упаковка,
			|	врТаблицаТоварыПлан.Коэффициент КАК Коэффициент
			|ИЗ
			|	врТаблицаТоварыПлан КАК врТаблицаТоварыПлан
			|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаТоварыФакт КАК врТаблицаТоварыФакт
			|		ПО (врТаблицаТоварыПлан.Номенклатура = врТаблицаТоварыФакт.Номенклатура)
			|			И (врТаблицаТоварыПлан.Характеристика = врТаблицаТоварыФакт.Характеристика)
			|			И (врТаблицаТоварыПлан.Коэффициент = врТаблицаТоварыФакт.Коэффициент)
			|			И (врТаблицаТоварыПлан.Упаковка = врТаблицаТоварыФакт.Упаковка)
			|			И (врТаблицаТоварыПлан.УпаковочныйЛист = врТаблицаТоварыФакт.УпаковочныйЛист)
			|		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
			|		ПО (врТаблицаТоварыПлан.Коэффициент = врПредставлениеЧисел.Число)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА врТаблицаТоварыПлан.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			ТОГДА врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|		ИНАЧЕ врТаблицаТоварыПлан.НоменклатураНаименование + "", "" + врТаблицаТоварыПлан.ХарактеристикаНаименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|	КОНЕЦ,
			|	врТаблицаТоварыПлан.Упаковка,
			|	врТаблицаТоварыПлан.Номенклатура,
			|	врТаблицаТоварыПлан.Характеристика,
			|	врТаблицаТоварыФакт.УпаковочныйЛист,
			|	врТаблицаТоварыПлан.КоличествоПлан,
			|	врТаблицаТоварыПлан.КоличествоУпаковокПлан,
			|	врТаблицаТоварыПлан.Коэффициент,
			|	врТаблицаТоварыПлан.Цена,
			|	врТаблицаТоварыПлан.Сумма
			|
			|УПОРЯДОЧИТЬ ПО
			|	врТаблицаТоварыПлан.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
			|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
			|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
			|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
			|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
			|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
			|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
			|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
			|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
			|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
			|ИЗ
			|	втКАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
			|	И НЕ КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
			|	И КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)";
		
		КонецЕсли;	
			
		Запрос.УстановитьПараметр("ПредставлениеЧисел", ПредставлениеЧисел.Выгрузить());
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
		Запрос.УстановитьПараметр("УпаковочныйЛист", УпаковочныйЛист);
		Запрос.УстановитьПараметр("ВидЦены", ДокументОснование.СкладПолучатель.РозничныйВидЦены);
		Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПриемщик);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Результат = Запрос.ВыполнитьПакет();
		
		УстановитьПривилегированныйРежим(Ложь);

		ДеревоРезультат = Результат[Результат.Количество()
			- 2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

		Если Результат[Результат.Количество() - 1].Пустой() Тогда
			МожноУпаковать = Ложь
		Иначе
			МожноУпаковать = Истина
		КонецЕсли;
		
		//УбратьОшибкиИтоговПоИерархии(ДеревоРезультат.Строки);
		ЗначениеВРеквизитФормы(ДеревоРезультат, "ТоварыДерево");

	КонецПроцедуры

	&НаСервере
	Процедура ОбновитьДеревоТоваровПоИзлишкам()

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПредставлениеЧисел.Число КАК Число,
		               |	ПредставлениеЧисел.Строка КАК Строка
		               |ПОМЕСТИТЬ врПредставлениеЧисел
		               |ИЗ
		               |	&ПредставлениеЧисел КАК ПредставлениеЧисел
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КАБС_КонтрольРабочегоВремениСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист
		               |ПОМЕСТИТЬ втПринятыеУпаковочныеЛисты
		               |ИЗ
		               |	РегистрСведений.КАБС_КонтрольРабочегоВремени.СрезПоследних(, ) КАК КАБС_КонтрольРабочегоВремениСрезПоследних
		               |ГДЕ
		               |	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОснование = &ДокументОснование
		               |	И КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОтгрузки = &ДокументОтгрузки
		               |	И КАБС_КонтрольРабочегоВремениСрезПоследних.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		               |	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
		               |	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
		               |	ВЫБОР
		               |		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		               |			ТОГДА 1
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
		               |					ТОГДА 1
		               |				ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
		               |			КОНЕЦ
		               |	КОНЕЦ КАК Коэффициент,
		               |	СУММА(ПеремещениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		               |	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
		               |ПОМЕСТИТЬ втСтрокиДокументаОтгузки
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &ДокументОтгрузки
		               |	И ПеремещениеТоваровТовары.УпаковочныйЛист В
		               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |				втПринятыеУпаковочныеЛисты.УпаковочныйЛист
		               |			ИЗ
		               |				втПринятыеУпаковочныеЛисты)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПеремещениеТоваровТовары.Номенклатура,
		               |	ПеремещениеТоваровТовары.Характеристика,
		               |	ПеремещениеТоваровТовары.Упаковка,
		               |	ВЫБОР
		               |		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		               |			ТОГДА 1
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
		               |					ТОГДА 1
		               |				ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
		               |			КОНЕЦ
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
		               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
		               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
		               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
		               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
		               |	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
		               |	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
		               |	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
		               |	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
		               |	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
		               |	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
		               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
		               |	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
		               |	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
		               |	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки,
		               |	ВЫБОР
		               |		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		               |			ТОГДА 1
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
		               |					ТОГДА 1
		               |				ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
		               |			КОНЕЦ
		               |	КОНЕЦ КАК Коэффициент
		               |ПОМЕСТИТЬ втКАБС_ПредварительныеСтрокиПеремещение
		               |ИЗ
		               |	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
		               |ГДЕ
		               |	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
		               |	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		               |			ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |		ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование + "", "" + втКАБС_ПредварительныеСтрокиПеремещение.Характеристика.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |	КОНЕЦ КАК Товар,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
		               |	ВЫБОР
		               |		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		               |			ТОГДА 1
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
		               |					ТОГДА 1
		               |				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
		               |			КОНЕЦ
		               |	КОНЕЦ КАК Коэффициент,
		               |	СУММА(втКАБС_ПредварительныеСтрокиПеремещение.Количество) КАК КоличествоФакт,
		               |	СУММА(втКАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок) КАК КоличествоУпаковок
		               |ПОМЕСТИТЬ втПринятоПоПеремещению
		               |ИЗ
		               |	втКАБС_ПредварительныеСтрокиПеремещение КАК втКАБС_ПредварительныеСтрокиПеремещение
		               |		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
		               |		ПО втКАБС_ПредварительныеСтрокиПеремещение.Коэффициент = врПредставлениеЧисел.Число
		               |ГДЕ
		               |	втКАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
		               |	И втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ЛОЖЬ
		               |	И втКАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
		               |	И втКАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика,
		               |	ВЫБОР
		               |		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		               |			ТОГДА 1
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
		               |					ТОГДА 1
		               |				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
		               |			КОНЕЦ
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		               |			ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |		ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование + "", "" + втКАБС_ПредварительныеСтрокиПеремещение.Характеристика.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		               |			ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |		ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование + "", "" + втКАБС_ПредварительныеСтрокиПеремещение.Характеристика.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |	КОНЕЦ КАК Товар,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
		               |	ВЫБОР
		               |		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		               |			ТОГДА 1
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
		               |					ТОГДА 1
		               |				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
		               |			КОНЕЦ
		               |	КОНЕЦ КАК Коэффициент,
		               |	СУММА(втКАБС_ПредварительныеСтрокиПеремещение.Количество) КАК КоличествоФакт,
		               |	СУММА(втКАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок) КАК КоличествоУпаковок
		               |ПОМЕСТИТЬ втИзлишкиПоПеремещениюФакт
		               |ИЗ
		               |	втКАБС_ПредварительныеСтрокиПеремещение КАК втКАБС_ПредварительныеСтрокиПеремещение
		               |		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
		               |		ПО втКАБС_ПредварительныеСтрокиПеремещение.Коэффициент = врПредставлениеЧисел.Число
		               |ГДЕ
		               |	(втКАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
		               |			ИЛИ втКАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки.СкладПолучатель = &СкладПолучатель)
		               |	И втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ЛОЖЬ
		               |	И втКАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
		               |	И втКАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Коэффициент,
		               |	ВЫБОР
		               |		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		               |			ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |		ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура.Наименование + "", "" + втКАБС_ПредварительныеСтрокиПеремещение.Характеристика.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |	КОНЕЦ,
		               |	ВЫБОР
		               |		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		               |			ТОГДА 1
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
		               |					ТОГДА 1
		               |				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
		               |			КОНЕЦ
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втСтрокиДокументаОтгузки.Номенклатура КАК Номенклатура,
		               |	втСтрокиДокументаОтгузки.Характеристика КАК Характеристика,
		               |	втСтрокиДокументаОтгузки.Упаковка КАК Упаковка,
		               |	СУММА(втИзлишкиПоПеремещениюФакт.КоличествоФакт) КАК КоличествоФакт,
		               |	СУММА(втИзлишкиПоПеремещениюФакт.КоличествоУпаковок) КАК КоличествоУпаковокФакт,
		               |	СУММА(втПринятоПоПеремещению.КоличествоФакт - втСтрокиДокументаОтгузки.Количество) КАК КоличествоПлан,
		               |	СУММА(втПринятоПоПеремещению.КоличествоУпаковок - втСтрокиДокументаОтгузки.КоличествоУпаковок) КАК КоличествоУпаковокПлан,
		               |	втСтрокиДокументаОтгузки.Коэффициент КАК Коэффициент,
		               |	ВЫБОР
		               |		КОГДА втСтрокиДокументаОтгузки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		               |			ТОГДА втСтрокиДокументаОтгузки.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |		ИНАЧЕ втСтрокиДокументаОтгузки.Номенклатура.Наименование + "", "" + втСтрокиДокументаОтгузки.Характеристика.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |	КОНЕЦ КАК Товар
		               |ПОМЕСТИТЬ втИзлишкиПланФактПредварительная
		               |ИЗ
		               |	втСтрокиДокументаОтгузки КАК втСтрокиДокументаОтгузки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втИзлишкиПоПеремещениюФакт КАК втИзлишкиПоПеремещениюФакт
		               |		ПО втСтрокиДокументаОтгузки.Номенклатура = втИзлишкиПоПеремещениюФакт.Номенклатура
		               |			И втСтрокиДокументаОтгузки.Характеристика = втИзлишкиПоПеремещениюФакт.Характеристика
		               |			И втСтрокиДокументаОтгузки.Упаковка = втИзлишкиПоПеремещениюФакт.Упаковка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втПринятоПоПеремещению КАК втПринятоПоПеремещению
		               |		ПО втСтрокиДокументаОтгузки.Номенклатура = втПринятоПоПеремещению.Номенклатура
		               |			И втСтрокиДокументаОтгузки.Характеристика = втПринятоПоПеремещению.Характеристика
		               |			И втСтрокиДокументаОтгузки.Упаковка = втПринятоПоПеремещению.Упаковка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
		               |		ПО втСтрокиДокументаОтгузки.Коэффициент = врПредставлениеЧисел.Число
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	втСтрокиДокументаОтгузки.Номенклатура,
		               |	втСтрокиДокументаОтгузки.Характеристика,
		               |	втСтрокиДокументаОтгузки.Упаковка,
		               |	втСтрокиДокументаОтгузки.Коэффициент,
		               |	ВЫБОР
		               |		КОГДА втСтрокиДокументаОтгузки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		               |			ТОГДА втСтрокиДокументаОтгузки.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |		ИНАЧЕ втСтрокиДокументаОтгузки.Номенклатура.Наименование + "", "" + втСтрокиДокументаОтгузки.Характеристика.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
		               |	КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втИзлишкиПланФактПредварительная.Номенклатура КАК Номенклатура,
		               |	втИзлишкиПланФактПредварительная.Характеристика КАК Характеристика,
		               |	втИзлишкиПланФактПредварительная.Упаковка КАК Упаковка,
		               |	втИзлишкиПланФактПредварительная.КоличествоФакт КАК КоличествоФакт,
		               |	втИзлишкиПланФактПредварительная.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
		               |	втИзлишкиПланФактПредварительная.КоличествоПлан КАК КоличествоПлан,
		               |	втИзлишкиПланФактПредварительная.КоличествоУпаковокПлан КАК КоличествоУпаковокПлан,
		               |	втИзлишкиПланФактПредварительная.Коэффициент КАК Коэффициент,
		               |	втИзлишкиПланФактПредварительная.Товар КАК Товар
		               |ИЗ
		               |	втИзлишкиПланФактПредварительная КАК втИзлишкиПланФактПредварительная
		               |ГДЕ
		               |	втИзлишкиПланФактПредварительная.КоличествоПлан > 0
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
		               |	втКАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки
		               |ИЗ
		               |	втКАБС_ПредварительныеСтрокиПеремещение КАК втКАБС_ПредварительныеСтрокиПеремещение
		               |ГДЕ
		               |	втКАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель = &СкладПолучатель
		               |	И втКАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист = ЗНАЧЕНИЕ(Документ.УпаковочныйЛист.ПустаяСсылка)
		               |	И НЕ втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак";

		Запрос.УстановитьПараметр("ПредставлениеЧисел", ПредставлениеЧисел.Выгрузить());
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
		Запрос.УстановитьПараметр("СкладПолучатель", СкладДляВозвратаБракаИИзлишков);
		Запрос.УстановитьПараметр("ВидЦены", ДокументОснование.СкладПолучатель.РозничныйВидЦены);
		Запрос.УстановитьПараметр("РабочееМесто", НастройкиРМК.РабочееМесто);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПриемщик);

		Результат = Запрос.ВыполнитьПакет();

		ДеревоРезультат = Результат[Результат.Количество()
			- 2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);

		Если Результат[Результат.Количество() - 1].Пустой() Тогда
			МожноУпаковать = Ложь
		Иначе
			МожноУпаковать = Истина
		КонецЕсли;

		ЗначениеВРеквизитФормы(ДеревоРезультат, "ИзлишкиДерево");

	КонецПроцедуры

	&НаСервере
	Функция ТекстЗапросаОбработатьШтрихкодыНоменклатурыИзлишки()

		Возврат "ВЫБРАТЬ
			|	ПредставлениеЧисел.Число КАК Число,
			|	ПредставлениеЧисел.Строка КАК Строка
			|ПОМЕСТИТЬ врПредставлениеЧисел
			|ИЗ
			|	&ПредставлениеЧисел КАК ПредставлениеЧисел
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|КАБС_КонтрольРабочегоВремениСрезПоследних.УпаковочныйЛист КАК УпаковочныйЛист
			|ПОМЕСТИТЬ втПринятыеУпаковочныеЛисты
			|ИЗ
			|	РегистрСведений.КАБС_КонтрольРабочегоВремени.СрезПоследних(, ) КАК КАБС_КонтрольРабочегоВремениСрезПоследних
			|ГДЕ
			|	КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОснование = &ДокументОснование
			|	И КАБС_КонтрольРабочегоВремениСрезПоследних.ДокументОтгрузки = &ДокументОтгрузки
			|	И КАБС_КонтрольРабочегоВремениСрезПоследних.Этап = ЗНАЧЕНИЕ(Перечисление.КАБС_ЭтапыБизнесПроцессов.Приемка)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
			|	ПеремещениеТоваровТовары.Характеристика КАК Характеристика,
			|	ПеремещениеТоваровТовары.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ КАК Коэффициент,
			|	СУММА(ПеремещениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
			|ПОМЕСТИТЬ втСтрокиДокументаОтгузки
			|ИЗ
			|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
			|ГДЕ
			|	ПеремещениеТоваровТовары.Ссылка = &ДокументОтгрузки
			|	И ПеремещениеТоваровТовары.УпаковочныйЛист В (Выбрать УпаковочныйЛист Из втПринятыеУпаковочныеЛисты)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПеремещениеТоваровТовары.Номенклатура,
			|	ПеремещениеТоваровТовары.Характеристика,
			|	ПеремещениеТоваровТовары.Упаковка,
			|	ВЫБОР
			|		КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ПеремещениеТоваровТовары.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КАБС_ПредварительныеСтрокиПеремещение.Период КАК Период,
			|	КАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	КАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	КАБС_ПредварительныеСтрокиПеремещение.Назначение КАК Назначение,
			|	КАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование КАК ДокументОснование,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки КАК ДокументОтгрузки,
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументПриемки КАК ДокументПриемки,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛист КАК УпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.УпаковочныйЛистРодитель КАК УпаковочныйЛистРодитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.Серия КАК Серия,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладОтправитель КАК СкладОтправитель,
			|	КАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель КАК СкладПолучатель,
			|	КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто КАК РабочееМесто,
			|	КАБС_ПредварительныеСтрокиПеремещение.Пользователь КАК Пользователь,
			|	КАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок КАК КоличествоУпаковок,
			|	КАБС_ПредварительныеСтрокиПеремещение.Количество КАК Количество,
			|	КАБС_ПредварительныеСтрокиПеремещение.Цена КАК Цена,
			|	КАБС_ПредварительныеСтрокиПеремещение.Сумма КАК Сумма,
			|	КАБС_ПредварительныеСтрокиПеремещение.Штрихкод КАК Штрихкод,
			|	КАБС_ПредварительныеСтрокиПеремещение.Комментарий КАК Комментарий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоУпаковочныйЛист КАК ЭтоУпаковочныйЛист,
			|	КАБС_ПредварительныеСтрокиПеремещение.СтатусУказанияСерий КАК СтатусУказанияСерий,
			|	КАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак КАК ЭтоБрак,
			|	КАБС_ПредварительныеСтрокиПеремещение.КодСтроки КАК КодСтроки,
			|	ВЫБОР
			|		КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ КАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ КАК Коэффициент
			|ПОМЕСТИТЬ втКАБС_ПредварительныеСтрокиПеремещение
			|ИЗ
			|	РегистрСведений.КАБС_ПредварительныеСтрокиПеремещение КАК КАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	КАБС_ПредварительныеСтрокиПеремещение.ДокументОснование = &ДокументОснование
			|	И КАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ КАК Коэффициент,
			|	СУММА(ВЫБОР
			|			КОГДА НЕ втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак
			|				ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.Количество
			|		КОНЕЦ) КАК КоличествоПринято,
			|	СУММА(ВЫБОР
			|			КОГДА НЕ втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак
			|				ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок
			|		КОНЕЦ) КАК КоличествоУпаковокПринято,
			|	СУММА(ВЫБОР
			|			КОГДА втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак
			|				ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.Количество
			|		КОНЕЦ) КАК КоличествоБрак,
			|	СУММА(ВЫБОР
			|			КОГДА втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак
			|				ТОГДА втКАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок
			|		КОНЕЦ) КАК КоличествоУпаковокБрак
			|ПОМЕСТИТЬ втПринятоПоПеремещению
			|ИЗ
			|	втКАБС_ПредварительныеСтрокиПеремещение КАК втКАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	втКАБС_ПредварительныеСтрокиПеремещение.ДокументОтгрузки = &ДокументОтгрузки
			|	И втКАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
			|	И втКАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
			|
			|СГРУППИРОВАТЬ ПО
			|	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка,
			|	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
			|	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика,
			|	ВЫБОР
			|		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура КАК Номенклатура,
			|	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика КАК Характеристика,
			|	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ КАК Коэффициент,
			|	СУММА(втКАБС_ПредварительныеСтрокиПеремещение.Количество) КАК КоличествоИзлишекФакт,
			|	СУММА(втКАБС_ПредварительныеСтрокиПеремещение.КоличествоУпаковок) КАК КоличествоУпаковокИзлишекФакт
			|ПОМЕСТИТЬ втИзлишкиПоПеремещениюФакт
			|ИЗ
			|	втКАБС_ПредварительныеСтрокиПеремещение КАК втКАБС_ПредварительныеСтрокиПеремещение
			|ГДЕ
			|	втКАБС_ПредварительныеСтрокиПеремещение.СкладПолучатель = &СкладДляВозврата
			|	И втКАБС_ПредварительныеСтрокиПеремещение.ЭтоБрак = ЛОЖЬ
			|	И втКАБС_ПредварительныеСтрокиПеремещение.РабочееМесто = &РабочееМесто
			|	И втКАБС_ПредварительныеСтрокиПеремещение.Пользователь = &Пользователь
			|
			|СГРУППИРОВАТЬ ПО
			|	втКАБС_ПредварительныеСтрокиПеремещение.Номенклатура,
			|	втКАБС_ПредварительныеСтрокиПеремещение.Характеристика,
			|	втКАБС_ПредварительныеСтрокиПеремещение.Упаковка,
			|	втКАБС_ПредварительныеСтрокиПеремещение.Коэффициент,
			|	ВЫБОР
			|		КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ втКАБС_ПредварительныеСтрокиПеремещение.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втСтрокиДокументаОтгузки.Номенклатура КАК Номенклатура,
			|	втСтрокиДокументаОтгузки.Характеристика КАК Характеристика,
			|	втСтрокиДокументаОтгузки.Упаковка КАК Упаковка,
			|	втСтрокиДокументаОтгузки.Коэффициент КАК Коэффициент,
			|	втСтрокиДокументаОтгузки.Количество КАК КоличествоПлан,
			|	втСтрокиДокументаОтгузки.КоличествоУпаковок КАК КоличествоУпаковокПлан,
			|	втПринятоПоПеремещению.КоличествоПринято КАК КоличествоПринято,
			|	втПринятоПоПеремещению.КоличествоУпаковокПринято КАК КоличествоУпаковокПринято,
			|	втПринятоПоПеремещению.КоличествоБрак КАК КоличествоБрак,
			|	втПринятоПоПеремещению.КоличествоУпаковокБрак КАК КоличествоУпаковокБрак,
			|	втПринятоПоПеремещению.КоличествоПринято - втСтрокиДокументаОтгузки.Количество КАК КоличествоИзлишекПлан,
			|	втПринятоПоПеремещению.КоличествоУпаковокПринято - втСтрокиДокументаОтгузки.КоличествоУпаковок КАК КоличествоУпаковокИзлишекПлан,
			|	втИзлишкиПоПеремещениюФакт.КоличествоИзлишекФакт КАК КоличествоИзлишекФакт,
			|	втИзлишкиПоПеремещениюФакт.КоличествоУпаковокИзлишекФакт КАК КоличествоУпаковокИзлишекФакт
			|ПОМЕСТИТЬ втИзлишкиПланФакт
			|ИЗ
			|	втСтрокиДокументаОтгузки КАК втСтрокиДокументаОтгузки
			|		ЛЕВОЕ СОЕДИНЕНИЕ втПринятоПоПеремещению КАК втПринятоПоПеремещению
			|		ПО втСтрокиДокументаОтгузки.Номенклатура = втПринятоПоПеремещению.Номенклатура
			|			И втСтрокиДокументаОтгузки.Характеристика = втПринятоПоПеремещению.Характеристика
			|			И втСтрокиДокументаОтгузки.Упаковка = втПринятоПоПеремещению.Упаковка
			|		ЛЕВОЕ СОЕДИНЕНИЕ втИзлишкиПоПеремещениюФакт КАК втИзлишкиПоПеремещениюФакт
			|		ПО втСтрокиДокументаОтгузки.Номенклатура = втИзлишкиПоПеремещениюФакт.Номенклатура
			|			И втСтрокиДокументаОтгузки.Характеристика = втИзлишкиПоПеремещениюФакт.Характеристика
			|			И втСтрокиДокументаОтгузки.Упаковка = втИзлишкиПоПеремещениюФакт.Упаковка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
			|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
			|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
			|	ВЫБОР
			|		КОГДА ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ШтрихкодыНоменклатуры.Упаковка.Числитель = 0
			|					ТОГДА 1
			|				ИНАЧЕ ШтрихкодыНоменклатуры.Упаковка.Числитель
			|			КОНЕЦ
			|	КОНЕЦ КАК Коэффициент
			|ПОМЕСТИТЬ врШтрихкоды
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врШтрихкоды.Штрихкод КАК Штрихкод,
			|	врШтрихкоды.Номенклатура КАК Номенклатура,
			|	врШтрихкоды.Характеристика КАК Характеристика,
			|	врШтрихкоды.Упаковка КАК Упаковка,
			|	&СкладОтправитель КАК СкладОтправитель,
			|	&СкладПолучатель КАК СкладПолучатель,
			|	&ДокументОснование КАК ДокументОснование,
			|	&ДокументОтгрузки КАК ДокументОтгрузки,
			|	1 КАК КоличествоУпаковок,
			|	&Пользователь КАК Пользователь,
			|	&РабочееМесто КАК РабочееМесто,
			|	&Период КАК Период,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА врШтрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
			|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * врШтрихкоды.Коэффициент
			|		КОНЕЦ, 0) КАК Цена,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА врШтрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|				ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
			|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена * врШтрихкоды.Коэффициент
			|		КОНЕЦ, 0) КАК Сумма,
			|	врШтрихкоды.Коэффициент КАК Количество,
			|	&ЭтоБрак КАК ЭтоБрак,
			|	ЕСТЬNULL(втИзлишкиПланФакт.КоличествоИзлишекПлан, 0) КАК КОформлениюОстаток,
			|	ЕСТЬNULL(втИзлишкиПланФакт.КоличествоИзлишекФакт, 0) КАК ОтгруженоОстаток,
			|	ВЫБОР
			|		КОГДА врШтрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			ТОГДА врШтрихкоды.Номенклатура.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|		ИНАЧЕ врШтрихкоды.Номенклатура.Наименование + "", "" + врШтрихкоды.Характеристика.Наименование + "", "" + врПредставлениеЧисел.Строка + "" шт""
			|	КОНЕЦ КАК Товар,
			|	&УпаковочныйЛист КАК УпаковочныйЛист
			|ИЗ
			|	врШтрихкоды КАК врШтрихкоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				,
			|				ВидЦены = &ВидЦены
			|					И Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
			|		ПО врШтрихкоды.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
			|			И врШтрихкоды.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
			|		ЛЕВОЕ СОЕДИНЕНИЕ втИзлишкиПланФакт КАК втИзлишкиПланФакт
			|		ПО врШтрихкоды.Номенклатура = втИзлишкиПланФакт.Номенклатура
			|			И врШтрихкоды.Характеристика = втИзлишкиПланФакт.Характеристика
			|			И врШтрихкоды.Коэффициент = втИзлишкиПланФакт.Коэффициент
			|		ЛЕВОЕ СОЕДИНЕНИЕ врПредставлениеЧисел КАК врПредставлениеЧисел
			|		ПО врШтрихкоды.Коэффициент = врПредставлениеЧисел.Число
			|ИТОГИ
			|	СУММА(КОформлениюОстаток),
			|	СУММА(ОтгруженоОстаток)
			|ПО
			|	Товар";

	КонецФункции

	&НаКлиенте
	Процедура ПерейтиНаСтраницу(Страница = Неопределено)
		
		Для Каждого СтраницаФормы Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
			Если СтраницаФормы <> Страница Тогда  
				СтраницаФормы.Видимость = Ложь;
			Иначе
				СтраницаФормы.Видимость = Истина;
			КонецЕсли;	
		КонецЦикла;	
		
		Элементы.Страницы.ТекущаяСтраница = Страница;
		Если Страница = Элементы.СтраницаСтартВодитель И НЕ ФормироватьПеремещениеВозврат Тогда
			Элементы.ДекорацияСтартВодитель.ТекстНевыбраннойКартинки = "Считайте штрих-код водителя 
			|или перемещения, по которому водитель сдал коробки, но не закончена приемка";
		КонецЕсли;	
		
	КонецПроцедуры

	&НаСервере
	Процедура УстановитьКурсорВДереве(КлючСтроки)
		
		КоллекцияЭлементов = ТоварыДерево.ПолучитьЭлементы();
		// Позиционирование курсора в дереве значений.
		Если Не ПустаяСтрока(КлючСтроки) Тогда
			ИдентификаторСтроки = 0;
			ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Товар", ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, Ложь);
			Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецПроцедуры

	&НаСервере
	Процедура ПослатьПисьмоВСлужбуБезопасности()

		УстановитьПривилегированныйРежим(Истина);

		НаименованиеПользователяАдмин = "Администратор";
		АдминПользователь = Справочники.Пользователи.НайтиПоНаименованию(НаименованиеПользователяАдмин);
		Если Не ЗначениеЗаполнено(АдминПользователь) Тогда
		// зафиксируем в журнале регистрации
			ЗаписьЖурналаРегистрации("АРМПриемкаКлумбаОрдерный.ОшибкаОтправкиПочты", УровеньЖурналаРегистрации.Ошибка, , , "Не найден пользователь "
				+ НаименованиеПользователяАдмин);
		Иначе
		// отправим письмо

		// выясним настройки почты для рассылки
			АдминОбъект = АдминПользователь.ПолучитьОбъект();
			ПочтовыйСервер = "";
			ПочтовыйПорт = "";
			ПочтовыйПароль = "";
			СписокРассылкиУведомленийОНепереданныхВодителемПриемщикуТоваров = ""; // список адресов получателей через запятую
			ПочтовыйАдрес = ""; // адрес отправителя
			Для Каждого Стр из АдминОбъект.ДополнительныеРеквизиты Цикл
				Если СтрНайти(Строка(Стр.Свойство), "ПочтовыйСервер") > 0 Тогда
					ПочтовыйСервер = Стр.Значение;
				ИначеЕсли СтрНайти(Строка(Стр.Свойство), "ПочтовыйПорт") > 0 Тогда
					ПочтовыйПорт = Стр.Значение;
				ИначеЕсли СтрНайти(Строка(Стр.Свойство), "ПочтовыйПароль") > 0 Тогда
					ПочтовыйПароль = Стр.Значение;
				ИначеЕсли СтрНайти(Строка(Стр.Свойство), "СписокРассылкиУведомленийОНепереданныхВодителемПриемщикуТоваров") > 0 Тогда
					СписокРассылкиУведомленийОНепереданныхВодителемПриемщикуТоваров = Стр.Значение;
				ИначеЕсли СтрНайти(Строка(Стр.Свойство), "ПочтовыйАдрес") > 0 Тогда
					ПочтовыйАдрес = Стр.Значение;
				КонецЕсли;
			КонецЦикла;

			Если ПочтовыйСервер <> "" Тогда
			// только в этом случае создадим  письмо
				// создаем подключение к почтовому серверу и письмо
				Профиль = Новый ИнтернетПочтовыйПрофиль;
				Профиль.АдресСервераSMTP = ПочтовыйСервер;
				Профиль.АдресСервераPOP3 = "pop.yandex.ru";
				Профиль.ПортSMTP = ПочтовыйПорт; // 25;
				Профиль.ИспользоватьSSLSMTP = Истина;
				Профиль.ПортPOP3 = 995;
				Профиль.ИспользоватьSSLPOP3 = Истина;

				Профиль.Пользователь = ПочтовыйАдрес;
				Профиль.ПользовательSMTP = ПочтовыйАдрес;
				Профиль.Пароль = ПочтовыйПароль;
				Профиль.ПарольSMTP = ПочтовыйПароль;
				Профиль.АутентификацияSMTP = СпособSMTPАутентификации.Login;

				Попытка
					Заголовок = Строка(ТекущаяДата())
						+ " [АРМПриемкаКлумбаОрдерный]: водитель не передал упаковочный лист приемщику";

					Почта = Новый ИнтернетПочта;
					Почта.Подключиться(Профиль);

					Письмо = Новый ИнтернетПочтовоеСообщение;
					Письмо.Тема = Заголовок;
					Письмо.ИмяОтправителя = "Робот 1С:Предприятие";
					Письмо.Отправитель = ПочтовыйАдрес;
					МассивАдресов = СтрРазделить(СписокРассылкиУведомленийОНепереданныхВодителемПриемщикуТоваров, ";", Ложь);

					Для каждого Эл из МассивАдресов Цикл
						Письмо.Получатели.Добавить(СокрЛП(СтрЗаменить(Эл, ";", " ")));
					КонецЦикла;

					Текст = "
						|";
					Текст = Текст + "Рабочее место: " + НастройкиРМК.РабочееМесто
						+ Символы.ПС;
					Текст = Текст + "Пользователь: " + ПараметрыСеанса.ТекущийПользователь
						+ Символы.ПС;
					Текст = Текст + "Заказ на перемещение: " + ДокументОснование
						+ Символы.ПС;
					Текст = Текст + "Документ отгрузки: " + ДокументОтгрузки + Символы.ПС;
					Текст = Текст + "Не переданные упаковочные листы   : " + Символы.ПС
						+ Строка(СписокНепереданныхУЛ) + Символы.ПС;
					Текст = Текст + "Водитель : " + ТекущийВодитель + Символы.ПС;
					Текст = Текст + "Приемщик : " + ТекущийПриемщик + Символы.ПС;

					Письмо.Тексты.Добавить(Текст, ТипТекстаПочтовогоСообщения.ПростойТекст);
					//Письмо.ОбработатьТексты();
					УспехОтправки = Истина;
					Попытка
						ОшибочныеПолучатели = Почта.Послать(Письмо);
					Исключение
						УспехОтправки = Ложь;
						Почта.Отключиться();
						ЗаписьЖурналаРегистрации("АРМПриемкаКлумбаОрдерный.ОшибкаОтправкиПочты", УровеньЖурналаРегистрации.Ошибка, , , "Ошибка Отправки Письма ( ООП )"
							+ ОшибочныеПолучатели);
					КонецПопытки;

					Если УспехОтправки Тогда
						Письмо.Вложения.Очистить();
						Почта.Отключиться();
					КонецЕсли;

				Исключение

					ЗаписьЖурналаРегистрации("АРМПриемкаКлумбаОрдерный.ОшибкаОтправкиПочты", УровеньЖурналаРегистрации.Ошибка, , , "Не получилось отправить письмо");
				КонецПопытки;
			Иначе
				ЗаписьЖурналаРегистрации("АРМПриемкаКлумбаОрдерный.ОшибкаОтправкиПочты", УровеньЖурналаРегистрации.Ошибка, , , "Не получилось отправить письмо о возврате: неверные параметры сервера");
			КонецЕсли;

		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	КонецПроцедуры

	&НаСервере
	Функция ПолучитьМассивСтруктурИзТЗ(Знач ТЗ) Экспорт

		Перем Колонка, МассивСтруктур, стр, СтруктураСтроки;
		МассивСтруктур = Неопределено;

		Если ЗначениеЗаполнено(ТЗ) Тогда
			МассивСтруктур = Новый Массив;
			Для Каждого стр из ТЗ Цикл
				СтруктураСтроки = Новый Структура;
				Для Каждого Колонка из ТЗ.Колонки Цикл
					СтруктураСтроки.Вставить(Колонка.Имя, стр[колонка.Имя]);
				КонецЦикла;
				МассивСтруктур.Добавить(СтруктураСтроки);
			КонецЦикла;
		КонецЕсли;

		Возврат МассивСтруктур;

	КонецФункции

	&НаСервере
	Функция ПолучитьТЗИзФиксированногоМассива(ФиксМассив) Экспорт
		ТЗ = Новый ТаблицаЗначений;
		Если ФиксМассив.Количество() Тогда
			СтруктураСтроки = ФиксМассив[0];
			Для Каждого КлючИЗначение из СтруктураСтроки Цикл
				ТЗ.Колонки.Добавить(КлючИЗначение.Ключ, ПолучитьОписаниеТиповНаСервере(КлючИЗначение.Значение));
			КонецЦикла;
		КонецЕсли;

		Для Каждого ЭлементМассива из ФиксМассив Цикл
			Стр = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(стр, ЭлементМассива);
		КонецЦикла;

		Возврат ТЗ;

	КонецФункции

	&НаСервере
	Функция ПривестиСтрокуКЧислу(ЧислоСтрокой)
		ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
		ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
		Если ЗначениеЧисла = 0 Тогда
			Возврат 0;
		КонецЕсли;
		Возврат ЗначениеЧисла;
	КонецФункции

	&НаКлиенте
	Процедура ПослеЗакрытияВопросаОНепринятыхУЛ(Результат, Параметры) Экспорт

		Если Результат = КодВозвратаДиалога.Да
				ИЛИ Результат = КодВозвратаДиалога.ОК Тогда
			ПерейтиНаСтраницу(Элементы.СтраницаУведомленияОНедостаткеКоробов);
			УстановитьВидимостьДоступность();
		Иначе
			Возврат;
		КонецЕсли;

	КонецПроцедуры
	
// Возвращает результат проверки строки на соответствие регулярному выражению
// 	записанному следующими символами
//	. - любой символ
//	+ - один или более раз, пример ".+" - один или более любой символ.
//	* - ноль или более раз, пример ".*" - любое количество любых символов (даже ни одного).
//	[n-m] - символ от m до n, пример: "[0-9]+" - одна или более цифр(а).
//	\d - цифра, пример \d+ - одна или более цифр(а).
//	\D - не цифра.
//	\s - пробельный символ - ТАБ, пробел, перенос строки, возврат каретки и т.п.
//	\S - непробельный символ.
//	\w - буква, цифра, подчеркивание.
//	\W - не буква, не цифра и не подчеркивание соответственно.
//	^ - начало текста, например "^\d+" - строка начинается с цифры.
//	$ - конец текста, например "\D+$" - строка заканчивается НЕ цифрой.
//	{m,n} - шаблон для от m до n символов, например "\d{2,4}" - от двух до четырех цифр. Можно указать одну и всего цифру для строгого соответвия.
//	\ - экранирует спецсимволы. Например, "\." - символ точки. 
//
// Параметры:
//  Строка       - строка для проверки
//  Фасет 		 - регулярное выражение.
// 
// 
// Возвращаемое значение:
//  Булево  - Истина - строка соответствует шаблону, Ложь - не соответствует.
// 
	&НаСервере
	Функция ПроверитьСтрокуНаСоответствиеРегулярномуВыражению(Строка, Фасет)

		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку("<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
			|<package targetNamespace=""sample-my-package"">
			|<valueType name=""testtypes"" base=""xs:string"">
			|<pattern>" + Фасет + "</pattern>
			|</valueType>
			|<objectType name=""TestObj"">
			|<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
			|</objectType>
			|</package>
			|</Model>");

		Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
		МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
		Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
		Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

		Попытка
			Тест.TestItem = Строка;
			Возврат Истина
		Исключение
			Возврат Ложь
		КонецПопытки;

	КонецФункции

//	&НаКлиенте
//	Процедура Модель(Команда)
//
//		Сообщить(ПроверитьСтроку("01.01.2012", "\d{2}\.\d{2}\.\d{4}"));
//		Сообщить(ПроверитьСтроку("01.01.20121", "\d{2}\.\d{2}\.\d{4}"));
//
//	КонецПроцедуры
	
#КонецОбласти //ПрочиеПроцедурыИФункции