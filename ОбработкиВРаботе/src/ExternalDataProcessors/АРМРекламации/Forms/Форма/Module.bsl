&НаКлиенте
Перем ДатаВремяПоследнегоДействияВАРМе;
&НаКлиенте
Перем КоличествоСекундБездействияВПрограммеПередБлокировкой;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина); 
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	Организация = Справочники.Организации.НайтиПоНаименованию("Долгов Д.В. ИП");
	ПоискНакладной_Префикс = Организация.Префикс+ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	
	ИнициализироватьРабочееМесто();
	
	ОтобратьСписки();
	
	Если Строка(ПолучитьПараметрСеансаНаСервере("ТекущийПользователь")) = "Администратор" Тогда	
		ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		//ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Верх;
	Иначе
		ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;	
	КонецЕсли;	
	ЭтаФорма.Заголовок = "[АРМ рекламации v2.1.1] на рабочем месте " + Строка(ТекущееРабочееМесто) + "[ " + ТекущийРаздел + " ]"; 
	УстановитьПривилегированныйРежим(Ложь);
	
	//ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Замалиев Дамир");
	ЗаполнитьТаблицаТоваровИзСегментаНеПереводимыхВСток();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ЭтаФорма.КлючУникальности = ЭтаФорма.УникальныйИдентификатор;
	
	КолонкаВысота = 2;
	КолонкаШирина = 2;
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
	
	УстановитьВидимостьДоступность();
	
	КоличествоСекундБездействияВПрограммеПередБлокировкой = 300;
	
	ПодключитьОбработчикОжидания("ОбработчикОжидания", 30);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			
			Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка Тогда
				
				ОбработатьШтрихкодыРаспоряжений(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
				
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница =  Элементы.СтраницаРаспределитьПоКачеству Тогда 
				Если Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству Тогда 
					
					
					Если  СтрДлина(Параметр[0]) > 13 Тогда  //длинный шк - шк документа
						УстановитьПриходныйОрдерДляРаспределенияПоКачеству(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));	
						Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) Тогда
							СформироватьКнопкиТоваровПриходаДляВыбора();
						КонецЕсли;	
					ИначеЕсли ЗначениеЗаполнено(ТекущийПриходныйОрдер) //короткий шк - шк товара. Если уже выбран отрдер для распределения, переходим на страницу выбора товара 
						И
						ПроверитьСтрокуНаСоответствиеРегулярномуВыражению(Параметр[0],"\d+") //если шк содержит только цифры - это шк товара, иначе - пользователя
					
						Тогда 
						ОбработатьШтрихкодыТовараНаБрак(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр), Истина);
					КонецЕсли;
					
				ИначеЕсли Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору Тогда 
					
					ОбработатьШтрихкодыТовараНаБрак(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр), Истина);
					
				КонецЕсли;
				
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь Тогда
				
				ОбработатьШтрихкодыПользователя(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
				Если ЗначениеЗаполнено(ТекущийПользователь) Тогда ОтобратьСписки() КонецЕсли;
				
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда
				
				Если Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаСтартПорча Тогда
					
				ИначеЕсли Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча 
					И ТекущаяОперация = "Порча" Тогда
					
					ОбработатьШтрихкодыТовараНаБрак(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр), Истина);
					
				ИначеЕсли Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыКУпаковке Тогда
					
					ДанныеПоШтрихкоду = ПолучитьСтруктуруПоШтрихкодуНоменклатуры(Новый Структура("Штрихкод",Параметр[0]));
					Если СписокТоваров.НайтиСтроки(Новый Структура("Номенклатура,Характеристика", ДанныеПоШтрихкоду.Номенклатура, ДанныеПоШтрихкоду.Характеристика)).Количество() > 0 Тогда
						СформироватьПачкиНаСервере(ДанныеПоШтрихкоду.Номенклатура, ДанныеПоШтрихкоду.Характеристика);
					Иначе
						СообщитьПользователюНаКлиенте("Нет товара по штрихкоду " + Параметр[0] + " на складе");
					КонецЕсли;	

				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущийРаздел = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Отказ = НЕ СанкционированоеЗакрытие;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
	Если ЗакрытьСистему() Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	сс = 2;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	сс = 2;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	сс = 2;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)
	сс = 2;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийЭлементовФормы

	&НаКлиенте
	Процедура СкладПолучательПриИзменении(Элемент)
	
		ОтобратьСписки();
	
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриходныеОрдераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		УстановитьТекущийПриходныйОрдерИТекущийЗаказПоставщику(ВыбраннаяСтрока);
		СформироватьКнопкиТоваровПриходаДляВыбора();
		УстановитьВидимостьДоступность();
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриходныеОрдераПриАктивизацииСтроки(Элемент)
		СсылкаНаПОТ = Неопределено;
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Свойство("Ссылка", СсылкаНаПОТ) Тогда
			
		КонецЕсли;
		
		ОбновитьСписокТоваровРаспределитьПоКачеству(СсылкаНаПОТ);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура СписокОстатковВУпаковкахИлиБезПриИзменении(Элемент)
		
		Элементы.ОстаткиУпаковка.Видимость = СписокОстатковВУпаковкахИлиБез;
		Элементы.ОстаткиКоличествоУпаковокОстаток.Видимость = СписокОстатковВУпаковкахИлиБез;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура СписокПриемкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		СоздатьОрдер(Элемент.ТекущиеДанные.ДокументПоступления);	
		УстановитьВидимостьДоступность();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура СписокПеремещениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		
		СсылкаНаВыбранныйДокумент = Элемент.ТекущиеДанные.Ссылка;
		
		ДополнительныеПараметры = Новый Структура();	
		
		//определение массива наименований элементов формы приходного ордера, которые оставить видимыми,
		//массив передается в форму приходного ордера и в расширении конфигурации обрабатывается - 
		//остаются видимыми только элементы из этого массива
		МассивНаименованийВидимыхЭлементов = Новый Массив;
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ФормаПровестиИЗакрыть");
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "Шапка");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ПодменюПечать");
		
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ГруппаСтраницы");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "СтраницаТовары");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "Товары");
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыНоменклатура");
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыХарактеристика");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыКоличествоУпаковок");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыУпаковкаЕдиницаИзмерения");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыУпаковка");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыНоменклатураЕдиницаИзмерения");
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ГруппаПодвал");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ВсегоМест");
		
		ДополнительныеПараметры.Вставить("МассивНаименованийВидимыхЭлементов", МассивНаименованийВидимыхЭлементов);	
		ДополнительныеПараметры.Вставить("Ключ", СсылкаНаВыбранныйДокумент);
		
		ФормаСоздаваемогоПеремещения = ПолучитьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента",
		ДополнительныеПараметры,ЭтаФорма,,,);
		
		ФормаСоздаваемогоПеремещения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСоздаваемогоПеремещения.ТолькоПросмотр = Истина;
		ФормаСоздаваемогоПеремещения.ИспользоватьПодключаемоеОборудование = Ложь;
		ФормаСоздаваемогоПеремещения.Элементы.ФормаПровестиИЗакрыть.Видимость = Ложь;
		ФормаСоздаваемогоПеремещения.Заголовок = ФормаСоздаваемогоПеремещения.Заголовок 
			+ " " + Строка(ФормаСоздаваемогоПеремещения.СкладОтправитель) 
			+ " -->> " + Строка(ФормаСоздаваемогоПеремещения.Складполучатель); 
		ФормаСоздаваемогоПеремещения.Открыть();
		
		//поменять размер шрифта в кнопке формы "Провести и Закрыть" создаваемого перемещения
		НовыйШрифт = Новый Шрифт(ФормаСоздаваемогоПеремещения.Элементы.ФормаПровестиИЗакрыть.Шрифт,,18);
		ФормаСоздаваемогоПеремещения.Элементы.ФормаПровестиИЗакрыть.Шрифт = НовыйШрифт;
		
		//поменять размер шрифта в таблице формы создаваемого перемещения
		НовыйШрифт = Новый Шрифт(ФормаСоздаваемогоПеремещения.Элементы.Товары.Шрифт,,18);
		ФормаСоздаваемогоПеремещения.Элементы.Товары.Шрифт = НовыйШрифт;
		
		ФормаСоздаваемогоПеремещения.Элементы.Товары.АвтоВводНовойСтроки = Ложь;
		
		ФормаСоздаваемогоПеремещения.Элементы.ТоварыКоличествоУпаковок.Формат = "ЧДЦ=0";
		ФормаСоздаваемогоПеремещения.Элементы.ТоварыКоличествоУпаковок.ФорматРедактирования = "ЧДЦ=0";
		
		Для Каждого Элемент Из ФормаСоздаваемогоПеремещения.Элементы.ПодменюПечать.ПодчиненныеЭлементы Цикл
			Элемент.Видимость = Истина;
		КонецЦикла;	
			
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПодразделениеПриИзменении(Элемент)
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Элементы.ДекорацияПорча.Заголовок = "Считайте штрихкод товара";
		КонецЕсли;
	КонецПроцедуры

#КонецОбласти //ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Команды

#Область Отчеты 

&НаКлиенте
Процедура КомандаШапкаОтчет(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	
	Отбор = Новый Структура("СкладРекламации", СкладОтправитель);
	Отбор.Вставить("ДатаОкончания", КонецДня(ТекущаяДата()));
	Отбор.Вставить("ДатаНачала", НачалоМесяца(ТекущаяДата()));
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытаяФорма = Неопределено;
	ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами("Приемка в рекламации v.1.1", ПараметрыФормы, Истина, ЭтаФорма, ОткрытаяФорма);
	ОткрытаяФорма.КоманднаяПанель.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ГруппаНастройкиОтчета.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ГруппаПрочиеНастройкиОтчета.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ГруппаВариантыОтчета.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ГруппаВывод.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ГруппаПрограммныйИнтерфейс.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ИзменитьФорму.Видимость = Ложь;
	
	ОткрытаяФорма.Элементы.БыстрыеНастройки.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ОтчетТабличныйДокумент.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаШапкаОтчетОстатки(Команда)
	
	ПараметрыФормы = Новый Структура("КлючВарианта", "ОстаткиИДоступностьТоваров");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	
	Отбор = Новый Структура("Склад", СкладОтправитель);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка", 
		ЭтаФорма, "ОстаткиИДоступностьТоваров");
		
	ОткрытаяФорма = ОткрытьФорму("Отчет.ОстаткиИДоступностьТоваров.Форма", 
			ПараметрыФормы, 
			ПараметрыВыполненияКоманды.Источник, 
			ПараметрыВыполненияКоманды.Уникальность, 
			ПараметрыВыполненияКоманды.Окно, 
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
			
	ОткрытаяФорма.КоманднаяПанель.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ОсновнаяКоманднаяПанель.Видимость = Ложь;
	ОткрытаяФорма.Элементы.БыстрыеНастройки.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаШапкаОтчетВедомостьПоТоварамНаСкладах(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	
	
	КлючВарианта = ПолучитьКлючВариантаОтчетаПоНаименованиюНаСервере("Ведомость по товарам на складах - АРМ рекламация");
	ПараметрыФормы.Вставить("КлючВарианта", КлючВарианта);
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка", ЭтаФорма, КлючВарианта );
	ОткрытаяФорма = ОткрытьФорму("Отчет.ВедомостьПоТоварамНаСкладах.Форма", 
			ПараметрыФормы, 
			ПараметрыВыполненияКоманды.Источник, 
			ПараметрыВыполненияКоманды.Уникальность, 
			ПараметрыВыполненияКоманды.Окно, 
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
			
	ОткрытаяФорма.КоманднаяПанель.Видимость = Ложь;
	
	ОткрытаяФорма.Элементы.ГруппаНастройкиОтчета.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ГруппаПрочиеНастройкиОтчета.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ГруппаВариантыОтчета.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ГруппаВывод.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ГруппаПрограммныйИнтерфейс.Видимость = Ложь;
	ОткрытаяФорма.Элементы.ИзменитьФорму.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаШапка(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","Страница")];
	ТекущийРаздел = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	
	Если ТекущийРаздел = "Пользователь" Тогда
		
		ТекущийПользователь = Неопределено;
	
	КонецЕсли;	
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаШапкаПриемка(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","Страница")];
	ТекущийРаздел = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	УстановитьВидимостьДоступность();
		
КонецПроцедуры

&НаКлиенте                                                                                      
Процедура КомандаШапкаОстаткиВУпаковках(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","Страница")];
	ТекущийРаздел = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьПриемку(Команда)

	СоздатьОрдер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНайтиНакладную(Команда)
	СоздатьОрдер(НайтиДокумент());
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСписок(Команда)
	
	Элементы["Список"+ТекущийРаздел].Видимость = НЕ Элементы["Список"+ТекущийРаздел].Видимость;
	Элементы["Декорация"+ТекущийРаздел].Видимость = НЕ Элементы["Список"+ТекущийРаздел].Видимость;
	Если ТекущийРаздел = "Приемка" Тогда
		//Элементы.ГруппаПоискПриемка.Видимость = НЕ Элементы.ГруппаПоискПриемка.Видимость;
	ИначеЕсли ТекущийРаздел = "Порча" Тогда
		Элементы.Подразделение.Видимость = НЕ Элементы.Подразделение.Видимость;
	КонецЕсли;
	
	Элементы.КомандаОткрытьСписок.Заголовок = ?(Элементы["Список"+ТекущийРаздел].Видимость, "Скрыть список", "Показать список");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда
		Если Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча Тогда
			КомандаСформироватьПачки(Команда);
		ИначеЕсли Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыКУпаковке Тогда
			Элементы.страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
		КонецЕсли;	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда	
		Если Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству Тогда
			КомандаГлавноеМеню(Команда);
		ИначеЕсли Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству Тогда	
			//Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству;
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;
			СформироватьКнопкиТоваровПриходаДляВыбора();			
		ИначеЕсли Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору Тогда
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству;
		КонецЕсли;	
	КонецЕсли;	
	
	УстановитьВидимостьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура КомандаГлавноеМеню(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
	ТекущийПриходныйОрдер = Неопределено;
	ТекущийРаздел = Неопределено;
	ТекущийЗаказПоставщику = Неопределено;
	ТекущаяОперация = Неопределено;
	
	ТекущийПриходныйОрдер = Неопределено;
	ПорчаТоваровПоПриходу = ПредопределенноеЗначение("Документ.ПорчаТоваров.ПустаяСсылка");
	ВнутреннееПотреблениеТоваровПоПриходу = ПредопределенноеЗначение("Документ.ВнутреннееПотреблениеТоваров.ПустаяСсылка");
	
	Подразделение = Неопределено;
	ОтобратьСписки();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура BackSpace(Команда)
	ЭтаФорма[ИмяТекущегоРеквизита] = Лев(Строка(ЭтаФорма[ИмяТекущегоРеквизита]), СтрДлина(ЭтаФорма[ИмяТекущегоРеквизита])-1);
	ПересчитатьКоличество();
КонецПроцедуры

&НаКлиенте
Процедура КомандаClear(Команда)
	ЭтаФорма[ИмяТекущегоРеквизита] = 0;
	ПересчитатьКоличество();
КонецПроцедуры

&НаКлиенте
Процедура БукваНажатие(Команда)
	
	Если НЕ ЗначениеЗаполнено(ИмяТекущегоРеквизита) Тогда
		ИмяТекущегоРеквизита = "КоличествоУпаковок0";
	КонецЕсли;	
		
	НовоеЗначение = Число(Строка(ЭтаФорма[ИмяТекущегоРеквизита]) + ЭтаФорма.ТекущийЭлемент.Заголовок);
	
	Если СтрНайти(ИмяТекущегоРеквизита,"КоличествоУпаковок") Тогда
		БазовоеЗначение = НовоеЗначение*ПолучитьКоэффициент(ЭтаФорма[СтрЗаменить(ИмяТекущегоРеквизита,"КоличествоУпаковок","Упаковка")]);
		Если БазовоеЗначение>ЭтаФорма[СтрЗаменить(ИмяТекущегоРеквизита,"КоличествоУпаковок","Реквизит")] Тогда
			Возврат;
		ИначеЕсли БазовоеЗначение = 0 Тогда	
			Возврат;
		КонецЕсли;
		ЭтаФорма[ИмяТекущегоРеквизита] = НовоеЗначение;
		СтрокаТаблицы = СписокТоваров.Получить(Число(СтрЗаменить(ИмяТекущегоРеквизита,"КоличествоУпаковок","")));
		СтрокаТаблицы.КоличествоУпаковок = НовоеЗначение;
	Иначе                                                            
		Если НовоеЗначение > ЭтаФорма.Реквизит0 + Строка(ЭтаФорма[ИмяТекущегоРеквизита]) Тогда
			Возврат;
		КонецЕсли;
		ЭтаФорма[ИмяТекущегоРеквизита] = НовоеЗначение;
		ПересчитатьКоличество();
	КонецЕсли;
	
КонецПроцедуры                                                                                                       

&НаКлиенте
Процедура ПересчитатьКоличество()
	
	ИтогоДо = СписокТоваров.Итог("Количество");
	Индекс = СтрЗаменить(СтрЗаменить(ИмяТекущегоРеквизита,"Реквизит",""),"КоличествоУпаковок","");
	Строка = СписокТоваров.Получить(Число(Индекс));
	Строка.Количество = ЭтаФорма[ИмяТекущегоРеквизита];
	Строка.КоличествоУпаковок = ЭтаФорма[ИмяТекущегоРеквизита];
	ИтогоПосле = СписокТоваров.Итог("Количество");
	
	Строка = СписокТоваров.Получить(0);
	Строка.Количество = Строка.Количество+(ИтогоДо-ИтогоПосле);
	Строка.КоличествоУпаковок = Строка.КоличествоУпаковок+(ИтогоДо-ИтогоПосле);
	
	ЭтаФорма.Реквизит0 = Строка.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ТекущаяДата = ТекущаяДата();
	
	СборкаУпаковокСоздана = Ложь;
	Если ТекущаяОперация = "Пачки" Тогда
		СоздатьСборкаУпаковок(ТекущаяДата,,СборкаУпаковокСоздана);
		Если СборкаУпаковокСоздана Тогда
			ПечатьЭтикеток();
			//СформироватьКнопки();
		КонецЕсли;	
	ИначеЕсли ТекущаяОперация = "РаспределитьПоКачеству" Тогда
		СоздатьСборкаУпаковок(ТекущаяДата,,СборкаУпаковокСоздана, Истина);
		ДобавитьТоварВСписаниеИПорчуПоПриходу(ТекущаяДата); 
		СформироватьКнопкиТоваровПриходаДляВыбора();
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	//УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)

	ПечатьЭтикеток();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьПачки(Команда)
	
	СформироватьКнопки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДокумент(Команда)
	Если ЗначениеЗаполнено(СкладПолучатель) Тогда
		КомандаСоздатьПеремещение(Команда)
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	СанкционированоеЗакрытие = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаШапкаУпаковать(Команда)
	
	КомандаСформироватьПачки(Команда);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
	
	ОткрытьФорму("ВнешняяОбработка.АРМРекламации.Форма.Форма");	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаШапкаРаспределитьПоКачеству(Команда)
	Элементы.Страницы.ТекущаяСтраница = Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","Страница")];
	Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","Страницы")].ТекущаяСтраница = Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","СтраницаСтарт")];
	
	ТекущийРаздел = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КомандаШапкаЗавершитьРаспределениеПриходаПоКачеству(Команда)
	
	ЗавершитьРаспределениеПриходаПоКачествуНаСервере();
	
	ТекущийПриходныйОрдер = Неопределено;
	ТекущийРаздел = Неопределено;
	ТекущийЗаказПоставщику = Неопределено;
	ТекущаяОперация = Неопределено;
	ТекущийПриходныйОрдер = Неопределено;
	
	КомандаГлавноеМеню(Команда);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ДинамическиеЭлементы

&НаСервере
Процедура СформироватьТаблицуТоваровПоКачеству(Данные, ОчиститьТаблицу)
	
	Если ОчиститьТаблицу Тогда
		СписокТоваров.Очистить();
	КонецЕсли;
	
	ГруппаДинамическихЭлементов = Элементы.ГруппаТоварыПорча;
	ТекущаяОперация = "Порча";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыДругогоКачества.НоменклатураБрак КАК Номенклатура,
	|	ТоварыДругогоКачества.ГрадацияКачества КАК Качество,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	0 КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1) КАК Коэффициент,
	|	0 КАК КоличествоУпаковок
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = ТоварыДругогоКачества.Номенклатура
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И ТоварыДругогоКачества.ГрадацияКачества = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ОграниченноГоден)
	|	И ТоварыДругогоКачества.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый),
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1)
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|	0,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	|	0
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Качество УБЫВ";
	
	Запрос.УстановитьПараметр("Подразделение",    Подразделение);
	Запрос.УстановитьПараметр("Штрихкод",         Данные.Штрихкод);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ СписокТоваров Цикл
		Строки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Качество", Строка.Номенклатура, Строка.Характеристика, Строка.Качество));
		Если Строки.Количество() Тогда
			Строки[0].Количество = Строки[0].Количество + Строка.Количество;
			Строки[0].КоличествоУпаковок = Строки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
		КонецЕсли;
	КонецЦикла;
	
		
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();                                                 
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		
		Если Идентификатор Тогда
			ЗаполнитьХарактеристику(Строка, ЭтаФорма["Характеристика0"]);
		КонецЕсли;
		
		ИмяГруппы = "Группа"+Идентификатор;
		СтрокаРодитель = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаДинамическихЭлементов);
		СтрокаРодитель.Заголовок = ?(Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка(), Строка(Строка.Номенклатура)+" БРАК", Строка.Номенклатура);
		СтрокаРодитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		СтрокаРодитель.Высота = 3;
		СтрокаРодитель.РастягиватьПоВертикали = Ложь;
		СтрокаРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		СтрокаРодитель.ОтображатьЗаголовок = Истина;
		СтрокаРодитель.ШрифтЗаголовка = Новый Шрифт("Arial", 16);
		
		ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяГруппы);
		
		СоздатьПоле(Идентификатор,
			"Реквизит"+Идентификатор,  
			Строка.Количество, 
			СтрокаРодитель, 
			НЕ Строка.Качество = Перечисления.ГрадацииКачества.Новый, 
			Новый ОписаниеТипов("Число"),
			,
			"Подключаемая_ПриИзменении", 
			"Подключаемая_АвтоПодбор");
		
		Если Строка.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			ХарактеристикаДоступность = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Строка.Характеристика) Тогда
			ХарактеристикаДоступность = Ложь;
		Иначе
			ХарактеристикаДоступность = Истина;
		КонецЕсли;
		
		СоздатьПоле(Идентификатор,
			"Характеристика"+Идентификатор,  
			Строка.Характеристика, 
			СтрокаРодитель, 
			
			ХарактеристикаДоступность, 
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"),
			,
			, 
			);
	КонецЦикла;
	
	СписокТоваров.Загрузить(ТаблицаЗначений);

	
	Если ТаблицаЗначений.Количество() Тогда
		Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПачкиНаСервере(Номенклатура, Характеристика)
	
	ГруппаДинамическихЭлементов = Элементы.ГруппаТоварыПачки;
	ТекущаяОперация = "Пачки";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Количество,
	|	ТоварыНаСкладахОстатки.Номенклатура.Качество КАК Качество
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК ТоварыНаСкладахОстатки
	|";
	
	
	Запрос.УстановитьПараметр("Склад", СкладОтправитель);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	СписокТоваров.Загрузить(ТаблицаЗначений);
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();                                                  
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		ИмяГруппы = "Группа"+Идентификатор;
		СтрокаРодитель = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаДинамическихЭлементов);
		СтрокаРодитель.Заголовок = Строка.Номенклатура;
		СтрокаРодитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		СтрокаРодитель.Высота = 3;
		СтрокаРодитель.РастягиватьПоВертикали = Ложь;
		СтрокаРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		СтрокаРодитель.ОтображатьЗаголовок = Истина;
		СтрокаРодитель.ШрифтЗаголовка = Новый Шрифт("Arial", 16);
		
		ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяГруппы);
		
		СоздатьПоле(Идентификатор,
		"Реквизит"+Идентификатор,  
		Строка.Количество, 
		СтрокаРодитель, 
		Ложь, 
		Новый ОписаниеТипов("Число"),
		,
		"Подключаемая_ПриИзменении", 
		"Подключаемая_АвтоПодбор",
		20);
		
		Если Строка.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			ХарактеристикаДоступность = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Строка.Характеристика) Тогда
			ХарактеристикаДоступность = Ложь;
		Иначе
			ХарактеристикаДоступность = Истина;
		КонецЕсли;
		СоздатьПоле(Идентификатор,
		"Характеристика"+Идентификатор,  
		Строка.Характеристика, 
		СтрокаРодитель, 
		
		ХарактеристикаДоступность, 
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"),
		,
		, 
		);
		СоздатьДекорацию(Идентификатор,
		"УпаковкаДекорация"+Идентификатор, 
		"Упаковка", 
		ПолучитьСписокУпаковок(Строка.Номенклатура), 
		СтрокаРодитель, 
		Истина, 
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"),
		"ДекорацияПриемкаОбработкаНавигационнойСсылки",
		"Подключаемая_ДекорацияНажатие",
		10);
		СоздатьПереключатель(Идентификатор,
		"Упаковка"+Идентификатор, 
		"Упаковка", 
		ПолучитьСписокУпаковок(Строка.Номенклатура), 
		СтрокаРодитель, 
		Ложь, 
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"),
		"Подключаемая_ПриИзменении",
		,
		20);
		СоздатьПоле(Идентификатор,
		"КоличествоУпаковок"+Идентификатор,  
		0, 
		СтрокаРодитель, 
		Истина, 
		Новый ОписаниеТипов("Число"), 
		,
		,
		"Подключаемая_АвтоПодбор",
		15);
	КонецЦикла;
	
	Если ТаблицаЗначений.Количество() Тогда                    
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда 
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;	
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда 	
			Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча;	
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКнопки()
	
	ГруппаДинамическихЭлементов = Элементы.СтраницыТовараПорча;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
				   |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
				   |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК КоличествоОстаток,
				   |	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК КоличествоУпаковок,
				   |	1 КАК Коэффициент
				   |ИЗ
				   |	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
				   |ГДЕ
				   |	ТоварыНаСкладахОстатки.ВНаличииОстаток > 0";
				   
	Запрос.УстановитьПараметр("Склад", СкладОтправитель);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	СписокТоваров.Загрузить(ТаблицаЗначений);
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		СтрокаРодитель = ПолучитьСоздатьГруппу(Идентификатор, Идентификатор, ГруппаДинамическихЭлементов, "Группа");
		СоздатьКнопку(Идентификатор,
		Строка(Строка.Номенклатура)+" "+Строка(Строка.Характеристика), 
		Строка.Номенклатура,СтрокаРодитель);
	КонецЦикла;
	
	Если ТаблицаЗначений.Количество() Тогда                    
		//Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницыТовараПорча;
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча;
			Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыКУпаковке;
		КонецЕсли;
	Иначе
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
		СообщитьПользователюНаСервере("Нет товаров для упаковки на складе " + СкладОтправитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопку(Идентификатор, ИмяКнопки, Подсказка, Группа, Доступность = Истина)
	
	ИмяКоманды = "КомандаКнопки"+Идентификатор;
	Кмд = ЭтаФорма.Команды.Найти(ИмяКоманды);
	Если Кмд = Неопределено Тогда 
		Кмд = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		Кмд.Действие = "Подключаемая_КомандаКнопки";
		Кмд.Заголовок = "КомандаКнопки";
		Кмд.Подсказка = Подсказка;
	Иначе
		Кмд.Действие = "Подключаемая_КомандаКнопки";
		Кмд.Заголовок = "КомандаКнопки";
		Кмд.Подсказка = Подсказка;
	КонецЕсли;
	
	//Добавляем саму кнопку
	Элемент = ЭтаФорма.Элементы.Добавить("Кнопка"+Идентификатор, Тип("КнопкаФормы"), Группа);
	
	Элемент.Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элемент.Родитель.ОтображатьЗаголовок = Ложь;
	//Элемент.Родитель.Отображение = ОтображениеОбычнойГруппы.Нет;
	Элемент.Заголовок = СтрЗаменить(ИмяКнопки," ",Символы.ПС);
	Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	Элемент.ИмяКоманды = ИмяКоманды;
	Элемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
	//Элемент.Картинка = ?(ЭтоГруппа, БиблиотекаКартинок.ПапкаОткрытая, БиблиотекаКартинок.ЭлементСправочника);
	Элемент.Ширина = 18;
	Элемент.Высота = 5;
	Элемент.Шрифт = Новый Шрифт("Arial", 12, Истина);
	
	Элемент.Доступность = Доступность;
	Если НЕ Элемент.Доступность Тогда
		Элемент.ЦветФона = ЦветаСтиля.НедоступныеДанныеЭДЦвет;
	КонецЕсли;	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы("Кнопка"+Идентификатор);
	//Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПоле(Идентификатор, ИмяРеквизита, Значение, ГруппаРодитель, Доступность, Тип, Заголовок = Неопределено, Обработчик_ПриИзменении = Неопределено, Обработчик_АвтоПодбор = Неопределено, Ширина = Неопределено);
	
	пТекДобРекизит = Новый Массив;
	
	Если СписокУдаляемыхРеквизитов.НайтиСтроки(Новый Структура("Имя", ИмяРеквизита)).Количество() = 0 Тогда
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Тип);
		пТекДобРекизит.Добавить(НовыйРеквизит);
		ИзменитьРеквизиты(пТекДобРекизит,);
		НоваяСтрока = СписокУдаляемыхРеквизитов.Добавить();
		НоваяСтрока.Имя = ИмяРеквизита;
	КонецЕсли;
	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяРеквизита);
	
	//Добавляем саму кнопку
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаРодитель);
	
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Если Ширина = Неопределено Тогда
		Элемент.Ширина = Число(КолонкаШирина);
	Иначе
		Элемент.Ширина = Ширина;
		Элемент.МаксимальнаяШирина = Ширина;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
	КонецЕсли;
	Элемент.Высота = 1;
	Элемент.МаксимальнаяВысота = 1;
	Элемент.АвтоМаксимальнаяВысота = Ложь;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.КнопкаОткрытия = Ложь;
	
	Элемент.ПутьКДанным = ИмяРеквизита;
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Элемент.СписокВыбора.ЗагрузитьЗначения(Значение);
		Элемент.РежимВыбораИзСписка = Ложь;
		Элемент.КнопкаОткрытия = Ложь;
	Иначе
		ЭтаФорма[ИмяРеквизита] = Значение;
	КонецЕсли;
	Элемент.Шрифт = Новый Шрифт("Arial", 16);
	Элемент.ШрифтЗаголовка = Новый Шрифт("Arial", 16);
	Если Заголовок = Неопределено Тогда
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элемент.Заголовок = Заголовок;
	КонецЕсли; 
	
	Если НЕ Обработчик_ПриИзменении = Неопределено Тогда
		Элемент.УстановитьДействие("ПриИзменении", Обработчик_ПриИзменении);
	КонецЕсли;
	
	Если НЕ Обработчик_АвтоПодбор = Неопределено Тогда
		Элемент.УстановитьДействие("АвтоПодбор", Обработчик_АвтоПодбор);
	КонецЕсли;
	
	Элемент.Доступность = Доступность;
	
	Если ИмяРеквизита = "КоличествоУпаковок0" ИЛИ ИмяРеквизита = "Реквизит1" Тогда
		ИмяТекущегоРеквизита = ИмяРеквизита;
		ЭтаФорма.ТекущийЭлемент = Элемент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПереключатель(Идентификатор, ИмяРеквизита, Заголовок, Значение, ГруппаРодитель, Доступность, Тип, Обработчик_ПриИзменении = Неопределено, Обработчик_АвтоПодбор = Неопределено, Ширина = Неопределено);
	
	пТекДобРекизит = Новый Массив;
	
	Если СписокУдаляемыхРеквизитов.НайтиСтроки(Новый Структура("Имя", ИмяРеквизита)).Количество() = 0 Тогда
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Тип);
		пТекДобРекизит.Добавить(НовыйРеквизит);
		ИзменитьРеквизиты(пТекДобРекизит,);
		НоваяСтрока = СписокУдаляемыхРеквизитов.Добавить();
		НоваяСтрока.Имя = ИмяРеквизита;
		//НоваяСтрока.Реквизит = НовыйРеквизит;
	КонецЕсли;
	//НовыйРеквизит = СписокУдаляемыхРеквизитов.Получить(); 	
	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяРеквизита);
	
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаРодитель);
	
	Элемент.ПутьКДанным = ИмяРеквизита;
	
	Элемент.Вид = ВидПоляФормы.ПолеПереключателя;
	Элемент.ВидПереключателя = ВидПереключателя.Тумблер;
	Элемент.СписокВыбора.ЗагрузитьЗначения(Значение);
	
	Для Каждого ЭлементСписка ИЗ Элемент.СписокВыбора Цикл
		ЭлементСписка.Представление = ПолучитьПредставление(ЭлементСписка.Значение);	
	КонецЦикла;
	
	Элемент.Шрифт = Новый Шрифт("Arial", 16);
	Элемент.ШрифтЗаголовка = Новый Шрифт("Arial", 14);
	Элемент.Заголовок = "Упаковка по";
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.КоличествоКолонок = 1;
	
	Если НЕ Обработчик_ПриИзменении = Неопределено Тогда
		Элемент.УстановитьДействие("ПриИзменении", Обработчик_ПриИзменении);
	КонецЕсли;
	
	Элемент.Видимость = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДекорацию(Идентификатор, ИмяРеквизита, Заголовок, Значение, ГруппаРодитель, Доступность, Тип, Обработчик_ПриИзменении = Неопределено, Обработчик_АвтоПодбор = Неопределено, Ширина = Неопределено);
	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяРеквизита);
	
	//Добавляем саму кнопку
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаРодитель);
	
	Элемент.Вид = ВидДекорацииФормы.Картинка;
	Элемент.Гиперссылка = Истина;
	Если Ширина = Неопределено Тогда
		Элемент.Ширина = Число(КолонкаШирина);
	Иначе
		Элемент.Ширина = Ширина;
		Элемент.МаксимальнаяШирина = Ширина;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
	КонецЕсли;
	Элемент.Высота = Число(КолонкаВысота);
	
	Элемент.Шрифт = Новый Шрифт("Arial", 16);
	
	Элемент.Заголовок = "Упаковка";
	Элемент.ТекстНевыбраннойКартинки = ПолучитьПредставление(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	Элемент.РастягиватьПоВертикали = Ложь;
	
	Элемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	
	
	Если НЕ Обработчик_АвтоПодбор = Неопределено Тогда
		Элемент.УстановитьДействие("Нажатие", Обработчик_АвтоПодбор);
	КонецЕсли;
	
	Элемент.Доступность = Доступность;
	Элемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоздатьГруппу(Идентификатор, ИмяКнопки, Родитель, ВидГруппы)
	
 	КоличествоПоВертикали = 4;
	КоличествоПоГоризонтали = 4;
	
	Если ВидГруппы = "Страница" Тогда
		КоличествоВГруппе = КоличествоПоВертикали*КоличествоПоГоризонтали;
		мВидГруппыФормы = ВидГруппыФормы.Страница;
		мГруппировка    = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ВладелецГруппы = Родитель;
	Иначе
		КоличествоВГруппе = КоличествоПоГоризонтали;
		мВидГруппыФормы = ВидГруппыФормы.ОбычнаяГруппа;
		мГруппировка    = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ВладелецГруппы = ПолучитьСоздатьГруппу(Идентификатор, ИмяКнопки, Родитель, "Страница")
	КонецЕсли;
	НомерОбъекта = Цел(Идентификатор/КоличествоВГруппе);
	ИмяГруппы = ВидГруппы+НомерОбъекта;
	ГруппаСтраница = ЭтаФорма.Элементы.Найти(ИмяГруппы);
	
	Если ГруппаСтраница = Неопределено Тогда
		ГруппаСтраница = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ВладелецГруппы);
		ГруппаСтраница.Заголовок = "";// НомерОбъекта;
		ГруппаСтраница.Вид = мВидГруппыФормы;
		ГруппаСтраница.Группировка = мГруппировка;
		//запоминаем имя последней страницы для навигации
		Если ВидГруппы = "Страница" Тогда
			ПоследняяСтраница = ИмяГруппы;
		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяГруппы);
	
	Возврат ГруппаСтраница;
	
КонецФункции

&НаСервере 
Процедура ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяЭлемента = Неопределено, НовыйРеквизит = Неопределено)
	
	Если ИмяЭлемента <> Неопределено Тогда
		СписокУдаляемыхЭлементов.Добавить(ИмяЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПрограммноСозданныеРеквизитыИЭлементы()
	
	//убираем реквизиты формы
	Для каждого ЭлементСписка Из СписокУдаляемыхЭлементов Цикл
		Элемент = Элементы.Найти(ЭлементСписка.Значение);
		Если НЕ Элемент = Неопределено Тогда
			Элементы.Удалить(Элементы[ЭлементСписка.Значение]);
		КонецЕсли;	
	КонецЦикла;
	
	СписокУдаляемыхЭлементов.Очистить();
	Элементы.Нампад.Видимость = Ложь;
	Элементы.Нампад1.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Подключаемая

&НаКлиенте
Процедура Подключаемая_ПриИзменении(Элемент)
	
	Если СтрНайти(Элемент.Имя, "Реквизит") Тогда
		Индекс = СтрЗаменить(Элемент.Имя,"Реквизит","");
		ТекущиеДанные = СписокТоваров.Получить(Число(Индекс));
	ИначеЕсли СтрНайти(Элемент.Имя, "Упаковка") Тогда
		Индекс = СтрЗаменить(Элемент.Имя,"Упаковка","");
		ТекущиеДанные = СписокТоваров.Получить(Число(Индекс));
		ТекущиеДанные.Упаковка = Этаформа["Упаковка"+Индекс];
		Элементы["УпаковкаДекорация"+Индекс].ТекстНевыбраннойКартинки = ПолучитьПредставление(Этаформа["Упаковка"+Индекс]);
		Элемент.Видимость = НЕ Элемент.Видимость;
		Попытка
			Если Строка(ТекущиеДанные.Упаковка) = "шт" Тогда
				КоличествоВУпаковке = 1 
			Иначе	
				КоличествоВУпаковке = Число(стрЗаменить(Сред(Строка(текущиеДанные.Упаковка), СтрНайти(текущиеДанные.Упаковка,"(")+1)," шт)",""));
			КонецЕсли;	
			КоличествоВсего = ЭтаФорма[СтрЗаменить(ИмяТекущегоРеквизита,"КоличествоУпаковок","Реквизит")];
			ЭтаФорма[ИмяТекущегоРеквизита] = Макс(Цел(КоличествоВсего/КоличествоВУпаковке), 0);
			СтрокаТаблицы = СписокТоваров.Получить(Число(СтрЗаменить(ИмяТекущегоРеквизита,"КоличествоУпаковок","")));
			СтрокаТаблицы.КоличествоУпаковок = Макс(Цел(КоличествоВсего/КоличествоВУпаковке), 0);
		Исключение
			сс = 2;
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемая_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ИмяТекущегоРеквизита = Элемент.Имя;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемая_ДекорацияНажатие(Элемент)
	
	Декорация = Элементы[СтрЗаменить(Элемент.Имя,"Декорация","")];
	
	Для Каждого Строка ИЗ СписокТоваров Цикл
		ТекДекорация = Элементы["Упаковка"+СписокТоваров.Индекс(Строка)];
		Если Декорация <> ТекДекорация Тогда
			ТекДекорация.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Декорация.Видимость = НЕ Декорация.Видимость;
	
	ИмяТекущегоРеквизита = СтрЗаменить(Декорация.Имя,"Упаковка","КоличествоУпаковок")
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемая_КомандаКнопки(Команда)
	
	Строка = СписокТоваров.Получить(Число(СтрЗаменить(Команда.Имя,"КомандаКнопки","")));
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда
		СформироватьПачкиНаСервере(Строка.Номенклатура, Строка.Характеристика);
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда
		СформироватьТаблицуТоваровПриходаПоКачеству( Новый Структура("Штрихкод", ПолучитьШтрихкодБазовой(Строка.Номенклатура, Строка.Характеристика)),Истина);
	КонецЕсли;	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Штрихкодирование
&НаКлиенте
Процедура ОбработатьШтрихкодыРаспоряжений(Данные)
	
	МассивСсылок = ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		СоздатьОрдер(МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыТовараДляПечатиЭтикеток(Данные, ОчиститьТаблицу = Истина)
	
	СформироватьТаблицуТоваровПоКачеству(Данные, ОчиститьТаблицу);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыПользователя(Данные)
	
	ПользовательпоШтрихкоду = ПолучитьПользователяПоШтрихкоду(Данные.Штрихкод);
	Если ЗначениеЗаполнено(ПользовательпоШтрихкоду) Тогда
		Если РолиДоступны("КАБС_Рекламант,КАБС рекламант", ПользовательпоШтрихкоду, Истина) Тогда
			ТекущийПользователь = ПользовательпоШтрихкоду;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Пользователь не авторизован.'"));
			
		КонецЕсли;	
	Иначе
		Информация = "[Пользователь не обнаружен!]";
		//ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Пользователь не обнаружен.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователяПоШтрихкоду(Штрихкод)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификационныеДанныеПользователей.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ИдентификационныеДанныеПользователей КАК ИдентификационныеДанныеПользователей
	|ГДЕ
	|	ИдентификационныеДанныеПользователей.Штрихкод = &Штрихкод");
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	УстановитьПривилегированныйРежим(Ложь); 
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьШК(Номенклатура, Характеристика, Упаковка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	|	И ШтрихкодыНоменклатуры.Упаковка = &Упаковка";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий(); 
	Возврат Выборка.Штрихкод;
КонецФункции


&НаСервере
Функция ПолучитьШтрихКодБазовой(Номенклатура, Характеристика)
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	|	И (ШтрихкодыНоменклатуры.Упаковка ЕСТЬ NULL 
	|			ИЛИ ШтрихкодыНоменклатуры.Упаковка.Числитель = 1
	|			ИЛИ ШтрихкодыНоменклатуры.Упаковка = Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))");
	
	Запрос.Параметры.Вставить("Номенклатура", Номенклатура);
	Запрос.Параметры.Вставить("Характеристика", Характеристика);
	ТЗРез = Запрос.Выполнить().Выгрузить();	
	
	УстановитьПривилегированныйРежим(Ложь); //tror20190326
	
	Если ТЗРез.Количество() > 0 Тогда
		Возврат ТЗРез[0].Штрихкод; 					  
	Иначе
		Возврат СоздатьНовыйШтрихкод(Номенклатура, Характеристика); 					  
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция СоздатьНовыйШтрихкод(Номенклатура, Характеристика)
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	КонецЕсли;	 
	
	ЗаписьРегистраШтрихкодыНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	ЗаписьРегистраШтрихкодыНоменклатуры.Номенклатура = Номенклатура;
	ЗаписьРегистраШтрихкодыНоменклатуры.Характеристика = Характеристика;
	ЗаписьРегистраШтрихкодыНоменклатуры.Штрихкод =РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13();
	ЗаписьРегистраШтрихкодыНоменклатуры.Записать();
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПоШтрихкодуНоменклатуры(Данные)
	
	СтруктураДанныхПоШтрихкодуДляВозврата = Новый Структура("Номенклатура, Характеристика, Упаковка, Штрихкод");
	Штрихкод = "";
	Если НЕ ЗначениеЗаполнено(Данные) ИЛИ ТипЗнч(Данные) <> Тип("Структура") 
		ИЛИ Данные.Свойство("Штрихкод", Штрихкод) = Неопределено Тогда
		СообщитьПользователюНаСервере("Неверные данные для запроса информации по штрихкоду!");
		Возврат СтруктураДанныхПоШтрихкодуДляВозврата;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать * Из РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Штрихкод = &Штрихкод";
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанныхПоШтрихкодуДляВозврата, РезультатЗапроса[0]);
	КонецЕсли;	
	
	Возврат СтруктураДанныхПоШтрихкодуДляВозврата;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПеремещениеТоваров.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкодыТовараНаБрак(Данные, ОчиститьТаблицу = Истина)
	
	СтруктураПоШтрихкодуТовара = ПолучитьСтруктуруПоШтрихкодуНоменклатуры(Данные);
	Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) И (НЕ ТоварЕстьВПриходномОрдере(СтруктураПоШтрихкодуТовара) 
		ИЛИ ТоварУжеРаспределен(СтруктураПоШтрихкодуТовара)) Тогда
		СообщитьПользователюНаКлиенте("Товар не найден в текущей приемке или уже обработан");
		Возврат;
	КонецЕсли;	
	
	СформироватьТаблицуТоваровПриходаПоКачеству(Данные, ОчиститьТаблицу);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Печать

&НаКлиенте
Процедура ПечатьЭтикеток()
	
	СписокТоваровДляПечатиЭтикеток.Очистить();
	ТоварДляПечати = СписокТоваровДляПечатиЭтикеток.Добавить();
	ЗаполнитьЗначенияСвойств (ТоварДляПечати, СписокТоваров[0]);
		
	Если (Сред(Строка(СписокТоваров[0].Упаковка),1,2) = "шт" ИЛИ  Сред(Строка(СписокТоваров[0].Упаковка),1,3) = "пуч" ИЛИ Строка(СписокТоваров[0].Упаковка) = "")
		 И СписокТоваров[0].КоличествоУпаковок = 1 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ВводимоеЗначение = 0;
		
		ПараметрыОткрытия.Вставить("ВводимоеЗначение", ВводимоеЗначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаКоличестваВПачке", ЭтотОбъект, ПараметрыОткрытия);
		
		ОткрытьФорму("ВнешняяОбработка.АРМРекламации.Форма.ФормаВопрос", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Элементы.Нампад.Видимость = Ложь;
	Иначе 	 
	
		ПослеВводаКоличестваВПачке(0, Неопределено);			
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаКоличестваВПачке(ВведенноеЗначение, ПараметрыОткрытия) Экспорт
	
	КоличествоДляВыводаНаЭтикетке = ВведенноеЗначение;
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	ИменаМакетов = "ЭтикеткаТовары";
	
	ВыполнитьКомандуПечати(
	"Обработка.ПечатьЭтикетокИЦенников",
	ИменаМакетов,
	ПараметрКоманды,
	ЭтаФорма,
	ПолучитьПараметры("Рекламация", КоличествоДляВыводаНаЭтикетке), "Рекламация");
	
	СформироватьКнопки();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ВладелецФормы, ПараметрыПечати = Неопределено, ПризнакДляПечати) Экспорт
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметры(ДокументДляПечати,  КоличествоДляВыводаНаЭтикетке = 0)
	
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЦенаЗаПачку", Новый ОписаниеТипов("Число"));//tror
	Товары.Колонки.Добавить("ЦенаДополнительно", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ШтрихкодБазовой", Новый ОписаниеТипов("Строка"));//tror20160603
	Товары.Колонки.Добавить("Партия", Новый ОписаниеТипов("Строка"));//zZz 20170224 #666
	Товары.Колонки.Добавить("Качество", Новый ОписаниеТипов("Строка"));//zZz 20170224 #666
	Товары.Колонки.Добавить("НаименованиеСкладаДляЭтикетки", Новый ОписаниеТипов("Строка"));//tror20160603
	Товары.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("ШаблонЭтикеткиПодготовлено", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Весовой", Новый ОписаниеТипов("Булево"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦены", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно", Новый ОписаниеТипов("Дата"));

	Для Каждого СтрокаТЧ ИЗ СписокТоваровДляПечатиЭтикеток Цикл
		
		КолВоЭтикеток = СтрокаТЧ.КоличествоУпаковок;
		Если КолВоЭтикеток > 0 Тогда
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
			НоваяСтрока.Упаковка       = СтрокаТЧ.Упаковка;
			НоваяСтрока.Цена = 0;
			НоваяСтрока.ЦенаЗаПачку = 0;
			НоваяСтрока.ЦенаДополнительно = 0;
			НоваяСтрока.Штрихкод =  ПолучитьШК(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика, СтрокаТЧ.Упаковка);
			НоваяСтрока.ШтрихкодБазовой = ПолучитьШтрихКодБазовой(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
				НоваяСтрока.Штрихкод = НоваяСтрока.ШтрихкодБазовой;		
			КонецЕсли;
			НомерНеделиГода = "";
			НомерПартии = "";
			Если СтрДлина(НеделяГода(ТекущаяДата()))=1 Тогда
				Если ДеньНедели(ТекущаяДата())=7 Тогда // zZz 20180314 #666)
					НомерНеделиГода = "0"+Строка(НеделяГода(ТекущаяДата())+1);
				Иначе 
					НомерНеделиГода = "0"+Строка(НеделяГода(ТекущаяДата())); 
				КонецЕсли; 
			Иначе
				Если ДеньНедели(ТекущаяДата())=7 Тогда 
					НомерНеделиГода = Строка(НеделяГода(ТекущаяДата())+1);
				Иначе 
					НомерНеделиГода = Строка(НеделяГода(ТекущаяДата())); 
				КонецЕсли;
			КонецЕсли;
			
			Если ДеньНедели(ТекущаяДата())<=2 Тогда 
				НомерПартии = "01"; 
			ИначеЕсли ДеньНедели(ТекущаяДата())>2 И ДеньНедели(ТекущаяДата())<7 Тогда
				НомерПартии = "02";
			ИначеЕсли ДеньНедели(ТекущаяДата())=7 Тогда 
				НомерПартии = "01";
			КонецЕсли;
			
			//криптошифрование
			ДеньГода = "";
			Если СтрДлина(ДеньГода(ТекущаяДата())) = 1 Тогда
				ДеньГода = "00"+Строка(ДеньГода(ТекущаяДата()));
			ИначеЕсли СтрДлина(ДеньГода(ТекущаяДата())) = 2 Тогда
				ДеньГода = "0"+Строка(ДеньГода(ТекущаяДата()));
			Иначе
				ДеньГода = Строка(ДеньГода(ТекущаяДата()));
			КонецЕсли;
			НоваяСтрока.Партия = ""+ДеньГода+"/"+НомерНеделиГода+НомерПартии;
			
			//НоваяСтрока.Партия = ""+НомерНеделиГода+НомерПартии;
			НоваяСтрока.Качество = "A";
			НоваяСтрока.НаименованиеСкладаДляЭтикетки = ""; 
			НоваяСтрока.ШаблонЦенника = Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка();//НайтиПоНаименованию("ЦенникБольшойА6 95x138");
			НоваяСтрока.КоличествоЦенников = 0;
			Если КоличествоДляВыводаНаЭтикетке = 0   Тогда 			
				НоваяСтрока.ШаблонЭтикетки = Справочники.ШаблоныЭтикетокИЦенников.НайтиПоНаименованию("Этикетка58х60 Срезка партии");
			Иначе
				НоваяСтрока.ШаблонЭтикетки = Справочники.ШаблоныЭтикетокИЦенников.НайтиПоНаименованию("Этикетка58х60 Срезка партии Рекламация штучный");
				НоваяСтрока.НаименованиеСкладаДляЭтикетки = "" + КоличествоДляВыводаНаЭтикетке + " шт."; 
			КонецЕсли;	
			НоваяСтрока.ШаблонЭтикеткиПодготовлено = Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка();
			НоваяСтрока.КоличествоЭтикеток = КолВоЭтикеток;
			НоваяСтрока.ОстатокНаСкладе = 0;
			НоваяСтрока.Весовой = Ложь;
			НоваяСтрока.ДатаПоследнегоИзмененияЦены = Дата(1,1,1);
			НоваяСтрока.ДатаПоследнегоИзмененияЦеныДополнительно = Дата(1,1,1); 
		КонецЕсли;
	КонецЦикла;
	//
	МаксимальныйКодВесовогоТовара = 99999; 
	УстановитьПривилегированныйРежим(Истина);
	ПравилоВыгрузкиВВесы = Ложь; 
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Товары", ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор));
	ПараметрыПечати.Вставить("Организация",   Организация);
	ПараметрыПечати.Вставить("ПравилоОбмена", Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПустаяСсылка());
	ПараметрыПечати.Вставить("МаксимальныйКодВесовогоТовара", МаксимальныйКодВесовогоТовара);
	ПараметрыПечати.Вставить("ПравилоВыгрузкиВВесы",          ПравилоВыгрузкиВВесы);
	ПараметрыПечати.Вставить("ВидЦены",       СкладОтправитель.УчетныйВидЦены);
	ПараметрыПечати.Вставить("Дата",          ТекущаяДата());
	ПараметрыПечати.Вставить("Склад",         СкладОтправитель); //Справочники.Склады.ПустаяСсылка());
	ПараметрыПечати.Вставить("Подразделение", Подразделение);
	ПараметрыПечати.Вставить("НаименованиеСкладаДляЭтикетки", ДокументДляПечати); 
	ПараметрыПечати.Вставить("ВидЦеныДополнительно", Справочники.ВидыЦен.ПустаяСсылка());
	ПараметрыПечати.Вставить("ДатаДополнительно",    Дата(1,1,1));
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона", Неопределено);
	//
	Возврат ПараметрыПечати;
	
КонецФункции

#КонецОбласти //Печать

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Сервис

&НаСервере
Функция ПолучитьПараметрСеансаНаСервере(НаименованиеПараметра)
	Возврат ПараметрыСеанса[НаименованиеПараметра];
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаВнешнийОтчетОбработкуПоИмениНаСервере(ИмяОтчетаОбработки)
	 
	УстановитьПривилегированныйРежим(Истина); 
	ССылкаНаОбработку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяОтчетаОбработки).Ссылка;
	УстановитьПривилегированныйРежим(Ложь);
	 
	Возврат ССылкаНаОбработку;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьРабочееМесто()
	
	УстановитьПривилегированныйРежим(Истина); 	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиРМК.Ссылка КАК Ссылка,
	|	НастройкиРМК.СкладОтправитель КАК СкладОтправитель,
	|	НастройкиРМК.СкладПолучатель КАК СкладПолучатель
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК
	|ГДЕ
	|	НастройкиРМК.РабочееМесто = &РабочееМесто";
	Запрос.УстановитьПараметр("РабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиРМК = Выборка.Ссылка;
		СкладОтправитель = Выборка.СкладОтправитель;
		ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КАБС_СоответствияСкладов.СкладОтправитель КАК СкладОтправитель,
		|	КАБС_СоответствияСкладов.СкладПолучатель КАК СкладПолучатель
		|ИЗ
		|	РегистрСведений.КАБС_СоответствияСкладов КАК КАБС_СоответствияСкладов
		|ГДЕ
		|	КАБС_СоответствияСкладов.СкладОтправитель = &СкладОтправитель";
		Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
		МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СкладПолучатель");
		Элементы.СкладПолучатель.СписокВыбора.ЗагрузитьЗначения(МассивСкладов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Элементы.Подразделение.СписокВыбора.Вставить(0,Справочники.СтруктураПредприятия.НайтиПоКоду("00-000002"));
	Элементы.Подразделение.СписокВыбора.Вставить(1,Справочники.СтруктураПредприятия.НайтиПоКоду("00-000001"));
	
	ПользовательИБ = ПараметрыСеанса.ТекущийПользователь;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность();
	
	Элементы.КомандаСоздатьДокумент.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПеремещение;
		
	Элементы.КомандаГлавноеМеню.Видимость = НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
	
	Элементы.ГруппаНавигация.Видимость = НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт 
		И НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
	
	Элементы.КомандаОткрытьСписок.Видимость = 
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПеремещение;
		
	Элементы.КомандаСформироватьПачки.Видимость = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт);
	
	Попытка
		Элементы.КомандаШапкаУпаковать.Доступность = ЕстьОстаткиНаСкладе();
	Исключение
		Элементы.КомандаШапкаУпаковать.Доступность = Истина;
	КонецПопытки;		
	
	Элементы.Нампад.Видимость = (Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча) 
		И СписокУдаляемыхРеквизитов.Количество() > 0;
		
	Элементы.КомандаЗакрыть.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
	
	Элементы.Нампад1.Видимость = 
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству И 
		(Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству);
		
	Элементы.КомандаОК.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству И 
		(Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству) ИЛИ 
		(Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча);
		
		Если (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству
			И Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству) Тогда
			
			Элементы.КомандаОК.Заголовок = "Сохранить";
		ИначеЕсли 
			(Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча
			И Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча) Тогда
			
			Элементы.КомандаОК.Заголовок = "Печать";
			//Если СписокТоваров.Количество() > 0 И СписокТоваров.Получить(0).КоличествоУпаковок > 0 Тогда
			//	Элементы.КомандаОК.Доступность = Истина;
			//Иначе
			//	Элементы.КомандаОК.Доступность = Ложь;
			//КонецЕсли;	
		КонецЕсли;	
		
		
	Элементы.КомандаНазад.Видимость = (Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча)
		ИЛИ (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству 
			И 
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству)
		ИЛИ (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству
			И 
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору);
		
	Элементы.КомандаЗавершитьРаспределениеПриходаПоКачеству.Видимость = 
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству
		И 
		(Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству
			И ЗначениеЗаполнено(ТекущийПриходныйОрдер) 
		ИЛИ	Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору
			И ЗначениеЗаполнено(ТекущийПриходныйОрдер) И МожноЗавершитьПриемку()
			)
			;
		
	Информация = "" + ?(ЗначениеЗаполнено(ТекущийПриходныйОрдер), " Ордер: " + Сред(ТекущийПриходныйОрдер,27,25)  ,"") 
		+ ?(ЗначениеЗаполнено(ТекущийЗаказПоставщику), " Ож.Поставка: " + Сред(ТекущийЗаказПоставщику,20,25), "") 
		+ ?(ЗначениеЗаполнено(Подразделение), " Бренд: " + Подразделение, "") ;
	
	Если Строка(ТекущийПользователь) = "Администратор" Тогда
		Элементы.ИнформацияДляОтладки.Видимость = Истина;
		ИнформацияДляОтладки = "ТекущийРаздел: " + ТекущийРаздел + "Текущая Операция: " + ТекущаяОперация;
	Иначе
		Элементы.ИнформацияДляОтладки.Видимость = Ложь;
	КонецЕсли;	
	
	ЭтаФорма.Заголовок = "[АРМ рекламации v2.1.1] на рабочем месте " + Строка(ТекущееРабочееМесто) + 
	?(ЗначениеЗаполнено(СОКРЛП(Строка(ТекущийРаздел))), " { " + ТекущийРаздел + " }", ""); 
	
	// нужно установить "фокус" на видимый элемент, страницы, иначе Обработка
	Если ЭтаФорма.ТекущийЭлемент = Элементы.КомандаНазад И НЕ Элементы.КомандаНазад.Видимость И Элементы.КомандаГлавноеМеню.Видимость Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.КомандаГлавноеМеню;	
	ИначеЕсли Строка(ЭтаФорма.ТекущийЭлемент) = "ОсновнойЭлементФормы" И Элементы.КомандаГлавноеМеню.Видимость Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.КомандаГлавноеМеню;
	ИначеЕсли НЕ Строка(ЭтаФорма.ТекущийЭлемент) = "ОсновнойЭлементФормы" И НЕ ЭтаФорма.ТекущийЭлемент.Видимость 
		И Элементы.КомандаГлавноеМеню.Видимость И НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь Тогда	
		ЭтаФорма.ТекущийЭлемент = Элементы.КомандаГлавноеМеню;
	КонецЕсли;	
	
	//флаг СписокОстатковВУпаковкахИлиБез нужно установить в зависимости от того включена или нет видимость упаковок в списке
	//СписокОстатковВУпаковкахИлиБез = Элементы.ОстаткиУпаковка.Видимость;
	
	Если ЗначениеЗаполнено(ТекущийРаздел) И (ТекущийРаздел = "Приемка" ИЛИ ТекущийРаздел = "Перемещение") Тогда
		Элементы.КомандаОткрытьСписок.Заголовок = ?(Элементы["Список"+ТекущийРаздел].Видимость, "Скрыть список","Показать список");
		Элементы["Декорация"+ТекущийРаздел].Видимость = НЕ Элементы["Список"+ТекущийРаздел].Видимость;
	КонецЕсли;	
	
	Попытка
		ЭтаФорма.Элементы.КомандаШапкаРаспределитьПоКачеству.Доступность = ЕстьОрдераВРаботе();
	Исключение
		
	КонецПопытки;
			
	ЭтаФорма.Элементы.КомандаШапкаПриемка.Доступность = НЕ ЭтаФорма.Элементы.КомандаШапкаРаспределитьПоКачеству.Доступность;
	
	ДатаВремяПоследнегоДействияВАРМе = ТекущаяДата();
	
КонецПроцедуры

&НаСервере
Процедура ОтобратьСписки()
	
	Брак.Отбор.Элементы.Очистить();
	ПорчаТоваров.Отбор.Элементы.Очистить();
	ПеремещенияТоваров.Отбор.Элементы.Очистить();
	
	УстановитьЗначениеЭлементаОтбора(Приемка, "Склад", СкладОтправитель);
	УстановитьЗначениеЭлементаОтбора(Приемка, "КПоступлениюРасход", 0, ВидСравненияКомпоновкиДанных.Равно);
	УстановитьЗначениеЭлементаОтбора(Приемка, "ПринимаетсяПриход", 0, ВидСравненияКомпоновкиДанных.Равно);
	
	ЭлементОтбора = Брак.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладОтправитель;
	
	ЭлементОтбора = ПорчаТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладОтправитель;
	
	ЭлементОтбора = ПеремещенияТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладОтправитель");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладОтправитель;
	//
	ЭлементОтбора = ПеремещенияТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладПолучатель");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладПолучатель;
	
	ЭлементОтбора = Остатки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладОтправитель;
	
	УстановитьЗначениеЭлементаОтбора(ПриходныеОрдера, "Ссылка.Склад", СкладОтправитель);
	УстановитьЗначениеЭлементаОтбора(ПриходныеОрдера, "Ссылка.Проведен", Истина);
	УстановитьЗначениеЭлементаОтбора(ПриходныеОрдера, "Ссылка.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.ВРаботе"));
	УстановитьЗначениеЭлементаОтбора(ПриходныеОрдера, "Ссылка.Исполнитель", ТекущийПользователь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеЭлементаОтбора(ДинамСписок, ИмяЭлементаОтбора, ЗначениеЭлементаОтбора, 
	
	ВидСравниия = Неопределено, Использование = Истина)
	
	Если ВидСравниия = Неопределено Тогда
		ВидСравниия = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;	
	
	ЭлементОтбора = Неопределено;
	Для Каждого Элемент Из ДинамСписок.Отбор.Элементы Цикл
		Если Строка(Элемент.ЛевоеЗначение) = ИмяЭлементаОтбора Тогда
			ЭлементОтбора = Элемент; 		
		КонецЕсли;	
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = ДинамСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
	КонецЕсли;	
	
	ЭлементОтбора.ВидСравнения   = ВидСравниия;
	ЭлементОтбора.Использование  = Использование;
	ЭлементОтбора.ПравоеЗначение = ЗначениеЭлементаОтбора;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровРаспределитьПоКачеству(ПриходныйОрдерСсылка)
	Если НЕ ЗначениеЗаполнено(ПриходныйОрдерСсылка) Тогда
		Дерево = РеквизитФормыВЗначение("СписокТоваровРаспределитьПоКачеству");
		Дерево.Строки.Очистить();
		ЗначениеВРеквизитФормы(Дерево, "СписокТоваровРаспределитьПоКачеству");
		Возврат;
	КонецЕсли;	
	Запрос = Новый Запрос;
	ПолучитьЗапросПоРаспределениюПриходаПоКачеству(Запрос);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1"," 
	|ИТОГИ
	|	МАКСИМУМ(КоличествоПриход),
	|	СУММА(КоличествоУценка),
	|	МАКСИМУМ(КоличествоСписание),
	|	МАКСИМУМ(НоменклатураОприходование),
	|	МАКСИМУМ(ХарактеристикаОприходование)
	|ПО
	|	Номенклатура,
	|	Характеристика");
	
	СвязанныеДокументыСтруктура = ПолучитьСтруктуруДопИнформацииИзКомментарияДокумента(ПриходныйОрдерСсылка);
	Запрос.УстановитьПараметр("ПриходныйОрдерСсылка", ПриходныйОрдерСсылка);
	Запрос.УстановитьПараметр("ПорчаТоваровСсылка", СвязанныеДокументыСтруктура.ПорчаТоваровПоПриходу);
	Запрос.УстановитьПараметр("ВнутреннееПотреблениеТоваровСсылка", СвязанныеДокументыСтруктура.ВнутреннееПотреблениеТоваровПоПриходу);
	
	ДеревоРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗначениеВРеквизитФормы(ДеревоРезультат, "СписокТоваровРаспределитьПоКачеству");
	
Конецпроцедуры

&НаСервере
Функция ЗакрытьСистему()
	
	Возврат НЕ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Администратор");  	
	
КонецФункции	

&НаСервере
Функция ПереключитьРаскладкуDW(Имя) Экспорт
	//возврат Ложь-значит есть ошибки
	
	//Попытка    
	Wrapper = Новый COMОбъект("DynamicWrapper"); 
	Wrapper.Register("USER32.DLL", "ActivateKeyboardLayout", "i=ll", "f=s", "r=l");
	Wrapper.Register("USER32.DLL", "LoadKeyboardLayout", "i=sl", "f=s", "r=t");
	
	//Исключение
	//    Возврат Истина; 
	//КонецПопытки;
	
	SRus = "00000419"; 
	SEng = "00000409";
	
	NRus = 1049; 
	NEng = 1033; 
	
	Попытка
		Если Нрег(Имя) = Нрег("Rus") тогда
			Wrapper.LoadKeyboardLayout(SRus, 1);
			Wrapper.ActivateKeyboardLayout(NRus, 0);    
		Иначе    
			Wrapper.LoadKeyboardLayout(SEng, 1);
			Wrapper.ActivateKeyboardLayout(NEng, 0);    
		КонецЕсли; 
		возврат Ложь;
	Исключение
		Возврат Истина;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьПредставление(Упаковка);
	Если Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
		Возврат "1 шт";
	Иначе
		Возврат ?(Упаковка.Числитель = 0, "1 шт", Строка(Упаковка.Числитель)+" шт");
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементФормыВСписок(Массив, НаименованиеЭлементаФормы)
	
	Попытка
		Массив.Добавить(НаименованиеЭлементаФормы);
	Исключение
		сс=2;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЦены(ТекущаяСтрока, СтруктураПараметровОтбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Цена = ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	Если ЗначениеЗаполнено(Цена) Тогда
		ТекущаяСтрока.Цена = Цена;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦены) Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами(ИмяОтчетаОбработки, ПараметрыОткрытия, ЭтоОтчет, РодительскаяФорма = Неопределено, ОткрытаяФормаОтчета = Неопределено)
	
	ВнешнийОтчетОбработкаДляОткрытияСсылка = ПолучитьСсылкуНаВнешнийОтчетОбработкуПоИмениНаСервере (ИмяОтчетаОбработки);	
	ИмяОбработкиСлужебное = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВнешнийОтчетОбработкаДляОткрытияСсылка);
	Если ЭтоОтчет Тогда
		ОткрытаяФормаОтчета = ОткрытьФорму("ВнешнийОтчет." + ИмяОбработкиСлужебное + ".Форма", ПараметрыОткрытия, РодительскаяФорма);
	Иначе
		ОткрытаяФормаОтчета = ОткрытьФорму("ВнешняяОбработка." + ИмяОбработкиСлужебное + ".Форма", ПараметрыОткрытия, РодительскаяФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СообщитьДляОтладки(ТекстСообщения)
	
	Если Строка(ТекущийПользователь) = "Администратор" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецЕсли;	
	
Конецпроцедуры	

&НаСервере
Процедура СообщитьПользователюНаСервере(ТекстСообщения)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователюНаКлиенте(ТекстСообщения)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
КонецПроцедуры

// Возвращает результат проверки строки на соответствие регулярному выражению
// 	записанному следующими символами
//	. - любой символ
//	+ - один или более раз, пример ".+" - один или более любой символ.
//	* - ноль или более раз, пример ".*" - любое количество любых символов (даже ни одного).
//	[n-m] - символ от m до n, пример: "[0-9]+" - одна или более цифр(а).
//	\d - цифра, пример \d+ - одна или более цифр(а).
//	\D - не цифра.
//	\s - пробельный символ - ТАБ, пробел, перенос строки, возврат каретки и т.п.
//	\S - непробельный символ.
//	\w - буква, цифра, подчеркивание.
//	\W - не буква, не цифра и не подчеркивание соответственно.
//	^ - начало текста, например "^\d+" - строка начинается с цифры.
//	$ - конец текста, например "\D+$" - строка заканчивается НЕ цифрой.
//	{m,n} - шаблон для от m до n символов, например "\d{2,4}" - от двух до четырех цифр. Можно указать одну и всего цифру для строгого соответвия.
//	\ - экранирует спецсимволы. Например, "\." - символ точки. 
//
// Параметры:
//  Строка       - строка для проверки
//  Фасет 		 - регулярное выражение.
// 
// 
// Возвращаемое значение:
//  Булево  - Истина - строка соответствует шаблону, Ложь - не соответствует.
// 
&НаСервере
Функция ПроверитьСтрокуНаСоответствиеРегулярномуВыражению(Строка, Фасет)

		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку("<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
			|<package targetNamespace=""sample-my-package"">
			|<valueType name=""testtypes"" base=""xs:string"">
			|<pattern>" + Фасет + "</pattern>
			|</valueType>
			|<objectType name=""TestObj"">
			|<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
			|</objectType>
			|</package>
			|</Model>");

		Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
		МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
		Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
		Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

		Попытка
			Тест.TestItem = Строка;
			Возврат Истина
		Исключение
			Возврат Ложь
		КонецПопытки;

	КонецФункции

&Наклиенте
Процедура ОбработчикОжидания()
	
	Если Не Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь 
		И ТекущаяДата() - ДатаВремяПоследнегоДействияВАРМе > КоличествоСекундБездействияВПрограммеПередБлокировкой 
		Тогда
		
		ДопПараметры = Новый Структура;
		ОписаниеОповещенияОБлокировке = Новый ОписаниеОповещения("ПослеОтветаНаВопросОБлокировкеАРМа", ЭтаФорма, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещенияОБлокировке, "АРМ рекламации не используется более " 
			+ Цел(КоличествоСекундБездействияВПрограммеПередБлокировкой / 60) + " минут" + Символы.ПС + 
			"               Заблокировать АРМ?            ", РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&Наклиенте
Процедура ПослеОтветаНаВопросОБлокировкеАРМа(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да ИЛИ Результат = КодВозвратаДиалога.Таймаут Тогда
		КомандаШапка(ЭтаФорма.Команды.КомандаШапкаПользователь);
	Иначе
			ДатаВремяПоследнегоДействияВАРМе = ТекущаяДата();
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючВариантаОтчетаПоНаименованиюНаСервере(НаименованиеВариантаОтчета)
	Возврат Справочники.ВариантыОтчетов.НайтиПоНаименованию(НаименованиеВариантаОтчета).КлючВарианта;
КонецФункции	

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область РаспределениеПриходаПоКачеству

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПолучениеДанных
	&НаСервере
	Функция ПолучитьДанныеИзНастроек(НаименованиеНастройки)
	
		//TODO: нужно както хранить настройки для этого и для других АРМ, как вариант - в файле ДополнительныеКонстантыИБ
		//пока так  
		Если НаименованиеНастройки = "СтатьяРасходов Недопоставка товара, выявленная в зоне рекламаций" Тогда
			Возврат ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("MB-000022");
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Функция ЕстьОрдераВРаботе()
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		               |ГДЕ
		               |	ПриходныйОрдерНаТовары.Проведен
		               |	И НЕ ПриходныйОрдерНаТовары.ПометкаУдаления
		               |	И ПриходныйОрдерНаТовары.Склад = &Склад
					   |	И ПриходныйОрдерНаТовары.Исполнитель = &ТекущийПользователь
		               |	И ПриходныйОрдерНаТовары.Статус = &Статус"; 
		Запрос.УстановитьПараметр("Склад", СкладОтправитель);
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("Статус", ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.ВРаботе"));
		РезультатЗапроса = Запрос.Выполнить();
		
		УстановитьПривилегированныйРежим(Ложь);
			
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
		
	КонецФункции

	&НаСервере
	Функция ЕстьОстаткиНаСкладе()
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки";
		Запрос.УстановитьПараметр("Склад", СкладОтправитель);
		Если Запрос.Выполнить().Пустой() Тогда
			Возврат Ложь;
		Иначе	
			Возврат Истина;
		КонецЕсли;	
		
	КонецФункции

	&НаСервере
	Функция ДокументНеПроведен(Распоряжение)
		
		Возврат НЕ Распоряжение.Проведен;
		
	КонецФункции

	&НаСервере
	Функция ТоварУжеРаспределен(Данные)
		
		Если СписокТоваровПрихода.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, РаспределеноПоКачеству", 
			Данные.Номенклатура, Данные.Характеристика, Истина)).Количество() > 0 Тогда
			
			Возврат Истина;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Функция ТоварЕстьВПриходномОрдере(Данные)
		
		Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) И ТекущийПриходныйОрдер.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			Данные.Номенклатура, Данные.Характеристика)).Количество() > 0 Тогда
			
			Возврат Истина;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;		
		
	КонецФункции

	&НаСервере
	Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаОбъект,ИмяРеквизита)
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,ИмяРеквизита);
	КонецФункции

	&НаСервере
	Функция ПолучитьСтруктуруПоПеремещению(Распоряжение)
		
		Основание = Новый Структура;
		Основание.Вставить("Распоряжение", Распоряжение);
		Основание.Вставить("Склад", Распоряжение.СкладПолучатель);
		Основание.Вставить("ДатаПоступления", ТекущаяДата());
		Возврат Основание;
		
	КонецФункции

	&НаСервере
	Функция НайтиДокумент()
		УстановитьПривилегированныйРежим(Истина); 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Номер = &Номер";
		Запрос.УстановитьПараметр("Номер", ПоискНакладной_Префикс+"-"+ПоискНакладной_Номер);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь); 
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Процедура ЗаполнитьХарактеристику(Строка, Наименование)
		
		УстановитьПривилегированныйРежим(Истина); 
		
		Если Строка.Качество = Перечисления.ГрадацииКачества.Новый
			ИЛИ Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка() 
			ИЛИ Строка.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			Возврат;	
		Иначе
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
			|	ХарактеристикиНоменклатуры.Владелец КАК Владелец
			|ИЗ
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|ГДЕ
			|	ХарактеристикиНоменклатуры.Владелец = &Владелец
			|	И ХарактеристикиНоменклатуры.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Владелец", Строка.Номенклатура);
			Запрос.УстановитьПараметр("Наименование", Наименование.Наименование);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Строка.Характеристика = Выборка.Характеристика;		
			КонецЕсли;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь); 
		
	КонецПроцедуры

	&НаСервере
	Функция ПолучитьКоэффициент(Упаковка)
		Если Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
			Возврат 1;
		ИначеЕсли Упаковка.Владелец = ПредопределенноеЗначение("Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения") Тогда	
			Возврат 1;
		Иначе
			Возврат Упаковка.Числитель/Упаковка.Знаменатель;
		КонецЕсли;
	КонецФункции

	&НаСервере
	Функция ПолучитьСписокУпаковок(Номенклатура)
		
		УстановитьПривилегированныйРежим(Истина); 
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	УпаковкиЕдиницыИзмерения.Числитель";
		
		Если Номенклатура.НаборУпаковок.Наименование <> "Индивидуальный набор для номенклатуры" Тогда
			Запрос.УстановитьПараметр("Владелец", Номенклатура.НаборУпаковок);
		Иначе		
			Запрос.УстановитьПараметр("Владелец", Номенклатура);
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка") ;
		
		УстановитьПривилегированныйРежим(Ложь); 
		
		ЕстьЕдиничнаяУпаковка = Ложь;
		Для Каждого Элемент Из РезультатЗапроса Цикл
			Если Элемент.Числитель = 1 Тогда
				ЕстьЕдиничнаяУпаковка = Истина;
			КонецЕсли;	
		КонецЦикла;
		
		Если НЕ ЕстьЕдиничнаяУпаковка Тогда
			РезультатЗапроса.Вставить(0,Номенклатура.ЕдиницаИзмерения);	
		КонецЕсли;
		
		Возврат РезультатЗапроса;
		
	КонецФункции

	&НаСервере
	Функция РолиДоступны(ИменаРолей, Пользователь,  ПривилегированныйРежим = Ложь)
		
		//Возврат Пользователи.РолиДоступны(ИменаРолей, Пользователь,  ПривилегированныйРежим);
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ГруппыПользователейСостав.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втГруппыПользователя
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Ссылка КАК Ссылка,
		|	ГруппыДоступаПользователи.Пользователь КАК Пользователь,
		|	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль,
		|	ПрофилиГруппДоступаРоли.Роль КАК Роль
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|ГДЕ
		|	(ГруппыДоступаПользователи.Пользователь = &Пользователь
		|			ИЛИ ГруппыДоступаПользователи.Пользователь В
		|				(ВЫБРАТЬ
		|					втГруппыПользователя.Ссылка
		|				ИЗ
		|					втГруппыПользователя))
		|	И ПрофилиГруппДоступаРоли.Роль В(&СписокРолей)";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		СписокРолей = ПолучитьСписокРолейИзСтрокиСИменами(ИменаРолей); 
		Запрос.УстановитьПараметр("СписокРолей", СписокРолей);
		Результат = Запрос.Выполнить();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Результат.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
		
	КонецФункции

	&НаСервере
	Функция ПолучитьСписокРолейИзСтрокиСИменами(ИменаРолей)
		
		СписокРолей = Новый СписокЗначений;
		МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРолей,","); 
		
		Для Каждого ИмяРоли Из МассивИмен Цикл
			НайденнаяРоль = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию(ИмяРоли + " (Роль)");
			Если НайденнаяРоль <> Неопределено И ЗначениеЗаполнено(НайденнаяРоль) Тогда
				СписокРолей.Добавить(НайденнаяРоль);				
			КонецЕсли;	
		КонецЦикла;	
		
		Возврат СписокРолей;
		
	КонецФункции

	&НаСервере
	Функция ТоварыПриходногоОрдера()
		
		Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) И ТекущийПриходныйОрдер.Товары.Количество() > 0 Тогда 
			
			ШтрихкодПервойСтроки = ПолучитьШтрихкодБазовой(ТекущийПриходныйОрдер.Товары[0].Номенклатура, ТекущийПриходныйОрдер.Товары[0].Характеристика);
			Возврат Новый Структура("КоличествоСтрок, ШтрихкодПервойСтроки", ТекущийПриходныйОрдер.Товары.Количество(),	ШтрихкодПервойСтроки );
			
		КонецЕсли;
		
		Возврат Новый Структура("КоличествоСтрок, ШтрихкодПервойСтроки", 0, "");
		
	КонецФункции

	&НаСервере
	Процедура ЗаполнитьТаблицаТоваровИзСегментаНеПереводимыхВСток()
		
		УстановитьПривилегированныйРежим(Истина);
		
		СегментТоваровНеПереводимыхВСток = Неопределено;
		
		Если НЕ ЗначениеЗаполнено(СегментТоваровНеПереводимыхВСток) Тогда
			
			Если Не ЗначениеЗаполнено(СегментТоваровНеПереводимыхВСток) Тогда
				СегментТоваровНеПереводимыхВСток = Справочники.СегментыНоменклатуры.НайтиПоКоду("MB-00000111", Ложь);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СегментТоваровНеПереводимыхВСток) Тогда 
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ТаблицаНоменклатурыСегмента = СегментыСервер.ТаблицаЗначений(СегментТоваровНеПереводимыхВСток);
		ТаблицаНоменклатурыСегмента.Свернуть("Номенклатура");	
		ТаблицаТоваровИзСегментаНеПереводимыхВСток.Загрузить(ТаблицаНоменклатурыСегмента);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецПроцедуры

	&НаКлиенте
	Функция МожноЗавершитьПриемку()
		Возврат Истина;
	КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СозданиеДокументов

&НаСервере
Процедура СоздатьСборкаУпаковок(ТекущаяДата, ДокОснование = Неопределено, СборкаСоздана = Истина, ЭтоСборкаУпаковокПоРаспределениюПрихода = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДокумент = Документы.КАБС_СборкаУпаковок.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДата;
	
	
	Если ДокОснование = Неопределено Тогда
		
		Если ЭтоСборкаУпаковокПоРаспределениюПрихода Тогда //сборки упаковок созданные при распределении по качеству проводятся при завершении приемки
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;	
	 
		Если ТекущаяОперация = "Пачки" Тогда 
			НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих;
		Иначе
			НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие;
		КонецЕсли;
		
		НовыйДокумент.Склад = СкладОтправитель;
		ЗаполнитьЗначенияСвойств(НовыйДокумент, СписокТоваров.Получить(0));
		
		НовыйДокумент.КоличествоУпаковок = СписокТоваров.Итог("КоличествоУпаковок");
		
		Для Каждого Строка ИЗ СписокТоваров Цикл
			Если Строка.Количество И Строка.КоличествоУпаковок И НЕ Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка() Тогда
				НоваяСтрока = НовыйДокумент.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);	
				Если ТекущаяОперация = "Пачки" Тогда 
					НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка), 
						?(НоваяСтрока.Упаковка.Числитель = 0, 1, НоваяСтрока.Упаковка.Числитель), 1);
					НоваяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		НовыйДокумент.Количество = НовыйДокумент.КоличествоУпаковок * 
			?(ЗначениеЗаполнено(НовыйДокумент.Упаковка), ?(НовыйДокумент.Упаковка.Числитель = 0,1,НовыйДокумент.Упаковка.Числитель), 1);
		
	Иначе
		//если передан документ ПОТ или перемещение создается СборкаУпаковок
		//для оприходования или списания штучных упаковок из ПОТ, рекизиты документа не заполняются
		НовыйДокумент.Склад = СкладОтправитель;
		
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие;
			НовыйДокумент.ДокументПриемки = ТекущийПриходныйОрдер;
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			
		ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда	
			НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих;
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;	
		
		Для Каждого СтрокаДокОсн Из ДокОснование.Товары Цикл
			
			НоваяСтрока = НовыйДокумент.Товары.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокОсн);
			НоваяСтрока.Качество = НоваяСтрока.Номенклатура.Качество;
			
			Если НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				НоваяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;
	
	
	Если НовыйДокумент.Товары.Итог("Количество") > 0 Тогда
		
		НовыйДокумент.Записать(РежимЗаписи, РежимПроведенияДокумента.Оперативный);
		СборкаСоздана = Истина;
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СборкаУпаковокПоПриходу = НовыйДокумент.Ссылка;
		КонецЕсли;
		
		Если ЭтоСборкаУпаковокПоРаспределениюПрихода Тогда
			СписокСборокУпаковокПоРаспределениюПрихода.Добавить(НовыйДокумент.Ссылка);
			ОбновитьИнформациюОСвязанныхДокументахВКомментарииПриходногоОрдера();
		КонецЕсли;	
	Иначе
		СборкаСоздана = Ложь;
	КонецЕсли;	
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();                                                   
	
	Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча;
	
	Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПеремещение(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СкладОтправитель", СкладОтправитель);
	ПараметрыОткрытия.Вставить("СкладПолучатель", СкладПолучатель);
	ПараметрыОткрытия.Вставить("Организация", Организация);
	
	Основание = Неопределено;	
	
	ДополнительныеПараметры = Новый Структура("Основание", Основание);	
	
	//определение массива наименований элементов формы приходного ордера, которые оставить видимыми,
	//массив передается в форму приходного ордера и в расширении конфигурации обрабыатывается - 
	//остаются видимыми только элементы из этого массива
	МассивНаименованийВидимыхЭлементов = Новый Массив;
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ФормаПровестиИЗакрыть");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ФормаЗакрытьБезСохранения");
			
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "Шапка");
	
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ГруппаСтраницы");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "СтраницаТовары");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "Товары");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыДобавить");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыУдалить");
	
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыНоменклатура");
	
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыХарактеристика");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыКоличествоУпаковок");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыУпаковкаЕдиницаИзмерения");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыУпаковка");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыНоменклатураЕдиницаИзмерения");
	
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ГруппаПодвал");
	ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ВсегоМест");
	
	ДополнительныеПараметры.Вставить("МассивНаименованийВидимыхЭлементов", МассивНаименованийВидимыхЭлементов);	
	
	ФормаСоздаваемогоПеремещения = ПолучитьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента",
	ДополнительныеПараметры,ЭтаФорма,,,);
	
	ДополнительныеПараметры.Вставить("СозданнаяФормаПеремещения", ФормаСоздаваемогоПеремещения);	
	
	ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыСоздаваемогоПеремещения", 
	ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаСоздаваемогоПеремещения.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытииФормы;
		
	ФормаСоздаваемогоПеремещения.Объект.Ответственный = ТекущийПользователь;
	ФормаСоздаваемогоПеремещения.Объект.СкладОтправитель = СкладОтправитель;
	ФормаСоздаваемогоПеремещения.Объект.СкладПолучатель = СкладПолучатель;
	ФормаСоздаваемогоПеремещения.СкладПолучатель = СкладПолучатель;
	ФормаСоздаваемогоПеремещения.Объект.Организация = Организация;
	ФормаСоздаваемогоПеремещения.Объект.ВидЦены = ПолучитьЗначениеРеквизитаОбъектаНаСервере(СкладОтправитель,"УчетныйВидЦены");
	ФормаСоздаваемогоПеремещения.ВидЦены = ФормаСоздаваемогоПеремещения.Объект.ВидЦены;
	
	ФормаСоздаваемогоПеремещения.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Отгружено");
	
	ФормаСоздаваемогоПеремещения.Элементы.Ответственный.Доступность = Ложь;
	
	ФормаСоздаваемогоПеремещения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ФормаСоздаваемогоПеремещения.Открыть();
	
	ФормаСоздаваемогоПеремещения.Элементы.ТоварыВидЦены.ТолькоПросмотр = Истина;
	ФормаСоздаваемогоПеремещения.Элементы.ТоварыЦена.ТолькоПросмотр = Истина;
	ФормаСоздаваемогоПеремещения.Элементы.ТоварыСумма.ТолькоПросмотр = Истина;
	
	//поменять размер шрифта в кнопке формы "Провести и Закрыть" создаваемого перемещения
	НовыйШрифт = Новый Шрифт(ФормаСоздаваемогоПеремещения.Элементы.ФормаПровестиИЗакрыть.Шрифт,,18);
	ФормаСоздаваемогоПеремещения.Элементы.ФормаПровестиИЗакрыть.Шрифт = НовыйШрифт;
	
	//поменять размер шрифта в таблице формы создаваемого перемещения
	НовыйШрифт = Новый Шрифт(ФормаСоздаваемогоПеремещения.Элементы.Товары.Шрифт,,18);
	ФормаСоздаваемогоПеремещения.Элементы.Товары.Шрифт = НовыйШрифт;
	
	ФормаСоздаваемогоПеремещения.Элементы.ФормаЗакрытьБезСохранения.Видимость = Истина;
	//поменять размер шрифта в кнопке формы "Провести и Закрыть" создаваемого перемещения
	НовыйШрифт = Новый Шрифт(ФормаСоздаваемогоПеремещения.Элементы.ФормаЗакрытьБезСохранения.Шрифт,,18);
	ФормаСоздаваемогоПеремещения.Элементы.ФормаЗакрытьБезСохранения.Шрифт = НовыйШрифт;
	
	ФормаСоздаваемогоПеремещения.Элементы.ТоварыУдалить.ТолькоВоВсехДействиях = Ложь;
	ФормаСоздаваемогоПеремещения.Элементы.ТоварыУдалить.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	ФормаСоздаваемогоПеремещения.Элементы.Товары.АвтоВводНовойСтроки = Ложь;
	
	ФормаСоздаваемогоПеремещения.Элементы.ТоварыКоличествоУпаковок.Формат = "ЧДЦ=0";
	ФормаСоздаваемогоПеремещения.Элементы.ТоварыКоличествоУпаковок.ФорматРедактирования = "ЧДЦ=0";
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСоздаваемогоПеремещения(Параметр1, Параметр2) Экспорт
	
	СсылкаНаСозданныйПеремещение = Параметр2.СозданнаяФормаПеремещения.Объект.Ссылка;
	
	//получили ссылку на созданный документ ПеремещениеТоваров, теперь по нему нужно создать СборукУпаковок, 
	//чтобы списать перемещаемые упаковки по регистру ТоварыВУпаковкахНаСкладах
	ПослеЗакрытияФормыСоздаваемогоПеремещенияНаСервере(СсылкаНаСозданныйПеремещение);
	КомандаГлавноеМеню(Неопределено);
	
КонецПроцедуры	

&НаСервере
Процедура ПослеЗакрытияФормыСоздаваемогоПеремещенияНаСервере(ПеремещениеСсылка)
	
	Если НЕ ЗначениеЗаполнено(ПеремещениеСсылка) 
		ИЛИ ТипЗнч(ПеремещениеСсылка) <> Тип("ДокументСсылка.ПеремещениеТоваров") 
		ИЛИ НЕ ПеремещениеСсылка.Проведен
		Тогда 
		Возврат
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдер(Распоряжение = Неопределено, СсылкаНаРанееСозданныйПОТ = Неопределено)
	
	Если Распоряжение = Неопределено И СсылкаНаРанееСозданныйПОТ = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ЕстьОрдераВРаботе() Тогда
		СообщитьПользователюНаКлиенте("Не закончено распределение по качеству предыдущего перемещения!");
		Возврат;
	КонецЕсли;	
	
	Если Распоряжение <> Неопределено И ДокументНеПроведен(Распоряжение) Тогда
		Возврат	
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка Тогда
		
		//определение массива наименований элементов формы приходного ордера, которые оставить видимыми,
		//массив передается в форму приходного ордера и в расширении конфигурации обрабыатывается - 
		//остаются видимыми только элементы из этого массива
		
		МассивНаименованийВидимыхЭлементов = Новый Массив;
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ФормаПровестиИЗакрыть");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ФормаЗакрытьБезСохранения");
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "Шапка");
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ГруппаСтраницы");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ГруппаТовары");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "Товары");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыГруппаНоменклатураУпаковочныйЛист");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыГруппаНоменклатура");
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыНоменклатура");
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыХарактеристика");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыКоличествоУпаковок");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыУпаковкаЕдиницаИзмерения");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыУпаковка");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ТоварыНоменклатураЕдиницаИзмерения");
		
		
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ГруппаПодвал");
		ДобавитьЭлементФормыВСписок(МассивНаименованийВидимыхЭлементов, "ВсегоМест");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивНаименованийВидимыхЭлементов", МассивНаименованийВидимыхЭлементов);	
		
		Если СсылкаНаРанееСозданныйПОТ <> Неопределено Тогда //открываем форму записанного ранее Приходного ордера, чтобы пользователь заполнил количество
			ДополнительныеПараметры.Вставить("Ключ", СсылкаНаРанееСозданныйПОТ);	
		Иначе
			Основание = ПолучитьСтруктуруПоПеремещению(Распоряжение);	
			ДополнительныеПараметры.Вставить("Основание", Основание);	
		КонецЕсли;
		
		ФормаСоздаваемогоПриходногоОрдера = ПолучитьФорму("Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента",
			ДополнительныеПараметры,ЭтаФорма,,,);
		ДополнительныеПараметры.Вставить("СозданнаяФормаПОТ", ФормаСоздаваемогоПриходногоОрдера);	
			
		ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыСоздаваемогоПриходногоОрдера", 
			ЭтотОбъект, ДополнительныеПараметры);
			
		ФормаСоздаваемогоПриходногоОрдера.Объект.Ответственный = ТекущийПользователь;
		ФормаСоздаваемогоПриходногоОрдера.Элементы.Ответственный.Доступность = Ложь;
		ФормаСоздаваемогоПриходногоОрдера.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.ВРаботе");
		ФормаСоздаваемогоПриходногоОрдера.Элементы.Статус.Доступность = Ложь;
		ФормаСоздаваемогоПриходногоОрдера.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытииФормы;
		
		ФормаСоздаваемогоПриходногоОрдера.Автотест_ЗаполнитьПоРаспоряжениюЗавершение(ТекущаяДата(), 
			Новый Структура("ВидЗаполнения", "НоменклатураКоличество"));
			
		Если ФормаСоздаваемогоПриходногоОрдера.Объект.Товары.Количество() > 0 Тогда	
			ФормаСоздаваемогоПриходногоОрдера.Объект.Исполнитель = Текущийпользователь;			
			ФормаСоздаваемогоПриходногоОрдера.Объект.Ответственный = Текущийпользователь;
			ФормаСоздаваемогоПриходногоОрдера.Элементы.Товары.ИзменятьСоставСтрок = Ложь;		
			ФормаСоздаваемогоПриходногоОрдера.ИспользоватьПодключаемоеОборудование = Ложь;
			//обнуление факт количества
			Для Каждого СтрокаОрдера Из ФормаСоздаваемогоПриходногоОрдера.Объект.Товары Цикл
				СтрокаОрдера.КоличествоУпаковок = 0;
				СтрокаОрдера.Количество = 0;
			КонецЦикла;	
			
			ФормаСоздаваемогоПриходногоОрдера.Объект.ВсегоМест = 0;
			
			ФормаСоздаваемогоПриходногоОрдера.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаСоздаваемогоПриходногоОрдера.Элементы.ТоварыКоличествоУпаковок.Формат = "ЧДЦ=0";
			ФормаСоздаваемогоПриходногоОрдера.Элементы.ТоварыКоличествоУпаковок.ФорматРедактирования = "ЧДЦ=0";
			
			//поменять размер шрифта в кнопке формы "Провести и Закрыть" создаваемого перемещения
			НовыйШрифт = Новый Шрифт(ФормаСоздаваемогоПриходногоОрдера.Элементы.ФормаПровестиИЗакрыть.Шрифт,,18);
			ФормаСоздаваемогоПриходногоОрдера.Элементы.ФормаПровестиИЗакрыть.Шрифт = НовыйШрифт;
			
			
			//поменять размер шрифта в таблице формы создаваемого перемещения
			НовыйШрифт = Новый Шрифт(ФормаСоздаваемогоПриходногоОрдера.Элементы.Товары.Шрифт,,18);
			ФормаСоздаваемогоПриходногоОрдера.Элементы.Товары.Шрифт = НовыйШрифт;
			
			ФормаСоздаваемогоПриходногоОрдера.Элементы.ФормаЗакрытьБезСохранения.Видимость = Истина;
			
			ФормаСоздаваемогоПриходногоОрдера.Открыть();
			
			ФормаСоздаваемогоПриходногоОрдера.Элементы.ФормаЗакрытьБезСохранения.Видимость = Истина;
			НовыйШрифт = Новый Шрифт(ФормаСоздаваемогоПриходногоОрдера.Элементы.ФормаЗакрытьБезСохранения.Шрифт,,18);
			ФормаСоздаваемогоПриходногоОрдера.Элементы.ФормаЗакрытьБезСохранения.Шрифт = НовыйШрифт;
			
			ФормаСоздаваемогоПриходногоОрдера.Элементы.ТоварыНоменклатура.ТолькоПросмотр = Истина;
			ФормаСоздаваемогоПриходногоОрдера.Элементы.ТоварыХарактеристика.ТолькоПросмотр = Истина;
			ФормаСоздаваемогоПриходногоОрдера.Элементы.ТоварыУпаковка.ТолькоПросмотр = Истина;
			
			
		Иначе
			СообщитьПользователюНаКлиенте("Нет товаров к приемке по выбранному перемещению! " + Строка(Распоряжение));
		КонецЕсли;	
			
	КонецЕсли;
	
	ФормаСоздаваемогоПриходногоОрдера = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСоздаваемогоПриходногоОрдера(Параметр1, Параметр2) Экспорт
	
	СсылкаНаСозданныйПОТ = Параметр2.СозданнаяФормаПОТ.Объект.Ссылка;
	
	//получили ссылку на созданный ПОТ в статусе "ВРаботе", теперь его сразу нужно распределить по качеству 
	ПослеЗакрытияФормыСоздаваемогоПриходногоОрдераНаСервере(СсылкаНаСозданныйПОТ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияФормыСоздаваемогоПриходногоОрдераНаСервере(СсылкаНаСозданныйПОТ)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаСозданныйПОТ) 
		ИЛИ ТипЗнч(СсылкаНаСозданныйПОТ) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		ИЛИ СсылкаНаСозданныйПОТ.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.ВРаботе") Тогда 
		Возврат
	КонецЕсли;
	
	УстановитьТекущийПриходныйОрдерИТекущийЗаказПоставщику(СсылкаНаСозданныйПОТ);
	СоздатьСборкаУпаковок(ТекущаяДата(), СсылкаНаСозданныйПОТ); 
	СформироватьКнопкиТоваровПриходаДляВыбора();	
	СсылкаНаСозданныйПОТ.ПолучитьОбъект().Разблокировать();
	
КонецПроцедуры	

#КонецОбласти //СозданиеДокументов

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СвязьПриходногоОрдераСписанияИПорчи

&НаСервере
Функция ПолучитьСтруктуруИзСтроки(СтрокаВнутр)
	Если ЗначениеЗаполнено(СОКРЛП(СтрокаВнутр)) Тогда
		Возврат ЗначениеИзСтрокиВнутр(СтрокаВнутр);
	Иначе
		Возврат Новый Структура("ПорчаТоваровПоПриходу, ВнутреннееПотреблениеТоваровПоПриходу, СборкаУпаковокПоПриходу", 
			ПредопределенноеЗначение("Документ.ПорчаТоваров.ПустаяСсылка"), 
			ПредопределенноеЗначение("Документ.ВнутреннееПотреблениеТоваров.ПустаяСсылка"),
			ПредопределенноеЗначение("Документ.КАБС_СборкаУпаковок.ПустаяСсылка"));
	КонецЕсли;	
КонецФункции	

&НаСервере
Процедура ДобавитьТоварВСписаниеИПорчуПоПриходу(ТекущаяДата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПорчаТоваровПоПриходу) Тогда
		ДокументОбъектПорча = ПорчаТоваровПоПриходу.ПолучитьОбъект();
	Иначе
		ДокументОбъектПорча = Документы.ПорчаТоваров.СоздатьДокумент();
	КонецЕсли;

	ДокументОбъектПорча.Дата = ТекущаяДата;
	ДокументОбъектПорча.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("Порча товара за счет поставщика");
	ДокументОбъектПорча.Склад = СкладОтправитель;
	ДокументОбъектПорча.АналитикаРасходов = ТекущийЗаказПоставщику;
	ДокументОбъектПорча.ВидЦены = СкладОтправитель.УчетныйВидЦены;
	ДокументОбъектПорча.Организация = Организация;
	ДокументОбъектПорча.Ответственный = ТекущийПользователь;
	ДокументОбъектПорча.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен;
	ДокументОбъектПорча.Комментарий = "#АРМ Рекламации: Создан при распределении товаров приходного ордера по качеству";
	
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка");
	СтруктураПараметровОтбора.ВидЦены = СкладОтправитель.УчетныйВидЦены;
	СтруктураПараметровОтбора.Валюта = СкладОтправитель.УчетныйВидЦены.ВалютаЦены;
	СтруктураПараметровОтбора.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	СтруктураПараметровОтбора.Дата = ТекущаяДата;
	
	Для Каждого Строка ИЗ СписокТоваров Цикл 
		Если Строка.Качество = Перечисления.ГрадацииКачества.Новый Тогда
			НоменклатураНовый = Строка.Номенклатура;
			ХарактеристикаНовый = Строка.Характеристика;
		ИначеЕсли НЕ Строка.Количество = 0 Тогда
			Если Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка() Тогда
				
				ДобавитьТоварВоВнутреннееПотреблениеТоваровПоПриходу(Строка, ТекущаяДата); 
				
			ИначеЕсли НЕ Строка.Качество = Перечисления.ГрадацииКачества.Новый Тогда
				нс = ДокументОбъектПорча.Товары.НайтиСтроки(
					Новый Структура("Номенклатура, Характеристика, НоменклатураОприходование, ХарактеристикаОприходование",
						НоменклатураНовый, ХарактеристикаНовый, Строка.Номенклатура, Строка.Характеристика));
						
				Если нс.Количество() = 1 Тогда
					НоваяСтрока = нс[0];
				Иначе
					НоваяСтрока = ДокументОбъектПорча.Товары.Добавить();	
				КонецЕсли;	
				
				НоваяСтрока.Номенклатура = НоменклатураНовый;
				НоваяСтрока.Характеристика = ХарактеристикаНовый;
				НоваяСтрока.НоменклатураОприходование = Строка.Номенклатура;
				НоваяСтрока.ХарактеристикаОприходование = Строка.Характеристика;
				НоваяСтрока.Количество = Строка.Количество;
				
				ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, НоваяСтрока);
				
				РассчитатьЦены(НоваяСтрока, СтруктураПараметровОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументОбъектПорча.Товары.Количество() Тогда
		
		ДокументОбъектПорча.Записать(РежимЗаписиДокумента.Запись);
		ПорчаТоваровПоПриходу = ДокументОбъектПорча.Ссылка;
		ОбновитьИнформациюОСвязанныхДокументахВКомментарииПриходногоОрдера();
		ОтобратьСписки();
		
		МассивСтрокСКачествомНовый = СписокТоваров.НайтиСтроки(Новый Структура("Качество", ПредопределенноеЗначение("Перечисление.ГрадацииКачества.Новый")));
		Если МассивСтрокСКачествомНовый.Количество() > 0 Тогда 
			НоваястрокаСписка = СписокТоваровПрихода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваястрокаСписка, МассивСтрокСКачествомНовый[0]);
			НоваястрокаСписка.РаспределеноПоКачеству = Истина;
		КонецЕсли;	
		
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварВоВнутреннееПотреблениеТоваровПоПриходу(Структура, ТекущаяДата)
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если ЗначениеЗаполнено(ВнутреннееПотреблениеТоваровПоПриходу) Тогда
		ДокументОбъект = ВнутреннееПотреблениеТоваровПоПриходу.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
	КонецЕсли;
	
	ДокументОбъект.Дата = ТекущаяДата;
	ДокументОбъект.Склад = СкладОтправитель; 
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.Ответственный = ТекущийПользователь;
	ДокументОбъект.Подразделение = Подразделение;
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	ДокументОбъект.Комментарий = "#АРМ Рекламации: " + ?(ТекущаяОперация = "РаспределениеПоКачеству", "Создан при распредении прихода по качеству", "Создан при разборке пачки");
	
	нс = ДокументОбъект.Товары.НайтиСтроки(
		Новый Структура("Номенклатура, Характеристика",
			Структура.Номенклатура, Структура.Характеристика));
			
	Если нс.Количество() = 1 Тогда
		НоваяСтрока = нс[0];
	Иначе
		НоваяСтрока = ДокументОбъект.Товары.Добавить();	
	КонецЕсли;	

	ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура, "Номенклатура, Характеристика, Количество, КоличествоУпаковок");
	НоваяСтрока.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("MB-000020");
	НоваяСтрока.АналитикаРасходов = ТекущийЗаказПоставщику;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	МассивСтрокСКачествомНовый = СписокТоваров.НайтиСтроки(Новый Структура("Качество", ПредопределенноеЗначение("Перечисление.ГрадацииКачества.Новый")));
	Если МассивСтрокСКачествомНовый.Количество() > 0 Тогда 
		НоваястрокаСписка = СписокТоваровПрихода.Добавить();
		ЗаполнитьЗначенияСвойств(НоваястрокаСписка, МассивСтрокСКачествомНовый[0]);
		НоваястрокаСписка.РаспределеноПоКачеству = Истина;
	КонецЕсли;	

	ВнутреннееПотреблениеТоваровПоПриходу = ДокументОбъект.Ссылка;
	ОбновитьИнформациюОСвязанныхДокументахВКомментарииПриходногоОрдера();
	ОтобратьСписки();
	УстановитьПривилегированныйРежим(Ложь); 
	
КонецПроцедуры

Процедура ОбновитьИнформациюОСвязанныхДокументахВКомментарииПриходногоОрдера()
	
	Если НЕ ЗначениеЗаполнено(ТекущийПриходныйОрдер) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДопИнформацииПоТекущемуПриходу = СтруктураДопИнформацииПоТекущемуПриходу();
	
	Если НЕ ЗначениеЗаполнено(ТекущийПриходныйОрдер.Комментарий) ИЛИ ЗначениеИзСтрокиВнутр(ТекущийПриходныйОрдер.Комментарий) <> СтруктураДопИнформацииПоТекущемуПриходу Тогда
		ДокОбъект = ТекущийПриходныйОрдер.ПолучитьОбъект();
		ДокОбъект.Комментарий = ЗначениеВСтрокуВнутр(СтруктураДопИнформацииПоТекущемуПриходу);
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДокОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры	

Функция СтруктураДопИнформацииПоТекущемуПриходу()
	
	Возврат Новый Структура("ВнутреннееПотреблениеТоваровПоПриходу, ПорчаТоваровПоПриходу, СборкаУпаковокПоПриходу, СписокСборокУпаковокПоРаспределениюПрихода", 
		ВнутреннееПотреблениеТоваровПоПриходу, ПорчаТоваровПоПриходу, СборкаУпаковокПоПриходу, СписокСборокУпаковокПоРаспределениюПрихода);
КонецФункции	

&НаСервере
Функция ПолучитьСтруктуруДопИнформацииИзКомментарияДокумента(ДокументСсылка)
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат ПолучитьСтруктуруИзСтроки("");
	Иначе
		Возврат ПолучитьСтруктуруИзСтроки(ДокументСсылка.Комментарий);
	КонецЕсли;	
КонецФункции

//Проведение документа ПОТ в статусе принят и проведение связанных с ним документов порча и списание
&НаСервере
Процедура ЗавершитьРаспределениеПриходаПоКачествуНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ТекущийПриходныйОрдер) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	//НачатьТранзакцию();
	
	ОбъектПОТ = ТекущийПриходныйОрдер.ПолучитьОбъект();
	ОбъектПОТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.Принят"); 
	ОбъектПОТ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Если ЗначениеЗаполнено(ПорчаТоваровПоПриходу) Тогда
		ДокОбъект = ПорчаТоваровПоПриходу.ПолучитьОбъект();
		Попытка
			ДокОбъект.ДокументОснование = ТекущийПриходныйОрдер;
		Исключение
		КонецПопытки;
				 
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВнутреннееПотреблениеТоваровПоПриходу) Тогда
		ДокОбъект = ВнутреннееПотреблениеТоваровПоПриходу.ПолучитьОбъект();
		
		Попытка
			ДокОбъект.ДокументОснование = ТекущийПриходныйОрдер;
		Исключение
		КонецПопытки;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СборкаУпаковокПоПриходу) Тогда
		ДокОбъект = СборкаУпаковокПоПриходу.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
	Для Каждого ЭлементСписка Из СписокСборокУпаковокПоРаспределениюПрихода Цикл
		ДокОбъект = ЭлементСписка.Значение.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;	
	
	СоздатьИПровестиДокументыПоОтражениюРасхождений();
	//ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьИПровестиДокументыПоОтражениюРасхождений()
	
	//для недостач (товар есть в перемещении на склад рекламации и нет в приходном ордере) формируется приходный ордер на основании перемещения
	//и списание (Внутренее потребление товаров) по статье списания "Недостачи товара, выявленные при приемке на складе рекламаций" с привязкой к ОЖП	
	
	ТаблицаРасхождений = Новый ТаблицаЗначений(); 
	ПолучитьТаблицуРасхождений(ТекущийПриходныйОрдер, ТекущийПриходныйОрдер.Распоряжение, ТаблицаРасхождений);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокОбъектПОТ = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	ДокОбъектПОТ.Дата = ТекущаяДата();
	ДокОбъектПОТ.Склад = СкладОтправитель;
	
	ДокОбъектПОТ.Исполнитель = ТекущийПользователь;
	ДокОбъектПОТ.Ответственный = ТекущийПользователь;
	ДокОбъектПОТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.Принят");
	ДокОбъектПОТ.Распоряжение = ТекущийПриходныйОрдер.Распоряжение;
	ДокОбъектПОТ.СкладскаяОперация = ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ПриемкаПоПеремещению");
		
	ДокОбъектПОТ.Комментарий = "АРМ Рекламации: Расхождения выявленные при приемке на складе рекламаций по перемещению " + ТекущийПриходныйОрдер.Распоряжение;
	
	Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
		Если СтрокаРасхождений.КоличествоРасхождение > 0 Тогда
			НоваяСтрокаДокумента = ДокОбъектПОТ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента, СтрокаРасхождений);
			НоваяСтрокаДокумента.Количество = СтрокаРасхождений.КоличествоРасхождение;
			НоваяСтрокаДокумента.КоличествоУпаковок = СтрокаРасхождений.КоличествоРасхождение;
		КонецЕсли;	
	КонецЦикла;
	
	Если ДокОбъектПОТ.Товары.Количество() > 0 Тогда
		
		ДокОбъектПОТ.Записать(РежимЗаписиДокумента.Запись);
		Попытка
			ДокОбъектПОТ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			
			ЗаписьЖурналаРегистрации("АРМ рекламации", УровеньЖурналаРегистрации.Ошибка , ДокОбъектПОТ.Метаданные() ,  ДокОбъектПОТ.Ссылка, 
				"Неудачная попытка провести документ " + Символы.ПС + ОписаниеОшибки() , );
				
		КонецПопытки;		

		ДокОбъектСписание = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
		ДокОбъектСписание.Дата = ТекущаяДата();
		ДокОбъектСписание.Ответственный = ТекущийПользователь;
		ДокОбъектСписание.Организация = ТекущийПриходныйОрдер.Распоряжение.Организация;
		ДокОбъектСписание.Склад = СкладОтправитель;
		ДокОбъектСписание.Подразделение = СкладОтправитель.Подразделение;
		ДокОбъектСписание.Комментарий = "#АРМ Рекламации: Расхождения выявленные при приемке на складе рекламаций по перемещению "
			+ ТекущийПриходныйОрдер.Распоряжение;
		ДокОбъектСписание.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию");
		ДокОбъектСписание.Товары.Загрузить(ДокОбъектПОТ.Товары.Выгрузить());

		Для Каждого СтрокаТЧ Из ДокОбъектСписание.Товары Цикл
			СтрокаТЧ.СтатьяРасходов = ПолучитьДанныеИзНастроек("СтатьяРасходов Недопоставка товара, выявленная в зоне рекламаций");
			СтрокаТЧ.АналитикаРасходов = ТекущийЗаказПоставщику;
		КонецЦикла;

		Попытка
			ДокОбъектСписание.ДокументОснование = ДокОбъектПОТ.Ссылка;
		Исключение
			СообщитьДляОтладки("Неудачная попытка установить значение реквизита ДокументОснование в документе ВнутреннееПотреблениеТоваров по причине: "
				+ Символы.ПС + Строка(ИнформацияОбОшибке()));
		КонецПопытки;

		
		Попытка
			ДокОбъектСписание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			
			ЗаписьЖурналаРегистрации("АРМ рекламации", УровеньЖурналаРегистрации.Ошибка , ДокОбъектСписание.Метаданные() ,  ДокОбъектСписание.Ссылка, 
				"Неудачная попытка провести документ " + Символы.ПС + ОписаниеОшибки() , );
			
		КонецПопытки		

	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьТаблицуРасхождений(ТекущийПриходныйОрдер, ТекущийПриходныйОрдерРаспоряжение, ТаблицаРасхождений)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика,
	|	СУММА(ПеремещениеТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПеремещения
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &ПеремещениеТоваровСсылка
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПриходногоОрдера
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &ПриходныйОрдерНаТоварыСсылка
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втТоварыПеремещения.Номенклатура, втТоварыПриходногоОрдера.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(втТоварыПеремещения.Характеристика, втТоварыПриходногоОрдера.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(втТоварыПеремещения.Количество, 0) - ЕСТЬNULL(втТоварыПриходногоОрдера.Количество, 0) КАК
	|		КоличествоРасхождение,
	|	втТоварыПеремещения.Количество КАК КоличествоПеремещено,
	|	втТоварыПриходногоОрдера.Количество КАК КоличествоПринято
	|ИЗ
	|	втТоварыПеремещения КАК втТоварыПеремещения
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТоварыПриходногоОрдера КАК втТоварыПриходногоОрдера
	|		ПО втТоварыПеремещения.Номенклатура = втТоварыПриходногоОрдера.Номенклатура
	|		И втТоварыПеремещения.Характеристика = втТоварыПриходногоОрдера.Характеристика";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.УстановитьПараметр("ПриходныйОрдерНаТоварыСсылка", ТекущийПриходныйОрдер);
	Запрос.УстановитьПараметр("ПеремещениеТоваровСсылка", ТекущийПриходныйОрдер.Распоряжение);
	
	ТаблицаРасхождений = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	


#КонецОбласти //СвязьПриходногоОрдераСписанияИПорчи

&НаСервере
Процедура СформироватьТаблицуТоваровПриходаПоКачеству(Данные, ОчиститьТаблицу)
	
	Если ОчиститьТаблицу Тогда
		СписокТоваров.Очистить();
	КонецЕсли;
	
	ГруппаДинамическихЭлементов = Элементы.ГруппаТоварыРаспределитьПоКачеству;
	ТекущаяОперация = "РаспределитьПоКачеству";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	               |	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	               |	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК КоличествоУпаковок,
	               |	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК Количество,
	               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	               |	1 КАК Коэффициент
	               |ПОМЕСТИТЬ втНоменклатураПриходаПред
	               |ИЗ
	               |	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	               |ГДЕ
	               |	ПриходныйОрдерНаТоварыТовары.Ссылка = &ТекущийПриходныйОрдер
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	               |	ПриходныйОрдерНаТоварыТовары.Характеристика,
	               |	ПриходныйОрдерНаТоварыТовары.Упаковка,
	               |	ЕСТЬNULL(ПриходныйОрдерНаТоварыТовары.Упаковка.Числитель, 1)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПорчаТоваровТовары.Номенклатура,
	               |	ПорчаТоваровТовары.Характеристика,
	               |	-СУММА(ПорчаТоваровТовары.Количество),
	               |	-СУММА(ПорчаТоваровТовары.Количество),
	               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	               |	1
	               |ИЗ
	               |	Документ.ПорчаТоваров.Товары КАК ПорчаТоваровТовары
	               |ГДЕ
	               |	ПорчаТоваровТовары.Ссылка = &ПорчаТоваровПоПриходу
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПорчаТоваровТовары.Номенклатура,
	               |	ПорчаТоваровТовары.Характеристика
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВнутреннееПотреблениеТоваровТовары.Номенклатура,
	               |	ВнутреннееПотреблениеТоваровТовары.Характеристика,
	               |	-СУММА(ВнутреннееПотреблениеТоваровТовары.Количество),
	               |	-СУММА(ВнутреннееПотреблениеТоваровТовары.Количество),
	               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	               |	1
	               |ИЗ
	               |	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	               |ГДЕ
	               |	ВнутреннееПотреблениеТоваровТовары.Ссылка = &ВнутреннееПотреблениеТоваровПоприходу
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВнутреннееПотреблениеТоваровТовары.Номенклатура,
	               |	ВнутреннееПотреблениеТоваровТовары.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втНоменклатураПриходаПред.Номенклатура КАК Номенклатура,
	               |	втНоменклатураПриходаПред.Характеристика КАК Характеристика,
	               |	втНоменклатураПриходаПред.Упаковка КАК Упаковка,
	               |	втНоменклатураПриходаПред.Коэффициент КАК Коэффициент,
	               |	СУММА(втНоменклатураПриходаПред.КоличествоУпаковок) КАК КоличествоУпаковок,
	               |	СУММА(втНоменклатураПриходаПред.Количество) КАК Количество
	               |ПОМЕСТИТЬ втНоменклатураПрихода
	               |ИЗ
	               |	втНоменклатураПриходаПред КАК втНоменклатураПриходаПред
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втНоменклатураПриходаПред.Номенклатура,
	               |	втНоменклатураПриходаПред.Характеристика,
	               |	втНоменклатураПриходаПред.Упаковка,
	               |	втНоменклатураПриходаПред.Коэффициент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыДругогоКачества.НоменклатураБрак КАК Номенклатура,
	               |	ТоварыДругогоКачества.ГрадацияКачества КАК Качество,
	               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	               |	0 КАК Количество,
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Характеристика,
	               |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1) КАК Коэффициент,
	               |	0 КАК КоличествоУпаковок
	               |ПОМЕСТИТЬ втТовары
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	               |		ПО ШтрихкодыНоменклатуры.Номенклатура = ТоварыДругогоКачества.Номенклатура
	               |ГДЕ
	               |	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	               |	И ТоварыДругогоКачества.ГрадацияКачества = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ОграниченноГоден)
	               |	И ТоварыДругогоКачества.Подразделение = &Подразделение
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ШтрихкодыНоменклатуры.Номенклатура,
	               |	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый),
	               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	               |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	               |	ШтрихкодыНоменклатуры.Характеристика,
	               |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	               |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1)
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |ГДЕ
	               |	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ШтрихкодыНоменклатуры.Номенклатура,
	               |	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ПустаяСсылка),
	               |	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	               |	0,
	               |	ШтрихкодыНоменклатуры.Характеристика,
	               |	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	               |	0
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |ГДЕ
	               |	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТовары.Номенклатура КАК Номенклатура,
	               |	втТовары.Качество КАК Качество,
	               |	ВЫБОР
	               |		КОГДА втТовары.Качество <> ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый)
	               |			ТОГДА втТовары.Упаковка
	               |		ИНАЧЕ ЕСТЬNULL(втНоменклатураПрихода.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	               |	КОНЕЦ КАК Упаковка,
	               |	ВЫБОР
	               |		КОГДА втТовары.Качество = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ПустаяСсылка)
	               |			ТОГДА 0
	               |		ИНАЧЕ ЕСТЬNULL(втНоменклатураПрихода.Количество, 0)
	               |	КОНЕЦ КАК Количество,
	               |	втТовары.Характеристика КАК Характеристика,
	               |	втТовары.Коэффициент КАК Коэффициент,
	               |	ВЫБОР
	               |		КОГДА втТовары.Качество = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ПустаяСсылка)
	               |			ТОГДА 0
	               |		ИНАЧЕ ЕСТЬNULL(втНоменклатураПрихода.КоличествоУпаковок, 0)
	               |	КОНЕЦ КАК КоличествоУпаковок
	               |ИЗ
	               |	втТовары КАК втТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураПрихода КАК втНоменклатураПрихода
	               |		ПО втТовары.Номенклатура = втНоменклатураПрихода.Номенклатура
	               |			И втТовары.Характеристика = втНоменклатураПрихода.Характеристика
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Количество УБЫВ,
	               |	Качество УБЫВ,
	               |	втТовары.Номенклатура.Наименование";
	
	
	ЗапросПоШК = Новый Запрос; 
	ЗапросПоШК.Текст = "Выбрать Номенклатура ИЗ РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Штрихкод = &Штрихкод";
	ЗапросПоШК.УстановитьПараметр("Штрихкод", Данные.Штрихкод);
	ТЗРезультат = ЗапросПоШК.Выполнить().Выгрузить();
	Если ТЗРезультат.Количество()> 0 Тогда
		НоменклатураПоШтрихкоду = ТЗРезультат[0].Номенклатура;
	КонецЕсли;
	
	ПодразделениеТоваровДругогоКачества = Справочники.СтруктураПредприятия.НайтиПоКоду("00-000002"); //Цветочная база Клумба;
	Если ТаблицаТоваровИзСегментаНеПереводимыхВСток.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураПоШтрихкоду)).Количество() > 0 Тогда
		ПодразделениеТоваровДругогоКачества	= Справочники.СтруктураПредприятия.НайтиПоКоду("00-000001"); //Букет Столицы	
	КонецЕсли;				   
										   
	Запрос.УстановитьПараметр("Подразделение",    ПодразделениеТоваровДругогоКачества);
	Запрос.УстановитьПараметр("Штрихкод",         Данные.Штрихкод);
	Запрос.УстановитьПараметр("ТекущийПриходныйОрдер",   ТекущийПриходныйОрдер);
	Запрос.УстановитьПараметр("ПорчаТоваровПоПриходу",   ПорчаТоваровПоПриходу);
	Запрос.УстановитьПараметр("ВнутреннееПотреблениеТоваровПоПриходу", ВнутреннееПотреблениеТоваровПоПриходу);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ СписокТоваров Цикл
		Строки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Качество", Строка.Номенклатура, Строка.Характеристика, Строка.Качество));
		Если Строки.Количество() Тогда
			Строки[0].Количество = Строки[0].Количество + Строка.Количество;
			Строки[0].КоличествоУпаковок = Строки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
		КонецЕсли;
	КонецЦикла;
	
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();                                                 
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		
		Если Идентификатор Тогда
			ЗаполнитьХарактеристику(Строка, ЭтаФорма["Характеристика0"]);
		КонецЕсли;
		
		ИмяГруппы = "Группа"+Идентификатор;
		СтрокаРодитель = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаДинамическихЭлементов);
		СтрокаРодитель.Заголовок = ?(Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка(), Строка(Строка.Номенклатура)+" БРАК", Строка.Номенклатура);
		СтрокаРодитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		СтрокаРодитель.Высота = 3;
		СтрокаРодитель.РастягиватьПоВертикали = Ложь;
		СтрокаРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		СтрокаРодитель.ОтображатьЗаголовок = Истина;
		СтрокаРодитель.ШрифтЗаголовка = Новый Шрифт("Arial", 16);
		
		ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяГруппы);
		
		СоздатьПоле(Идентификатор,
		"Реквизит"+Идентификатор,  
		Строка.Количество, 
		СтрокаРодитель, 
		НЕ Строка.Качество = Перечисления.ГрадацииКачества.Новый, 
		Новый ОписаниеТипов("Число"),
		,
		"Подключаемая_ПриИзменении", 
		"Подключаемая_АвтоПодбор");
		
		Если Строка.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			ХарактеристикаДоступность = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Строка.Характеристика) Тогда
			ХарактеристикаДоступность = Ложь;
		Иначе
			ХарактеристикаДоступность = Истина;
		КонецЕсли;
		
		СоздатьПоле(Идентификатор,
		"Характеристика"+Идентификатор,  
		Строка.Характеристика, 
		СтрокаРодитель, 
		
		ХарактеристикаДоступность, 
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"),
		,
		, 
		);
	КонецЦикла;
	
	СписокТоваров.Загрузить(ТаблицаЗначений);
	
	
	Если ТаблицаЗначений.Количество() Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда 
			Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча;		
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда 	
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству;		
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКнопкиТоваровПриходаДляВыбора()
	
	ГруппаДинамическихЭлементов = Элементы.СтраницыТовараКВыбору;
	
	Запрос = Новый Запрос;
	
	ПолучитьЗапросПоРаспределениюПриходаПоКачествуДляВыбораТоваров(Запрос);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2","
	|Поместить втПриходУценкаСписание");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1","
	|;
	|
	|/////////////////////////////////////////////////////////////
	|Выбрать 
	|	втПриходУценкаСписание.Номенклатура КАК Номенклатура,
	|	втПриходУценкаСписание.Характеристика КАК Характеристика,
	|	Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	Сумма(ЕстьNULL(втПриходУценкаСписание.КоличествоПриход,0)) КАК Количество,
	|	Сумма(ЕстьNULL(втПриходУценкаСписание.КоличествоПриход,0)) КАК КоличествоУпаковок,
	|	Сумма(ЕстьNULL(втПриходУценкаСписание.КоличествоСписание,0)) + Сумма(ЕстьNULL(втПриходУценкаСписание.КоличествоУценка,0)) КАК КоличествоСписаноИУценено,
	|   Выбор Когда Сумма(ЕстьNULL(втПриходУценкаСписание.КоличествоСписание,0)) + Сумма(ЕстьNULL(втПриходУценкаСписание.КоличествоУценка,0)) > 0 Тогда
	|		Истина
	|	Иначе 
	|		Ложь
	|	Конец КАК РаспределеноПоКачеству
	|Сгруппировать ПО
	|	втПриходУценкаСписание.Номенклатура,
	|	втПриходУценкаСписание.Характеристика
	|");
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Если СтрокаТЗ.РаспределеноПоКачеству Тогда
			НоваяСтрокаСписка = СписокТоваровПрихода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСписка, СтрокаТЗ);
		КонецЕсли;	
	КонецЦикла;	
	
	СписокТоваров.Загрузить(ТаблицаЗначений);
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();
	
	ДоступностьКнопки = Истина;
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		ДоступностьКнопки = НЕ ТоварУжеРаспределен(Строка);
		
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		СтрокаРодитель = ПолучитьСоздатьГруппу(Идентификатор, Идентификатор, ГруппаДинамическихЭлементов, "Группа");
		СоздатьКнопку(Идентификатор,
		Строка(Строка.Номенклатура)+" "+Строка(Строка.Характеристика), 
		Строка.Номенклатура,СтрокаРодитель, ДоступностьКнопки );
	КонецЦикла;
	
	Если ТаблицаЗначений.Количество() Тогда       
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству;
		Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПриходныйОрдерДляРаспределенияПоКачеству(Данные)
	
	МассивСсылок = ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		СсылкаНаДокумент = МассивССылок[0];
		Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			
			УстановитьТекущийПриходныйОрдерИТекущийЗаказПоставщику(СсылкаНаДокумент);
			
		ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТекущийПриходныйОрдер  = СсылкаНаДокумент;
			ТекущийЗаказПоставщику = СсылкаНаДокумент.Распоряжение.ДокументОснование; 
		КонецЕсли;	
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) Тогда //переход к списку товаров прихода. для выполнения распределения по качеству
		
		Элементы.ДекорацияСчитайтеШКПеремещения.Заголовок = "Считайте штрихкод товара";
		
		СтруктураДопИнформацииПоПриходномуОрдеру = ПолучитьСтруктуруДопИнформацииИзКомментарияДокумента(ТекущийПриходныйОрдер);
		//если по ПОТ есть записанные документы порчи и списания, то распределение не делается
		Если НЕ ЗначениеЗаполнено(СтруктураДопИнформацииПоПриходномуОрдеру.ПорчаТоваровПоПриходу)  
			И НЕ ЗначениеЗаполнено(СтруктураДопИнформацииПоПриходномуОрдеру.ВнутреннееПотреблениеТоваровПоПриходу) Тогда 
			
			ТоварыПриходногоОрдера = ТоварыПриходногоОрдера();
			Если ТоварыПриходногоОрдера.КоличествоСтрок = 1 Тогда
				
				Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству;
				СформироватьТаблицуТоваровПриходаПоКачеству(Новый Структура("Штрихкод", ТоварыПриходногоОрдера.ШтрихкодПервойСтроки), Истина);
				УстановитьВидимостьДоступность();
				
			ИначеЕсли ТоварыПриходногоОрдера.КоличествоСтрок > 1 Тогда 	
				
				СформироватьКнопкиТоваровПриходаДляВыбора();	
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийПриходныйОрдерИТекущийЗаказПоставщику(Ссылка, Отказ = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Ссылка) ИЛИ Ссылка = ТекущийПриходныйОрдер Тогда Возврат КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда	
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ДокументПриходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ДокументПриходныйОрдерНаТовары
		|ГДЕ
		|	ДокументПриходныйОрдерНаТовары.Распоряжение = &СсылкаНаДокументПеремещения
		|	И ДокументПриходныйОрдерНаТовары.Проведен
		|	И ДокументПриходныйОрдерНаТовары.Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.ВРаботе)";
		
		Запрос.УстановитьПараметр("СсылкаНаДокументПеремещения", Ссылка);
		ТЗРезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ТЗРезультатЗапроса.Количество() > 0 Тогда
			ТекущийПриходныйОрдер  = ТЗРезультатЗапроса[0].Ссылка; 
			ТекущийЗаказПоставщику = Ссылка.ДокументОснование; 
			Подразделение = ТекущийЗаказПоставщику.Подразделение;
		Иначе
			СообщитьПользователюНаСервере("Не найден приходный ордер к распределению по качеству по штрихкоду перемещения! 
				| Возможно, это перемещение еще не принято в работу!");
			Отказ = Истина;
			
			ТекущийПриходныйОрдер  = Неопределено; 
			ТекущийЗаказПоставщику = Неопределено; 
			Подразделение = Неопределено;
		
			Возврат;
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда	
		
		ТекущийПриходныйОрдер  = Ссылка; 
		ТекущийЗаказПоставщику = Ссылка.Распоряжение.ДокументОснование; 
		Подразделение = ?(ЗначениеЗаполнено(ТекущийЗаказПоставщику.Подразделение), ТекущийЗаказПоставщику.Подразделение, Ссылка.Распоряжение.Подразделение);
	КонецЕсли;
	
	СписокТоваровПрихода.Очистить();
 
	СтруктураДопИнформацииПоПриходномуОрдеруИзКомментария = ПолучитьСтруктуруИзСтроки(ТекущийПриходныйОрдер.Комментарий);
	СтруктураДопИнформацииПоПриходномуОрдеруИзКомментария.Свойство("ПорчаТоваровПоПриходу", ПорчаТоваровПоПриходу);
	СтруктураДопИнформацииПоПриходномуОрдеруИзКомментария.Свойство("ВнутреннееПотреблениеТоваровПоПриходу", ВнутреннееПотреблениеТоваровПоПриходу);
	СтруктураДопИнформацииПоПриходномуОрдеруИзКомментария.Свойство("СборкаУпаковокПоПриходу", СборкаУпаковокПоПриходу);
	СтруктураДопИнформацииПоПриходномуОрдеруИзКомментария.Свойство("СписокСборокУпаковокПоРаспределениюПрихода", СписокСборокУпаковокПоРаспределениюПрихода);
	
	ОтобратьСписки();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапросПоРаспределениюПриходаПоКачеству(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка КАК Упаковка,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПриходногоОрдера
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &ПриходныйОрдерССылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорчаТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПорчаТоваровТовары.Характеристика КАК Характеристика,
	|	ПорчаТоваровТовары.НоменклатураОприходование КАК НоменклатураОприходование,
	|	ПорчаТоваровТовары.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
	|	СУММА(ПорчаТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПорчиПоПриходу
	|ИЗ
	|	Документ.ПорчаТоваров.Товары КАК ПорчаТоваровТовары
	|ГДЕ
	|	ПорчаТоваровТовары.Ссылка = &ПорчаТоваровСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорчаТоваровТовары.Номенклатура,
	|	ПорчаТоваровТовары.Характеристика,
	|	ПорчаТоваровТовары.НоменклатураОприходование,
	|	ПорчаТоваровТовары.ХарактеристикаОприходование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика КАК Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Упаковка КАК Упаковка,
	|	СУММА(ВнутреннееПотреблениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ВнутреннееПотреблениеТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыВнутреннееПотреблениеТоваровПоПриходу
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|ГДЕ
	|	ВнутреннееПотреблениеТоваровТовары.Ссылка = &ВнутреннееПотреблениеТоваровСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыПриходногоОрдера.Номенклатура КАК Номенклатура,
	|	втТоварыПриходногоОрдера.Характеристика КАК Характеристика,
	|	втТоварыПриходногоОрдера.Количество КАК КоличествоПриход,
	|	втТоварыПорчиПоприходу.Количество КАК КоличествоУценка,
	|	втТоварыВнутреннееПотреблениеТоваровПоПриходу.Количество КАК КоличествоСписание,
	|	втТоварыПорчиПоприходу.НоменклатураОприходование КАК НоменклатураОприходование,
	|	втТоварыПорчиПоприходу.ХарактеристикаОприходование КАК ХарактеристикаОприходование
	|ИЗ
	|	втТоварыПриходногоОрдера КАК втТоварыПриходногоОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыПорчиПоПриходу КАК втТоварыПорчиПоприходу
	|		ПО втТоварыПриходногоОрдера.Номенклатура = втТоварыПорчиПоприходу.Номенклатура
	|			И втТоварыПриходногоОрдера.Характеристика = втТоварыПорчиПоприходу.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыВнутреннееПотреблениеТоваровПоПриходу КАК втТоварыВнутреннееПотреблениеТоваровПоПриходу
	|		ПО втТоварыПриходногоОрдера.Номенклатура = втТоварыВнутреннееПотреблениеТоваровПоПриходу.Номенклатура
	|			И втТоварыПриходногоОрдера.Характеристика = втТоварыВнутреннееПотреблениеТоваровПоПриходу.Характеристика
	|
	|%1";
	
	Запрос.УстановитьПараметр("ПриходныйОрдерССылка", ТекущийПриходныйОрдер);
	Запрос.УстановитьПараметр("ПорчаТоваровСсылка", ПорчаТоваровПоПриходу);
	Запрос.УстановитьПараметр("ВнутреннееПотреблениеТоваровСсылка", ВнутреннееПотреблениеТоваровПоПриходу);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапросПоРаспределениюПриходаПоКачествуДляВыбораТоваров(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка КАК Упаковка,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПриходногоОрдера
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &ПриходныйОрдерССылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорчаТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПорчаТоваровТовары.Характеристика КАК Характеристика,
	|	ПорчаТоваровТовары.НоменклатураОприходование КАК НоменклатураОприходование,
	|	ПорчаТоваровТовары.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
	|	СУММА(ПорчаТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПорчиПоПриходу
	|ИЗ
	|	Документ.ПорчаТоваров.Товары КАК ПорчаТоваровТовары
	|ГДЕ
	|	ПорчаТоваровТовары.Ссылка = &ПорчаТоваровСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорчаТоваровТовары.Номенклатура,
	|	ПорчаТоваровТовары.Характеристика,
	|	ПорчаТоваровТовары.НоменклатураОприходование,
	|	ПорчаТоваровТовары.ХарактеристикаОприходование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика КАК Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Упаковка КАК Упаковка,
	|	СУММА(ВнутреннееПотреблениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ВнутреннееПотреблениеТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыВнутреннееПотреблениеТоваровПоПриходу
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|ГДЕ
	|	ВнутреннееПотреблениеТоваровТовары.Ссылка = &ВнутреннееПотреблениеТоваровСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыПриходногоОрдера.Номенклатура КАК Номенклатура,
	|	втТоварыПриходногоОрдера.Характеристика КАК Характеристика,
	|	втТоварыПриходногоОрдера.Количество КАК КоличествоПриход,
	|	втТоварыПорчиПоприходу.Количество КАК КоличествоУценка,
	|	втТоварыВнутреннееПотреблениеТоваровПоПриходу.Количество КАК КоличествоСписание,
	|	втТоварыПорчиПоприходу.НоменклатураОприходование КАК НоменклатураОприходование,
	|	втТоварыПорчиПоприходу.ХарактеристикаОприходование КАК ХарактеристикаОприходование
	|%2
	|ИЗ
	|	втТоварыПриходногоОрдера КАК втТоварыПриходногоОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыПорчиПоПриходу КАК втТоварыПорчиПоприходу
	|		ПО втТоварыПриходногоОрдера.Номенклатура = втТоварыПорчиПоприходу.Номенклатура
	|			И втТоварыПриходногоОрдера.Характеристика = втТоварыПорчиПоприходу.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыВнутреннееПотреблениеТоваровПоПриходу КАК втТоварыВнутреннееПотреблениеТоваровПоПриходу
	|		ПО втТоварыПриходногоОрдера.Номенклатура = втТоварыВнутреннееПотреблениеТоваровПоПриходу.Номенклатура
	|			И втТоварыПриходногоОрдера.Характеристика = втТоварыВнутреннееПотреблениеТоваровПоПриходу.Характеристика
	|
	|%1";
	
	Запрос.УстановитьПараметр("ПриходныйОрдерССылка", ТекущийПриходныйОрдер);
	Запрос.УстановитьПараметр("ПорчаТоваровСсылка", ПорчаТоваровПоПриходу);
	Запрос.УстановитьПараметр("ВнутреннееПотреблениеТоваровСсылка", ВнутреннееПотреблениеТоваровПоПриходу);
	
КонецПроцедуры

#КонецОбласти //СвязьПриходногоОрдераСписанияИПорчи

