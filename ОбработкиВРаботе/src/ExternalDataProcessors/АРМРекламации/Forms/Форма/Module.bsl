#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина); 
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	Организация = Справочники.Организации.НайтиПоНаименованию("Долгов Д.В. ИП");
	ПоискНакладной_Префикс = Организация.Префикс+ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	
	ИнициализироватьРабочееМесто();
	
	ОтобратьСписки();
	
	//Если РолиДоступны("Полные права", ПараметрыСеанса.ТекущийПользователь) Тогда
	Если Строка(ПолучитьПараметрСеансаНаСервере("ТекущийПользователь")) = "Администратор" Тогда	
		ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
	Иначе
		ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;	
	КонецЕсли;	
	ЭтаФорма.Заголовок = "[АРМ рекламации v2.1] на рабочем месте " + Строка(ТекущееРабочееМесто); 
	УстановитьПривилегированныйРежим(Ложь);
	
	//ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Замалиев Дамир");
	ЗаполнитьТаблицаТоваровИзСегментаНеПереводимыхВСток();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КолонкаВысота = 2;
	КолонкаШирина = 2;
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	
	//Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			
			Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка Тогда
				
				ОбработатьШтрихкодыРаспоряжений(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
				
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница =  Элементы.СтраницаРаспределитьПоКачеству Тогда 
				Если Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству Тогда 
					
					
					Если  СтрДлина(Параметр[0]) > 13 Тогда  //длинный шк - шк документа
						УстановитьПриходныйОрдерДляРаспределенияПоКачеству(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));	
						Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) Тогда
							СформироватьКнопкиТоваровПриходаДляВыбора();
						КонецЕсли;	
					ИначеЕсли ЗначениеЗаполнено(ТекущийПриходныйОрдер) //короткий шк - шк товара. Если уже выбран отрдер для распределения, переходим на страницу выбора товара 
						И
						ПроверитьСтрокуНаСоответствиеРегулярномуВыражению(Параметр[0],"\d+") //если шк содержит только цифры - это шк товара, иначе - пользователя
					
						Тогда 
						ОбработатьШтрихкодыТовараНаБрак(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр), Истина);
					КонецЕсли;
					
				//ИначеЕсли Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству 
				//	Тогда
				//	
				//	ОбработатьШтрихкодыТовараНаБрак(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр), Ложь);
					
				ИначеЕсли Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору Тогда 
					ОбработатьШтрихкодыТовараНаБрак(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр), Истина);
					//СформироватьКнопкиТоваровПриходаДляВыбора();
				КонецЕсли;
				
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь Тогда
				ОбработатьШтрихкодыПользователя(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда
				
				Если Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаСтартПорча Тогда
					//ОбработатьШтрихкодыТовараДляПечатиЭтикеток(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
					//СформироватьПачкиНаСервере(Строка.Номенклатура, Строка.Характеристика);
					
				ИначеЕсли Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча 
					И ТекущаяОперация = "Порча" Тогда
					
					ОбработатьШтрихкодыТовараНаБрак(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр), Истина);
					
				ИначеЕсли Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыКУпаковке Тогда
					
					ДанныеПоШтрихкоду = ПолучитьСтруктуруПоШтрихкодуНоменклатуры(Новый Структура("Штрихкод",Параметр[0]));
					Если СписокТоваров.НайтиСтроки(Новый Структура("Номенклатура,Характеристика", ДанныеПоШтрихкоду.Номенклатура, ДанныеПоШтрихкоду.Характеристика)).Количество() > 0 Тогда
						СформироватьПачкиНаСервере(ДанныеПоШтрихкоду.Номенклатура, ДанныеПоШтрихкоду.Характеристика);
					Иначе
						СообщитьПользователюНаКлиенте("Нет товара по штрихкоду " + Параметр[0] + " на складе");
					КонецЕсли;	

				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ТекущийРаздел = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	//Если ЗначениеЗаполнено(СкладПолучатель) Тогда
	//	Элементы.КомандаСоздатьПеремещение.Доступность = Истина;
	//Иначе
	//	Элементы.КомандаСоздатьПеремещение.Доступность = Ложь;
	//КонецЕсли;
	ОтобратьСписки();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Отказ = НЕ СанкционированоеЗакрытие;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
	Если ЗакрытьСистему() Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура КомандаШапкаБрак(Команда)
	Элементы.Страницы.ТекущаяСтраница = Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","Страница")];
	ТекущийРаздел = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КомандаШапкаФиниш(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","Страница")];
	ТекущийРаздел = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьПриемку(Команда)
	СоздатьОрдер()
КонецПроцедуры

&НаКлиенте
Процедура КомандаНайтиНакладную(Команда)
	СоздатьОрдер(НайтиДокумент());
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПеремещение(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СкладОтправитель", СкладОтправитель);
	ПараметрыОткрытия.Вставить("СкладПолучатель", СкладПолучатель);
	ПараметрыОткрытия.Вставить("Организация", Организация);
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта",ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСписок(Команда)
	Элементы["Список"+ТекущийРаздел].Видимость = НЕ Элементы["Список"+ТекущийРаздел].Видимость;
	Элементы["Декорация"+ТекущийРаздел].Видимость = НЕ Элементы["Список"+ТекущийРаздел].Видимость;
	Если ТекущийРаздел = "Приемка" Тогда
		Элементы.ГруппаПоискПриемка.Видимость = НЕ Элементы.ГруппаПоискПриемка.Видимость;
	ИначеЕсли ТекущийРаздел = "Порча" Тогда
		Элементы.Подразделение.Видимость = НЕ Элементы.Подразделение.Видимость;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда
		Если Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча Тогда
			КомандаСформироватьПачки(Команда);
		ИначеЕсли Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыКУпаковке Тогда
			Элементы.страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
		КонецЕсли;	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда	
		Если Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству Тогда
			КомандаОтмена(Команда);
		ИначеЕсли Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству Тогда	
			//Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству;
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;
			СформироватьКнопкиТоваровПриходаДляВыбора();			
		ИначеЕсли Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору Тогда
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству;
		КонецЕсли;	
	КонецЕсли;	
	
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
	ТекущийПриходныйОрдер = Неопределено;
	ТекущийРаздел = Неопределено;
	ТекущийЗаказПоставщику = Неопределено;
	ТекущаяОперация = Неопределено;
	
	ТекущийПриходныйОрдер = Неопределено;
	ПорчаТоваровПоПриходу = ПредопределенноеЗначение("Документ.ПорчаТоваров.ПустаяСсылка");
	ВнутреннееПотреблениеТоваровПоПриходу = ПредопределенноеЗначение("Документ.ВнутреннееПотреблениеТоваров.ПустаяСсылка");
	
	Подразделение = Неопределено;
	ОтобратьСписки();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура BackSpace(Команда)
	ЭтаФорма[ИмяТекущегоРеквизита] = Лев(Строка(ЭтаФорма[ИмяТекущегоРеквизита]), СтрДлина(ЭтаФорма[ИмяТекущегоРеквизита])-1);
	ПересчитатьКоличество();
КонецПроцедуры

&НаКлиенте
Процедура КомандаClear(Команда)
	ЭтаФорма[ИмяТекущегоРеквизита] = 0;
	ПересчитатьКоличество();	
КонецПроцедуры

&НаКлиенте
Процедура БукваНажатие(Команда)
	
	НовоеЗначение = Число(Строка(ЭтаФорма[ИмяТекущегоРеквизита]) + ЭтаФорма.ТекущийЭлемент.Заголовок);
	
	Если СтрНайти(ИмяТекущегоРеквизита,"КоличествоУпаковок") Тогда
		БазовоеЗначение = НовоеЗначение*ПолучитьКоэффициент(ЭтаФорма[СтрЗаменить(ИмяТекущегоРеквизита,"КоличествоУпаковок","Упаковка")]);
		Если БазовоеЗначение>ЭтаФорма[СтрЗаменить(ИмяТекущегоРеквизита,"КоличествоУпаковок","Реквизит")] Тогда
			Возврат;
		ИначеЕсли БазовоеЗначение = 0 Тогда	
			Возврат;
		КонецЕсли;
		ЭтаФорма[ИмяТекущегоРеквизита] = НовоеЗначение;
		СтрокаТаблицы = СписокТоваров.Получить(Число(СтрЗаменить(ИмяТекущегоРеквизита,"КоличествоУпаковок","")));
		СтрокаТаблицы.КоличествоУпаковок = НовоеЗначение;
	Иначе                                                            
		Если НовоеЗначение > ЭтаФорма.Реквизит0 + Строка(ЭтаФорма[ИмяТекущегоРеквизита]) Тогда
			Возврат;
		КонецЕсли;
		ЭтаФорма[ИмяТекущегоРеквизита] = НовоеЗначение;
		ПересчитатьКоличество();
	КонецЕсли;
	
КонецПроцедуры                                                                                                       

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ТекущаяДата = ТекущаяДата();
	
	СборкаУпаковокСоздана = Ложь;
	СоздатьСборкаУпаковок(ТекущаяДата,,СборкаУпаковокСоздана);
	Если ТекущаяОперация = "Пачки" И СборкаУпаковокСоздана Тогда
		ПечатьЭтикеток();
		СформироватьКнопки();
	//ИначеЕсли ТекущаяОперация = "Порча" Тогда
	//	СоздатьПорчу(ТекущаяДата);
	ИначеЕсли ТекущаяОперация = "РаспределитьПоКачеству" И СборкаУпаковокСоздана Тогда
		ДобавитьТоварВСписаниеИПорчуПоПриходу(ТекущаяДата); 
		СформироватьКнопкиТоваровПриходаДляВыбора();
	КонецЕсли;
	
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)
	ПечатьЭтикеток();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьПачки(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча;
	СформироватьКнопки();
	//СформироватьПачкиНаСервере();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДокумент(Команда)
	КомандаСоздатьПеремещение(Команда)
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	СанкционированоеЗакрытие = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаШапкаУпаковать(Команда)
	
	КомандаСформироватьПачки(Команда);
	
КонецПроцедуры


#КонецОбласти

#Область ДинамическиеЭлементы

&НаСервере
Процедура СформироватьТаблицуТоваровПоКачеству(Данные, ОчиститьТаблицу)
	
	Если ОчиститьТаблицу Тогда
		СписокТоваров.Очистить();
	КонецЕсли;
	
	ГруппаДинамическихЭлементов = Элементы.ГруппаТоварыПорча;
	ТекущаяОперация = "Порча";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТоварыДругогоКачества.НоменклатураБрак КАК Номенклатура,
	|	ТоварыДругогоКачества.ГрадацияКачества КАК Качество,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	0 КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1) КАК Коэффициент,
	|	0 КАК КоличествоУпаковок
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = ТоварыДругогоКачества.Номенклатура
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И ТоварыДругогоКачества.ГрадацияКачества = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ОграниченноГоден)
	|	И ТоварыДругогоКачества.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый),
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1)
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|	0,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	|	0
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Качество УБЫВ";
	
	Запрос.УстановитьПараметр("Подразделение",    Подразделение);
	Запрос.УстановитьПараметр("Штрихкод",         Данные.Штрихкод);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ СписокТоваров Цикл
		Строки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Качество", Строка.Номенклатура, Строка.Характеристика, Строка.Качество));
		Если Строки.Количество() Тогда
			Строки[0].Количество = Строки[0].Количество + Строка.Количество;
			Строки[0].КоличествоУпаковок = Строки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
		КонецЕсли;
	КонецЦикла;
	
		
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();                                                 
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		
		Если Идентификатор Тогда
			ЗаполнитьХарактеристику(Строка, ЭтаФорма["Характеристика0"]);
		КонецЕсли;
		
		ИмяГруппы = "Группа"+Идентификатор;
		СтрокаРодитель = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаДинамическихЭлементов);
		СтрокаРодитель.Заголовок = ?(Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка(), Строка(Строка.Номенклатура)+" БРАК", Строка.Номенклатура);
		СтрокаРодитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		СтрокаРодитель.Высота = 3;
		СтрокаРодитель.РастягиватьПоВертикали = Ложь;
		СтрокаРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		СтрокаРодитель.ОтображатьЗаголовок = Истина;
		СтрокаРодитель.ШрифтЗаголовка = Новый Шрифт("Arial", 16);
		
		ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяГруппы);
		
		СоздатьПоле(Идентификатор,
			"Реквизит"+Идентификатор,  
			Строка.Количество, 
			СтрокаРодитель, 
			НЕ Строка.Качество = Перечисления.ГрадацииКачества.Новый, 
			Новый ОписаниеТипов("Число"),
			,
			"Подключаемая_ПриИзменении", 
			"Подключаемая_АвтоПодбор");
		
		Если Строка.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			ХарактеристикаДоступность = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Строка.Характеристика) Тогда
			ХарактеристикаДоступность = Ложь;
		Иначе
			ХарактеристикаДоступность = Истина;
		КонецЕсли;
		
		СоздатьПоле(Идентификатор,
			"Характеристика"+Идентификатор,  
			Строка.Характеристика, 
			СтрокаРодитель, 
			
			ХарактеристикаДоступность, 
			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"),
			,
			, 
			);
	КонецЦикла;
	
	СписокТоваров.Загрузить(ТаблицаЗначений);

	
	Если ТаблицаЗначений.Количество() Тогда
		Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПачкиНаСервере(Номенклатура, Характеристика)
	
	ГруппаДинамическихЭлементов = Элементы.ГруппаТоварыПачки;
	ТекущаяОперация = "Пачки";
	
	Запрос = Новый Запрос;
	
	//Запрос.Текст = "ВЫБРАТЬ
	//|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Номенклатура КАК Номенклатура,
	//|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Характеристика КАК Характеристика,
	//|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.КоличествоОстаток КАК Количество,
	//|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Номенклатура.Качество КАК Качество
	//|ИЗ
	//|	РегистрНакопления.КАБС_ТоварыВУпаковкахНаСкладе.Остатки(
	//|			,
	//|			Склад = &Склад
	//|				И Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК КАБС_ТоварыВУпаковкахНаСкладеОстатки
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Номенклатура,
	//|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Характеристика,
	//|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.КоличествоОстаток,
	//|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Номенклатура.Качество
	//|ИЗ
	//|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.КАБС_ТоварыВУпаковкахНаСкладе.Остатки(, Склад = &Склад) КАК КАБС_ТоварыВУпаковкахНаСкладеОстатки
	//|		ПО ТоварыДругогоКачества.НоменклатураБрак = КАБС_ТоварыВУпаковкахНаСкладеОстатки.Номенклатура
	//|ГДЕ
	//|	ТоварыДругогоКачества.Номенклатура = &Номенклатура"
	//;
	////|	И ТоварыДругогоКачества.Подразделение = &Подразделение";
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Номенклатура КАК Номенклатура,
	|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Характеристика КАК Характеристика,
	|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.КоличествоОстаток КАК Количество,
	|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Номенклатура.Качество КАК Качество,
	|	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрНакопления.КАБС_ТоварыВУпаковкахНаСкладе.Остатки(
	|			,
	|			Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК КАБС_ТоварыВУпаковкахНаСкладеОстатки
	|ГДЕ
	|	ЕСТЬNULL(КАБС_ТоварыВУпаковкахНаСкладеОстатки.Упаковка.Числитель, 1) = 1";
	
	Запрос.УстановитьПараметр("Склад", СкладОтправитель);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	СписокТоваров.Загрузить(ТаблицаЗначений);
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();                                                  
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		ИмяГруппы = "Группа"+Идентификатор;
		СтрокаРодитель = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаДинамическихЭлементов);
		СтрокаРодитель.Заголовок = Строка.Номенклатура;
		СтрокаРодитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		СтрокаРодитель.Высота = 3;
		СтрокаРодитель.РастягиватьПоВертикали = Ложь;
		СтрокаРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		СтрокаРодитель.ОтображатьЗаголовок = Истина;
		СтрокаРодитель.ШрифтЗаголовка = Новый Шрифт("Arial", 16);
		
		ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяГруппы);
		
		СоздатьПоле(Идентификатор,
		"Реквизит"+Идентификатор,  
		Строка.Количество, 
		СтрокаРодитель, 
		Ложь, 
		Новый ОписаниеТипов("Число"),
		,
		"Подключаемая_ПриИзменении", 
		"Подключаемая_АвтоПодбор",
		20);
		//Если Идентификатор Тогда
		//	ЗаполнитьХарактеристику(Строка, ЭтаФорма["Характеристика0"]);
		//КонецЕсли;
		Если Строка.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			ХарактеристикаДоступность = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Строка.Характеристика) Тогда
			ХарактеристикаДоступность = Ложь;
		Иначе
			ХарактеристикаДоступность = Истина;
		КонецЕсли;
		СоздатьПоле(Идентификатор,
		"Характеристика"+Идентификатор,  
		Строка.Характеристика, 
		СтрокаРодитель, 
		
		ХарактеристикаДоступность, 
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"),
		,
		, 
		);
		СоздатьДекорацию(Идентификатор,
		"УпаковкаДекорация"+Идентификатор, 
		"Упаковка", 
		ПолучитьСписокУпаковок(Строка.Номенклатура), 
		СтрокаРодитель, 
		Истина, 
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"),
		"ДекорацияПриемкаОбработкаНавигационнойСсылки",
		"Подключаемая_ДекорацияНажатие",
		10);
		СоздатьПереключатель(Идентификатор,
		"Упаковка"+Идентификатор, 
		"Упаковка", 
		ПолучитьСписокУпаковок(Строка.Номенклатура), 
		СтрокаРодитель, 
		Ложь, 
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"),
		"Подключаемая_ПриИзменении",
		,
		20);
		СоздатьПоле(Идентификатор,
		"КоличествоУпаковок"+Идентификатор,  
		0, 
		СтрокаРодитель, 
		Истина, 
		Новый ОписаниеТипов("Число"), 
		,
		,
		"Подключаемая_АвтоПодбор",
		15);
	КонецЦикла;
	
	Если ТаблицаЗначений.Количество() Тогда                    
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда 
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;	
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда 	
			Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча;	
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКнопки()
	
	ГруппаДинамическихЭлементов = Элементы.СтраницыТовараПорча;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Номенклатура КАК Номенклатура,
	               |	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Характеристика КАК Характеристика,
	               |	КАБС_ТоварыВУпаковкахНаСкладеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	КАБС_ТоварыВУпаковкахНаСкладеОстатки.Упаковка КАК Упаковка,
	               |	КАБС_ТоварыВУпаковкахНаСкладеОстатки.КоличествоУпаковокОстаток КАК КоличествоУпаковок,
	               |	ЕСТЬNULL(КАБС_ТоварыВУпаковкахНаСкладеОстатки.Упаковка.Числитель, 1) КАК Коэффициент
	               |ИЗ
	               |	РегистрНакопления.КАБС_ТоварыВУпаковкахНаСкладе.Остатки(, Склад = &Склад) КАК КАБС_ТоварыВУпаковкахНаСкладеОстатки
	               |ГДЕ
	               |	ЕСТЬNULL(КАБС_ТоварыВУпаковкахНаСкладеОстатки.Упаковка.Числитель, 1) = 1";
	
	Запрос.УстановитьПараметр("Склад", СкладОтправитель);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	СписокТоваров.Загрузить(ТаблицаЗначений);
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		СтрокаРодитель = ПолучитьСоздатьГруппу(Идентификатор, Идентификатор, ГруппаДинамическихЭлементов, "Группа");
		СоздатьКнопку(Идентификатор,
		Строка(Строка.Номенклатура)+" "+Строка(Строка.Характеристика), 
		Строка.Номенклатура,СтрокаРодитель);
	КонецЦикла;
	
	Если ТаблицаЗначений.Количество() Тогда                    
		//Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницыТовараПорча;
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;
		Иначе	
			Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыКУпаковке;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопку(Идентификатор, ИмяКнопки, Подсказка, Группа, Доступность = Истина)
	
	ИмяКоманды = "КомандаКнопки"+Идентификатор;
	Кмд = ЭтаФорма.Команды.Найти(ИмяКоманды);
	Если Кмд = Неопределено Тогда 
		Кмд = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		Кмд.Действие = "Подключаемая_КомандаКнопки";
		Кмд.Заголовок = "КомандаКнопки";
		Кмд.Подсказка = Подсказка;
	Иначе
		Кмд.Действие = "Подключаемая_КомандаКнопки";
		Кмд.Заголовок = "КомандаКнопки";
		Кмд.Подсказка = Подсказка;
	КонецЕсли;
	
	//Добавляем саму кнопку
	Элемент = ЭтаФорма.Элементы.Добавить("Кнопка"+Идентификатор, Тип("КнопкаФормы"), Группа);
	
	Элемент.Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элемент.Родитель.ОтображатьЗаголовок = Ложь;
	//Элемент.Родитель.Отображение = ОтображениеОбычнойГруппы.Нет;
	Элемент.Заголовок = СтрЗаменить(ИмяКнопки," ",Символы.ПС);
	Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	Элемент.ИмяКоманды = ИмяКоманды;
	Элемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
	//Элемент.Картинка = ?(ЭтоГруппа, БиблиотекаКартинок.ПапкаОткрытая, БиблиотекаКартинок.ЭлементСправочника);
	Элемент.Ширина = 18;
	Элемент.Высота = 5;
	Элемент.Шрифт = Новый Шрифт("Arial", 12, Истина);
	
	Элемент.Доступность = Доступность;
	Если НЕ Элемент.Доступность Тогда
		Элемент.ЦветФона = ЦветаСтиля.ЗаблокированныйРеквизитЦвет;
	КонецЕсли;	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы("Кнопка"+Идентификатор);
	//Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПоле(Идентификатор, ИмяРеквизита, Значение, ГруппаРодитель, Доступность, Тип, Заголовок = Неопределено, Обработчик_ПриИзменении = Неопределено, Обработчик_АвтоПодбор = Неопределено, Ширина = Неопределено);
	
	пТекДобРекизит = Новый Массив;
	
	Если СписокУдаляемыхРеквизитов.НайтиСтроки(Новый Структура("Имя", ИмяРеквизита)).Количество() = 0 Тогда
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Тип);
		пТекДобРекизит.Добавить(НовыйРеквизит);
		ИзменитьРеквизиты(пТекДобРекизит,);
		НоваяСтрока = СписокУдаляемыхРеквизитов.Добавить();
		НоваяСтрока.Имя = ИмяРеквизита;
	КонецЕсли;
	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяРеквизита);
	
	//Добавляем саму кнопку
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаРодитель);
	
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Если Ширина = Неопределено Тогда
		Элемент.Ширина = Число(КолонкаШирина);
	Иначе
		Элемент.Ширина = Ширина;
		Элемент.МаксимальнаяШирина = Ширина;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
	КонецЕсли;
	Элемент.Высота = 1;
	Элемент.МаксимальнаяВысота = 1;
	Элемент.АвтоМаксимальнаяВысота = Ложь;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.КнопкаОткрытия = Ложь;
	
	Элемент.ПутьКДанным = ИмяРеквизита;
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Элемент.СписокВыбора.ЗагрузитьЗначения(Значение);
		Элемент.РежимВыбораИзСписка = Ложь;
		Элемент.КнопкаОткрытия = Ложь;
	Иначе
		ЭтаФорма[ИмяРеквизита] = Значение;
	КонецЕсли;
	Элемент.Шрифт = Новый Шрифт("Arial", 16);
	Элемент.ШрифтЗаголовка = Новый Шрифт("Arial", 16);
	Если Заголовок = Неопределено Тогда
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элемент.Заголовок = Заголовок;
	КонецЕсли; 
	
	Если НЕ Обработчик_ПриИзменении = Неопределено Тогда
		Элемент.УстановитьДействие("ПриИзменении", Обработчик_ПриИзменении);
	КонецЕсли;
	
	Если НЕ Обработчик_АвтоПодбор = Неопределено Тогда
		Элемент.УстановитьДействие("АвтоПодбор", Обработчик_АвтоПодбор);
	КонецЕсли;
	
	Элемент.Доступность = Доступность;
	
	Если ИмяРеквизита = "Реквизит1" Тогда
		ИмяТекущегоРеквизита = ИмяРеквизита;
		ЭтаФорма.ТекущийЭлемент = Элемент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПереключатель(Идентификатор, ИмяРеквизита, Заголовок, Значение, ГруппаРодитель, Доступность, Тип, Обработчик_ПриИзменении = Неопределено, Обработчик_АвтоПодбор = Неопределено, Ширина = Неопределено);
	
	пТекДобРекизит = Новый Массив;
	
	Если СписокУдаляемыхРеквизитов.НайтиСтроки(Новый Структура("Имя", ИмяРеквизита)).Количество() = 0 Тогда
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Тип);
		пТекДобРекизит.Добавить(НовыйРеквизит);
		ИзменитьРеквизиты(пТекДобРекизит,);
		НоваяСтрока = СписокУдаляемыхРеквизитов.Добавить();
		НоваяСтрока.Имя = ИмяРеквизита;
		//НоваяСтрока.Реквизит = НовыйРеквизит;
	КонецЕсли;
	//НовыйРеквизит = СписокУдаляемыхРеквизитов.Получить(); 	
	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяРеквизита);
	
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаРодитель);
	
	Элемент.ПутьКДанным = ИмяРеквизита;
	
	Элемент.Вид = ВидПоляФормы.ПолеПереключателя;
	Элемент.ВидПереключателя = ВидПереключателя.Тумблер;
	Элемент.СписокВыбора.ЗагрузитьЗначения(Значение);
	
	Для Каждого ЭлементСписка ИЗ Элемент.СписокВыбора Цикл
		ЭлементСписка.Представление = ПолучитьПредставление(ЭлементСписка.Значение);	
	КонецЦикла;
	
	Элемент.Шрифт = Новый Шрифт("Arial", 16);
	Элемент.ШрифтЗаголовка = Новый Шрифт("Arial", 14);
	Элемент.Заголовок = "Упаковка по";
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.КоличествоКолонок = 1;
	
	Если НЕ Обработчик_ПриИзменении = Неопределено Тогда
		Элемент.УстановитьДействие("ПриИзменении", Обработчик_ПриИзменении);
	КонецЕсли;
	
	//Если НЕ Обработчик_АвтоПодбор = Неопределено Тогда
	//	Элемент.УстановитьДействие("АвтоПодбор", Обработчик_АвтоПодбор);
	//КонецЕсли;
	
	Элемент.Видимость = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДекорацию(Идентификатор, ИмяРеквизита, Заголовок, Значение, ГруппаРодитель, Доступность, Тип, Обработчик_ПриИзменении = Неопределено, Обработчик_АвтоПодбор = Неопределено, Ширина = Неопределено);
	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяРеквизита);
	
	//Добавляем саму кнопку
	Элемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ДекорацияФормы"), ГруппаРодитель);
	
	Элемент.Вид = ВидДекорацииФормы.Картинка;
	Элемент.Гиперссылка = Истина;
	Если Ширина = Неопределено Тогда
		Элемент.Ширина = Число(КолонкаШирина);
	Иначе
		Элемент.Ширина = Ширина;
		Элемент.МаксимальнаяШирина = Ширина;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
	КонецЕсли;
	Элемент.Высота = Число(КолонкаВысота);
	
	Элемент.Шрифт = Новый Шрифт("Arial", 16);
	
	Элемент.Заголовок = "Упаковка";
	Элемент.ТекстНевыбраннойКартинки = ПолучитьПредставление(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	Элемент.РастягиватьПоВертикали = Ложь;
	
	Элемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	
	
	Если НЕ Обработчик_АвтоПодбор = Неопределено Тогда
		Элемент.УстановитьДействие("Нажатие", Обработчик_АвтоПодбор);
	КонецЕсли;
	
	Элемент.Доступность = Доступность;
	Элемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоздатьГруппу(Идентификатор, ИмяКнопки, Родитель, ВидГруппы)
	
 	КоличествоПоВертикали = 4;
	КоличествоПоГоризонтали = 4;
	
	Если ВидГруппы = "Страница" Тогда
		КоличествоВГруппе = КоличествоПоВертикали*КоличествоПоГоризонтали;
		мВидГруппыФормы = ВидГруппыФормы.Страница;
		мГруппировка    = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ВладелецГруппы = Родитель;
	Иначе
		КоличествоВГруппе = КоличествоПоГоризонтали;
		мВидГруппыФормы = ВидГруппыФормы.ОбычнаяГруппа;
		мГруппировка    = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ВладелецГруппы = ПолучитьСоздатьГруппу(Идентификатор, ИмяКнопки, Родитель, "Страница")
	КонецЕсли;
	НомерОбъекта = Цел(Идентификатор/КоличествоВГруппе);
	ИмяГруппы = ВидГруппы+НомерОбъекта;
	ГруппаСтраница = ЭтаФорма.Элементы.Найти(ИмяГруппы);
	
	Если ГруппаСтраница = Неопределено Тогда
		ГруппаСтраница = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ВладелецГруппы);
		ГруппаСтраница.Заголовок = НомерОбъекта;
		ГруппаСтраница.Вид = мВидГруппыФормы;
		ГруппаСтраница.Группировка = мГруппировка;
		//запоминаем имя последней страницы для навигации
		Если ВидГруппы = "Страница" Тогда
			ПоследняяСтраница = ИмяГруппы;
		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяГруппы);
	
	Возврат ГруппаСтраница;
	
КонецФункции

&НаСервере 
Процедура ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяЭлемента = Неопределено, НовыйРеквизит = Неопределено)
	
	//Если НовыйРеквизит <> Неопределено Тогда
	//	СписокУдаляемыхРеквизитов.Добавить(НовыйРеквизит);
	//КонецЕсли;
	
	Если ИмяЭлемента <> Неопределено Тогда
		СписокУдаляемыхЭлементов.Добавить(ИмяЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПрограммноСозданныеРеквизитыИЭлементы()
	
	//убираем реквизиты формы
	Для каждого ЭлементСписка Из СписокУдаляемыхЭлементов Цикл
		Элемент = Элементы.Найти(ЭлементСписка.Значение);
		Если НЕ Элемент = Неопределено Тогда
			Элементы.Удалить(Элементы[ЭлементСписка.Значение]);
		КонецЕсли;	
	КонецЦикла;
	
	//МассивУдаляемыхРеквизитов = Новый Массив;
	//Для каждого ЭлементСписка Из СписокУдаляемыхРеквизитов Цикл
	//    МассивУдаляемыхРеквизитов.Добавить(ЭлементСписка.Значение);
	//КонецЦикла;
	//Реквизиты = ЭтаФорма.ПолучитьРеквизиты();
	//Для Каждого Строка ИЗ Реквизиты Цикл
	//	Если НЕ СписокУдаляемыхРеквизитов.НайтиПоЗначению(Строка.Имя) = Неопределено Тогда
	//		 МассивУдаляемыхРеквизитов.Добавить(Строка.Путь+"."+Строка.Имя); 		
	//	КонецЕсли;
	//КонецЦикла;
	//ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);
	
	//СписокУдаляемыхРеквизитов.Очистить();
	СписокУдаляемыхЭлементов.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемая

&НаКлиенте
Процедура Подключаемая_ПриИзменении(Элемент)
	
	Если СтрНайти(Элемент.Имя, "Реквизит") Тогда
		Индекс = СтрЗаменить(Элемент.Имя,"Реквизит","");
		ТекущиеДанные = СписокТоваров.Получить(Число(Индекс));
		//ТекущиеДанные.Упаковка = Этаформа["Реквизит"+Индекс];
	ИначеЕсли СтрНайти(Элемент.Имя, "Упаковка") Тогда
		Индекс = СтрЗаменить(Элемент.Имя,"Упаковка","");
		ТекущиеДанные = СписокТоваров.Получить(Число(Индекс));
		ТекущиеДанные.Упаковка = Этаформа["Упаковка"+Индекс];
		Элементы["УпаковкаДекорация"+Индекс].ТекстНевыбраннойКартинки = ПолучитьПредставление(Этаформа["Упаковка"+Индекс]);
		Элемент.Видимость = НЕ Элемент.Видимость;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемая_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ИмяТекущегоРеквизита = Элемент.Имя;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемая_ДекорацияНажатие(Элемент)
	
	Декорация = Элементы[СтрЗаменить(Элемент.Имя,"Декорация","")];
	
	Для Каждого Строка ИЗ СписокТоваров Цикл
		ТекДекорация = Элементы["Упаковка"+СписокТоваров.Индекс(Строка)];
		Если Декорация <> ТекДекорация Тогда
			ТекДекорация.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Декорация.Видимость = НЕ Декорация.Видимость;
	
	ИмяТекущегоРеквизита = СтрЗаменить(Декорация.Имя,"Упаковка","КоличествоУпаковок")
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемая_КомандаКнопки(Команда)
	
	Строка = СписокТоваров.Получить(Число(СтрЗаменить(Команда.Имя,"КомандаКнопки","")));
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда
		СформироватьПачкиНаСервере(Строка.Номенклатура, Строка.Характеристика);
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда
		СформироватьТаблицуТоваровПриходаПоКачеству( Новый Структура("Штрихкод", ПолучитьШтрихкодБазовой(Строка.Номенклатура, Строка.Характеристика)),Истина);
	КонецЕсли;	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование
&НаКлиенте
Процедура ОбработатьШтрихкодыРаспоряжений(Данные)
	
	МассивСсылок = ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		СоздатьОрдер(МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыТовараДляПечатиЭтикеток(Данные, ОчиститьТаблицу = Истина)
	
	СформироватьТаблицуТоваровПоКачеству(Данные, ОчиститьТаблицу);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыПользователя(Данные)
	
	ТекущийПользователь = ПолучитьПользователяПоШтрихкоду(Данные.Штрихкод);
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
	Иначе
		Информация = "[Пользователь не обнаружен!]";
		//ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Пользователь не обнаружен.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователяПоШтрихкоду(Штрихкод)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификационныеДанныеПользователей.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ИдентификационныеДанныеПользователей КАК ИдентификационныеДанныеПользователей
	|ГДЕ
	|	ИдентификационныеДанныеПользователей.Штрихкод = &Штрихкод");
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	УстановитьПривилегированныйРежим(Ложь); 
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Элементы.ДекорацияПорча.Заголовок = "Считайте штрихкод товара";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Печать
&НаКлиенте
Процедура ПечатьЭтикеток()
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ИменаМакетов = "ЭтикеткаТовары";
	ВыполнитьКомандуПечати(
	"Обработка.ПечатьЭтикетокИЦенников",
	ИменаМакетов,
	ПараметрКоманды,
	ЭтаФорма,
	ПолучитьПараметры("Рекламация"), "Рекламация");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ВладелецФормы, ПараметрыПечати = Неопределено, ПризнакДляПечати) Экспорт
	
	//// Проверим количество объектов.
	//Если НЕ ПроверитьКоличествоПереданныхОбъектов(МассивОбъектов) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	////ПараметрыПечати.Вставить("ФорматСохранения", ТипФайлаТабличногоДокумента.MXL);
	//
	//// Получим ключ уникальности открываемой формы.
	//КлючУникальности = Строка(Новый УникальныйИдентификатор);
	//
	//ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати,ИмяПринтера");
	//ПараметрыОткрытия.ИмяМенеджераПечати = ИмяМенеджераПечати;
	//ПараметрыОткрытия.ИменаМакетов		 = ИменаМакетов;
	//ПараметрыОткрытия.ПараметрКоманды	 = МассивОбъектов;	
	//ПараметрыОткрытия.ПараметрыПечати	 = ПараметрыПечати;
	//Если ПризнакДляПечати = "Хорошие" И  ТекущийСклад = ПолучитьСкладБС() Тогда
	//	ПараметрыОткрытия.ИмяПринтера = "Green";
	//ИначеЕсли ПризнакДляПечати = "Хорошие" И  ТекущийСклад = ПолучитьСкладКЛ() Тогда
	//	ПараметрыОткрытия.ИмяПринтера = "White";
	//Иначе
	//	ПараметрыОткрытия.ИмяПринтера = "Red";
	//КонецЕсли;
	// Откроем форму печати документов.
	//ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, КлючУникальности,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметры(ДокументДляПечати)
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ЦенаЗаПачку", Новый ОписаниеТипов("Число"));//tror
	Товары.Колонки.Добавить("ЦенаДополнительно", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Товары.Колонки.Добавить("ШтрихкодБазовой", Новый ОписаниеТипов("Строка"));//tror20160603
	Товары.Колонки.Добавить("Партия", Новый ОписаниеТипов("Строка"));//zZz 20170224 #666
	Товары.Колонки.Добавить("Качество", Новый ОписаниеТипов("Строка"));//zZz 20170224 #666
	Товары.Колонки.Добавить("НаименованиеСкладаДляЭтикетки", Новый ОписаниеТипов("Строка"));//tror20160603
	Товары.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ШаблонЭтикетки", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("ШаблонЭтикеткиПодготовлено", Новый ОписаниеТипов("СправочникСсылка.ШаблоныЭтикетокИЦенников"));
	Товары.Колонки.Добавить("КоличествоЭтикеток", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("ОстатокНаСкладе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число"));
	Товары.Колонки.Добавить("Весовой", Новый ОписаниеТипов("Булево"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦены", Новый ОписаниеТипов("Дата"));
	Товары.Колонки.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно", Новый ОписаниеТипов("Дата"));
	//
	//НаименованиеСкладаДляЭтикетки = ПолучитьНаименованиеСкладаДляЭтикетки(СкладОтправитель);//tror20160604
	Для Каждого СтрокаТЧ ИЗ СписокТоваров Цикл
		
		КолВоЭтикеток = СтрокаТЧ.КоличествоУпаковок;
		Если КолВоЭтикеток > 0 Тогда
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
			НоваяСтрока.Упаковка       = СтрокаТЧ.Упаковка;
			НоваяСтрока.Цена = 0;
			НоваяСтрока.ЦенаЗаПачку = 0;
			НоваяСтрока.ЦенаДополнительно = 0;
			НоваяСтрока.Штрихкод =  ПолучитьШК(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика, СтрокаТЧ.Упаковка);
			НоваяСтрока.ШтрихкодБазовой = ПолучитьШтрихКодБазовой(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
				НоваяСтрока.Штрихкод = НоваяСтрока.ШтрихкодБазовой;		
			КонецЕсли;
			НомерНеделиГода = "";
			НомерПартии = "";
			Если СтрДлина(НеделяГода(ТекущаяДата()))=1 Тогда
				Если ДеньНедели(ТекущаяДата())=7 Тогда // zZz 20180314 #666)
					НомерНеделиГода = "0"+Строка(НеделяГода(ТекущаяДата())+1);
				Иначе 
					НомерНеделиГода = "0"+Строка(НеделяГода(ТекущаяДата())); 
				КонецЕсли; 
			Иначе
				Если ДеньНедели(ТекущаяДата())=7 Тогда // zZz 20180314 #666)
					НомерНеделиГода = Строка(НеделяГода(ТекущаяДата())+1);
				Иначе 
					НомерНеделиГода = Строка(НеделяГода(ТекущаяДата())); 
				КонецЕсли;
			КонецЕсли;
			
			Если ДеньНедели(ТекущаяДата())<=2 Тогда 
				НомерПартии = "01"; 
			ИначеЕсли ДеньНедели(ТекущаяДата())>2 И ДеньНедели(ТекущаяДата())<7 Тогда
				НомерПартии = "02";
			ИначеЕсли ДеньНедели(ТекущаяДата())=7 Тогда // zZz 20180314 #666)
				НомерПартии = "01";
			КонецЕсли;
			
			//криптошифрование
			ДеньГода = "";
			Если СтрДлина(ДеньГода(ТекущаяДата())) = 1 Тогда
				ДеньГода = "00"+Строка(ДеньГода(ТекущаяДата()));
			ИначеЕсли СтрДлина(ДеньГода(ТекущаяДата())) = 2 Тогда
				ДеньГода = "0"+Строка(ДеньГода(ТекущаяДата()));
			Иначе
				ДеньГода = Строка(ДеньГода(ТекущаяДата()));
			КонецЕсли;
			НоваяСтрока.Партия = ""+ДеньГода+"/"+НомерНеделиГода+НомерПартии;
			
			//НоваяСтрока.Партия = ""+НомерНеделиГода+НомерПартии;
			НоваяСтрока.Качество = "A";
			НоваяСтрока.НаименованиеСкладаДляЭтикетки = ""; 
			НоваяСтрока.ШаблонЦенника = Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка();//НайтиПоНаименованию("ЦенникБольшойА6 95x138");
			НоваяСтрока.КоличествоЦенников = 0;			
			НоваяСтрока.ШаблонЭтикетки = Справочники.ШаблоныЭтикетокИЦенников.НайтиПоНаименованию("Этикетка58х60 Срезка партии");
			НоваяСтрока.ШаблонЭтикеткиПодготовлено = Справочники.ШаблоныЭтикетокИЦенников.ПустаяСсылка();
			НоваяСтрока.КоличествоЭтикеток = КолВоЭтикеток;
			НоваяСтрока.ОстатокНаСкладе = 0;
			НоваяСтрока.Весовой = Ложь;
			НоваяСтрока.ДатаПоследнегоИзмененияЦены = Дата(1,1,1);
			НоваяСтрока.ДатаПоследнегоИзмененияЦеныДополнительно = Дата(1,1,1); 
		КонецЕсли;
	КонецЦикла;
	//
	МаксимальныйКодВесовогоТовара = 99999; //ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара();
	УстановитьПривилегированныйРежим(Истина);
	ПравилоВыгрузкиВВесы = Ложь; //(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПравилоОбмена, "ТипПодключаемогоОборудования") = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Товары", ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор));
	ПараметрыПечати.Вставить("Организация",   Организация);
	ПараметрыПечати.Вставить("ПравилоОбмена", Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПустаяСсылка());
	ПараметрыПечати.Вставить("МаксимальныйКодВесовогоТовара", МаксимальныйКодВесовогоТовара);
	ПараметрыПечати.Вставить("ПравилоВыгрузкиВВесы",          ПравилоВыгрузкиВВесы);
	ПараметрыПечати.Вставить("ВидЦены",       СкладОтправитель.УчетныйВидЦены);
	ПараметрыПечати.Вставить("Дата",          ТекущаяДата());
	ПараметрыПечати.Вставить("Склад",         СкладОтправитель); //Справочники.Склады.ПустаяСсылка());
	ПараметрыПечати.Вставить("Подразделение", Подразделение);
	ПараметрыПечати.Вставить("НаименованиеСкладаДляЭтикетки", ДокументДляПечати); //ПолучитьНаименованиеСкладаДляЭтикетки(ТекущийСклад)); //tror20160603
	ПараметрыПечати.Вставить("ВидЦеныДополнительно", Справочники.ВидыЦен.ПустаяСсылка());
	ПараметрыПечати.Вставить("ДатаДополнительно",    Дата(1,1,1));
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона", Неопределено);
	//
	Возврат ПараметрыПечати;
	
КонецФункции

&НаСервере
Функция ПолучитьШК(Номенклатура, Характеристика, Упаковка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	|	И ШтрихкодыНоменклатуры.Упаковка = &Упаковка";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий(); 
	Возврат Выборка.Штрихкод;
КонецФункции	

&НаСервере
Функция ПолучитьШтрихКодБазовой(Номенклатура, Характеристика)
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	|	И (ШтрихкодыНоменклатуры.Упаковка ЕСТЬ NULL 
	|			ИЛИ ШтрихкодыНоменклатуры.Упаковка.Числитель = 1
	|			ИЛИ ШтрихкодыНоменклатуры.Упаковка = Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))");
	
	Запрос.Параметры.Вставить("Номенклатура", Номенклатура);
	Запрос.Параметры.Вставить("Характеристика", Характеристика);
	ТЗРез = Запрос.Выполнить().Выгрузить();	
	
	УстановитьПривилегированныйРежим(Ложь); //tror20190326
	
	Если ТЗРез.Количество() > 0 Тогда
		Возврат ТЗРез[0].Штрихкод; 					  
	Иначе
		Возврат ""; 					  
	КонецЕсли;	
	
КонецФункции
#КонецОбласти

#Область Сервис
//
//&НаКлиенте
//Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт
//	
//	//ОткрытьФорму("ВнешняяОбработка.АРМРекламации.Форма.Форма");	
//	
//КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРабочееМесто()
	
	УстановитьПривилегированныйРежим(Истина); 	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиРМК.Ссылка КАК Ссылка,
	|	НастройкиРМК.СкладОтправитель КАК СкладОтправитель,
	|	НастройкиРМК.СкладПолучатель КАК СкладПолучатель
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК
	|ГДЕ
	|	НастройкиРМК.РабочееМесто = &РабочееМесто";
	Запрос.УстановитьПараметр("РабочееМесто", ПараметрыСеанса.РабочееМестоКлиента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиРМК = Выборка.Ссылка;
		СкладОтправитель = Выборка.СкладОтправитель;
		ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КАБС_СоответствияСкладов.СкладОтправитель КАК СкладОтправитель,
		|	КАБС_СоответствияСкладов.СкладПолучатель КАК СкладПолучатель
		|ИЗ
		|	РегистрСведений.КАБС_СоответствияСкладов КАК КАБС_СоответствияСкладов
		|ГДЕ
		|	КАБС_СоответствияСкладов.СкладОтправитель = &СкладОтправитель";
		Запрос.УстановитьПараметр("СкладОтправитель", СкладОтправитель);
		МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СкладПолучатель");
		Элементы.СкладПолучатель.СписокВыбора.ЗагрузитьЗначения(МассивСкладов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Элементы.Подразделение.СписокВыбора.Вставить(0,Справочники.СтруктураПредприятия.НайтиПоКоду("00-000002"));
	Элементы.Подразделение.СписокВыбора.Вставить(1,Справочники.СтруктураПредприятия.НайтиПоКоду("00-000001"));
	
	ПользовательИБ = ПараметрыСеанса.ТекущийПользователь;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
КонецПроцедуры

&НаСервере
Процедура ОтобратьСписки()
	
	Приемка.Отбор.Элементы.Очистить();
	Брак.Отбор.Элементы.Очистить();
	ПорчаТоваров.Отбор.Элементы.Очистить();
	ПеремещенияТоваров.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = Приемка.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладПолучатель");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладОтправитель;
	
	ЭлементОтбора = Брак.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладОтправитель;
	
	ЭлементОтбора = ПорчаТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладОтправитель;
	
	ЭлементОтбора = ПеремещенияТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладОтправитель");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладОтправитель;
	//
	ЭлементОтбора = ПеремещенияТоваров.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладПолучатель");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладПолучатель;
	
	ЭлементОтбора = Остатки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СкладОтправитель;
	
	УстановитьЗначениеЭлементаОтбора(ПриходныеОрдера, "Ссылка.Склад", СкладОтправитель);
	УстановитьЗначениеЭлементаОтбора(ПриходныеОрдера, "Ссылка.Проведен", Истина);
	УстановитьЗначениеЭлементаОтбора(ПриходныеОрдера, "Ссылка.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.ВРаботе"));
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровРаспределитьПоКачеству(ПриходныйОрдерСсылка)
	Если НЕ ЗначениеЗаполнено(ПриходныйОрдерСсылка) Тогда
		Возврат;
	КонецЕсли;	
	Запрос = Новый Запрос;
	ПолучитьЗапросПоРаспределениюПриходаПоКачеству(Запрос);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1"," 
	|ИТОГИ
	|	МАКСИМУМ(КоличествоПриход),
	|	СУММА(КоличествоУценка),
	|	МАКСИМУМ(КоличествоСписание),
	|	МАКСИМУМ(НоменклатураОприходование),
	|	МАКСИМУМ(ХарактеристикаОприходование)
	|ПО
	|	Номенклатура,
	|	Характеристика");
	
	Запрос.УстановитьПараметр("ПриходныйОрдерСсылка", ПриходныйОрдерСсылка);
	ДеревоРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗначениеВРеквизитФормы(ДеревоРезультат, "СписокТоваровРаспределитьПоКачеству");
	
Конецпроцедуры	

&НаСервере
Процедура УстановитьЗначениеЭлементаОтбора(ДинамСписок, ИмяЭлементаОтбора, ЗначениеЭлементаОтбора, 
	
	ВидСравниия = Неопределено, Использование = Истина)
	
	Если ВидСравниия = Неопределено Тогда
		ВидСравниия = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;	
	
	ЭлементОтбора = Неопределено;
	Для Каждого Элемент Из ДинамСписок.Отбор.Элементы Цикл
		Если Строка(Элемент.ЛевоеЗначение) = ИмяЭлементаОтбора Тогда
			ЭлементОтбора = Элемент; 		
		КонецЕсли;	
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = ДинамСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяЭлементаОтбора);
	КонецЕсли;	
	
	ЭлементОтбора.ВидСравнения   = ВидСравниия;
	ЭлементОтбора.Использование  = Использование;
	ЭлементОтбора.ПравоеЗначение = ЗначениеЭлементаОтбора;
	
КонецПроцедуры	
	

&НаСервере
Функция ЗакрытьСистему()
	
	Возврат НЕ ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.НайтиПоНаименованию("Администратор");  	
	
КонецФункции	

&НаСервере
Функция ПолучитьСписокУпаковок(Номенклатура)
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если Номенклатура.НаборУпаковок.Наименование <> "Индивидуальный набор для номенклатуры" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	УпаковкиЕдиницыИзмерения.Числитель";
		Запрос.УстановитьПараметр("Владелец", Номенклатура.НаборУпаковок);
		
		 РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		УстановитьПривилегированныйРежим(Ложь); 
	
		Возврат РезультатЗапроса;

	Иначе		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	УпаковкиЕдиницыИзмерения.Числитель";
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		
		РезультатЗапроса =Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка") ;
			
		Возврат РезультатЗапроса;
		
	КонецЕсли;
	
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьКоличество()
	
	ИтогоДо = СписокТоваров.Итог("Количество");
	Индекс = СтрЗаменить(СтрЗаменить(ИмяТекущегоРеквизита,"Реквизит",""),"КоличествоУпаковок","");
	Строка = СписокТоваров.Получить(Число(Индекс));
	Строка.Количество = ЭтаФорма[ИмяТекущегоРеквизита];
	Строка.КоличествоУпаковок = ЭтаФорма[ИмяТекущегоРеквизита];
	ИтогоПосле = СписокТоваров.Итог("Количество");
	
	Строка = СписокТоваров.Получить(0);
	Строка.Количество = Строка.Количество+(ИтогоДо-ИтогоПосле);
	Строка.КоличествоУпаковок = Строка.КоличествоУпаковок+(ИтогоДо-ИтогоПосле);
	
	ЭтаФорма.Реквизит0 = Строка.Количество;
	
КонецПроцедуры

&НаСервере
Функция ПереключитьРаскладкуDW(Имя) Экспорт
	//возврат Ложь-значит есть ошибки
	
	//Попытка    
	Wrapper = Новый COMОбъект("DynamicWrapper"); 
	Wrapper.Register("USER32.DLL", "ActivateKeyboardLayout", "i=ll", "f=s", "r=l");
	Wrapper.Register("USER32.DLL", "LoadKeyboardLayout", "i=sl", "f=s", "r=t");
	
	//Исключение
	//    Возврат Истина; 
	//КонецПопытки;
	
	SRus = "00000419"; 
	SEng = "00000409";
	
	NRus = 1049; 
	NEng = 1033; 
	
	Попытка
		Если Нрег(Имя) = Нрег("Rus") тогда
			Wrapper.LoadKeyboardLayout(SRus, 1);
			Wrapper.ActivateKeyboardLayout(NRus, 0);    
		Иначе    
			Wrapper.LoadKeyboardLayout(SEng, 1);
			Wrapper.ActivateKeyboardLayout(NEng, 0);    
		КонецЕсли; 
		возврат Ложь;
	Исключение
		Возврат Истина;
	КонецПопытки;
КонецФункции

//&НаСервере
//Функция ПереключитьРаскладкуWS(Имя) Экспорт
//	Ws = Новый COMОбъект("WScript.Shell"); 
//	Ws.SendKeys("^+"); 
//	Ws.SendKeys("%+");
//КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступность();
	
	Элементы.КомандаСоздатьДокумент.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПеремещение
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФиниш;
		
	Элементы.КомандаОтмена.Видимость = НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт;
	
	Элементы.ГруппаНавигация.Видимость = НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСтарт 
		И НЕ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователь;
	
	Элементы.КомандаОК.Видимость = Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча;
		
	Элементы.КомандаНазад.Видимость = (Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча
		ИЛИ Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыКУпаковке)
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча;
		
	Элементы.КомандаОткрытьСписок.Видимость = (Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаСтартПорча
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча)
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка
		ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПеремещение;
	
	Элементы.КомандаСформироватьПачки.Видимость = (Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаСтартПорча
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча) 
		ИЛИ (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству
			И (Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству
			ИЛИ Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору));											  
		
		
	//Элементы.КомандаПечать.Видимость = Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча
	//И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча;
	
	Элементы.Нампад.Видимость = Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча;
		
		
	Элементы.КомандаЗакрыть.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФиниш;
	
	Элементы.Нампад1.Видимость = 
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству И 
		(Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству);
		
	Элементы.КомандаОК.Видимость = Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству И 
		(Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству) ИЛИ 
		(Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча);
		
	Элементы.КомандаНазад.Видимость = ((Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча
		ИЛИ Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыКУпаковке)
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча) ИЛИ 
		(Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству);
		
	//Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству И 
	//		Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору Тогда
	//		Элементы.КомандаНазад.Заголовок = "Петя";
	//КонецЕсли;	
			
		
	Элементы.КомандаЗавершитьРаспределениеПриходаПоКачеству.Видимость = 
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству
		И Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаСтартРаспределитьПоКачеству
		И ЗначениеЗаполнено(ТекущийПриходныйОрдер);
		
	Информация = "" + ?(ЗначениеЗаполнено(ТекущийПриходныйОрдер), " Ордер: " + Сред(ТекущийПриходныйОрдер,27,25)  ,"") 
		+ ?(ЗначениеЗаполнено(ТекущийЗаказПоставщику), " Ож.Поставка: " + Сред(ТекущийЗаказПоставщику,20,25), "") 
		+ ?(ЗначениеЗаполнено(Подразделение), " Бренд: " + Подразделение, "") ;
	
	Если Строка(ТекущийПользователь) = "Администратор" Тогда
		Элементы.ИнформацияДляОтладки.Видимость = Истина;
		ИнформацияДляОтладки = "ТекущийРаздел: " + ТекущийРаздел + "Текущая Операция: " + ТекущаяОперация;
	Иначе
		Элементы.ИнформацияДляОтладки.Видимость = Ложь;
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставление(Упаковка);
	Если Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
		Возврат "1 шт";
	Иначе
		Возврат ?(Упаковка.Числитель = 0, "1 шт", Строка(Упаковка.Числитель)+" шт");
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПеремещениеТоваров.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура СоздатьОрдер(Распоряжение = Неопределено)
	
	Если Распоряжение = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	
	Если ДокументНеПроведен(Распоряжение) Тогда
		Возврат	
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПриемка Тогда
		
		Основание = ПолучитьСтруктуру(Распоряжение);	
		
		ДополнительныеПараметры = Новый Структура("Основание", Основание);	
		
		ФормаСоздаваемогоПриходногоОрдера = ПолучитьФорму("Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента",
			ДополнительныеПараметры,ЭтаФорма,,,);
			
		ДополнительныеПараметры.Вставить("СозданнаяФормаПОТ", ФормаСоздаваемогоПриходногоОрдера);	
		ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыСоздаваемогоПриходногоОрдера", 
			ЭтотОбъект, ДополнительныеПараметры);
			
		ФормаСоздаваемогоПриходногоОрдера.Объект.Ответственный = ТекущийПользователь;
		ФормаСоздаваемогоПриходногоОрдера.Элементы.Ответственный.Доступность = Ложь;
		ФормаСоздаваемогоПриходногоОрдера.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.ВРаботе");
		ФормаСоздаваемогоПриходногоОрдера.Элементы.Статус.Доступность = Ложь;
		ФормаСоздаваемогоПриходногоОрдера.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытииФормы;
		ФормаСоздаваемогоПриходногоОрдера.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСоздаваемогоПриходногоОрдера(Параметр1, Параметр2) Экспорт
	
	СсылкаНаСозданныйПОТ = Параметр2.СозданнаяФормаПОТ.Объект.Ссылка;
	
	//получили ссылку на созданный ПОТ в статусе "ВРаботе", теперь его сразу нужно распределить по качеству 
	ПослеЗакрытияФормыСоздаваемогоПриходногоОрдераНаСервере(СсылкаНаСозданныйПОТ);
	
	
	
КонецПроцедуры	
	


&НаСервере
Функция ДокументНеПроведен(Распоряжение)
	
	Возврат НЕ Распоряжение.Проведен;
	
КонецФункции

&НаСервере
Процедура РассчитатьЦены(ТекущаяСтрока, СтруктураПараметровОтбора)
	
	УстановитьПривилегированныйРежим(Истина); //tror20190326
	
	Цена = ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	Если ЗначениеЗаполнено(Цена) Тогда
		ТекущаяСтрока.Цена = Цена;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦены) Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь); //tror20190326
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСборкаУпаковок(ТекущаяДата, ДокОснование = Неопределено, СборкаСоздана = Истина)
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДокумент = Документы.КАБС_СборкаУпаковок.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДата;
	
	Если ДокОснование = Неопределено Тогда
		
		Если ТекущаяОперация = "Пачки" Тогда 
			НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих;
		Иначе
			НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие;
		КонецЕсли;
		
		НовыйДокумент.Склад = СкладОтправитель;
		ЗаполнитьЗначенияСвойств(НовыйДокумент, СписокТоваров.Получить(0));
		
		НовыйДокумент.КоличествоУпаковок = СписокТоваров.Итог("КоличествоУпаковок");
		//НовыйДокумент.Количество = СписокТоваров.Итог("Количество");
		
		
		Для Каждого Строка ИЗ СписокТоваров Цикл
			Если Строка.Количество И Строка.КоличествоУпаковок И НЕ Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка() Тогда
				НоваяСтрока = НовыйДокумент.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);	
				Если ТекущаяОперация = "Пачки" Тогда 
					НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка), НоваяСтрока.Упаковка.Числитель, 1);
					НоваяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		
		//Если НЕ ТекущаяОперация = "Пачки" Тогда 
			НовыйДокумент.Количество = НовыйДокумент.КоличествоУпаковок * ?(ЗначениеЗаполнено(НовыйДокумент.Упаковка), НовыйДокумент.Упаковка.Числитель, 1);
		//КонецЕсли;	
		
		
	Иначе
		//если передан документ ПОТ создается СборкаУпаковок
		//для оприходования или списания штучных упаковок из ПОТ, рекизиты документа не заполняются
		НовыйДокумент.Склад = СкладОтправитель;
		
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие;
		ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда	
			НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих;
		КонецЕсли;	
		
		Для Каждого СтрокаДокОсн Из ДокОснование.Товары Цикл
			НоваяСтрока = НовыйДокумент.Товары.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокОсн);
			НоваяСтрока.Качество = НоваяСтрока.Номенклатура.Качество;
			
			Если НовыйДокумент.ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				НоваяСтрока.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
			КонецЕсли; 
			
		КонецЦикла;	
		
	КонецЕсли;
	Если НовыйДокумент.Товары.Итог("Количество") > 0 Тогда
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		СборкаСоздана = Истина;
	Иначе
		СборкаСоздана = Ложь;
	КонецЕсли;	
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();                                                   
	
	Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча;
	
	//Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству;
	Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуру(Распоряжение)
	Основание = Новый Структура;
	Основание.Вставить("Распоряжение", Распоряжение);
	Основание.Вставить("Склад", Распоряжение.СкладПолучатель);
	//Основание.Вставить("Помещение", Распоряжение.Помещение);
	//Основание.Вставить("ЗонаПриемки", Распоряжение.ЗонаПриемки);
	Основание.Вставить("ДатаПоступления", ТекущаяДата());
	Возврат Основание;
КонецФункции

&НаСервере
Функция НайтиДокумент()
	УстановитьПривилегированныйРежим(Истина); 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Номер = &Номер";
	Запрос.УстановитьПараметр("Номер", ПоискНакладной_Префикс+"-"+ПоискНакладной_Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь); 
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКоэффициент(Упаковка)
	Если Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
		Возврат 1;
	Иначе
		Возврат Упаковка.Числитель/Упаковка.Знаменатель;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьХарактеристику(Строка, Наименование)
	
	УстановитьПривилегированныйРежим(Истина); //tror20190326
	
	Если Строка.Качество = Перечисления.ГрадацииКачества.Новый
		ИЛИ Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка() 
		ИЛИ Строка.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		Возврат;	
	Иначе
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Владелец КАК Владелец
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &Владелец
		|	И ХарактеристикиНоменклатуры.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Владелец", Строка.Номенклатура);
		Запрос.УстановитьПараметр("Наименование", Наименование.Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Строка.Характеристика = Выборка.Характеристика;		
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь); //tror20190326
	
КонецПроцедуры	

&НаКлиенте
Процедура КомандаШапкаОтчет(Команда)
	  //Zernuhin.D
	ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами ("Приемка в рекламации v.1.1", Неопределено, Истина);
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьВнешнийОтчетОбработкуПоИмениСДопПараметрами(ИмяОтчетаОбработки, ПараметрыОткрытия, ЭтоОтчет, РодительскаяФорма = Неопределено)
	 //Zernuhin.D
	ВнешнийОтчетОбработкаДляОткрытияСсылка = ПолучитьСсылкуНаВнешнийОтчетОбработкуПоИмениНаСервере (ИмяОтчетаОбработки);	
	ИмяОбработкиСлужебное = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВнешнийОтчетОбработкаДляОткрытияСсылка);
	Если ЭтоОтчет Тогда
		ОткрытьФорму("ВнешнийОтчет." + ИмяОбработкиСлужебное + ".Форма", ПараметрыОткрытия, РодительскаяФорма);
	Иначе
		ОткрытьФорму("ВнешняяОбработка." + ИмяОбработкиСлужебное + ".Форма", ПараметрыОткрытия, РодительскаяФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуНаВнешнийОтчетОбработкуПоИмениНаСервере(ИмяОтчетаОбработки)
	 
	УстановитьПривилегированныйРежим(Истина); 
	ССылкаНаОбработку = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ИмяОтчетаОбработки).Ссылка;
	УстановитьПривилегированныйРежим(Ложь);
	 
	Возврат ССылкаНаОбработку;
	
КонецФункции

//tror20181115 добавляем кнопку отчет по остаткам 
&НаКлиенте
Процедура КомандаШапкаОтчетОстатки(Команда)
	
	ПараметрыФормы = Новый Структура("КлючВарианта", "ОстаткиИДоступностьТоваров");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Отбор = Новый Структура("Склад", СкладОтправитель);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ОткрытьФорму("Отчет.ОстаткиИДоступностьТоваров.Форма", 
			ПараметрыФормы, 
			ПараметрыВыполненияКоманды.Источник, 
			ПараметрыВыполненияКоманды.Уникальность, 
			ПараметрыВыполненияКоманды.Окно, 
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры
//tror20181115>

#КонецОбласти


#Область РаспределениеПриходаПоКачеству

//tror20190404

&НаКлиенте
Процедура КомандаШапкаРаспределитьПоКачеству(Команда)
	Элементы.Страницы.ТекущаяСтраница = Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","Страница")];
	Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","Страницы")].ТекущаяСтраница = Элементы[СтрЗаменить(Команда.Имя,"КомандаШапка","СтраницаСтарт")];
	
	ТекущийРаздел = СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "Страница", "");
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуТоваровПриходаПоКачеству(Данные, ОчиститьТаблицу)
	
	Если ОчиститьТаблицу Тогда
		СписокТоваров.Очистить();
	КонецЕсли;
	
	ГруппаДинамическихЭлементов = Элементы.ГруппаТоварыРаспределитьПоКачеству;
	ТекущаяОперация = "РаспределитьПоКачеству";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК КоличествоУпаковок,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	1 КАК Коэффициент
	|ПОМЕСТИТЬ втНоменклатураПрихода
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &ТекущийПриходныйОрдер
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка,
	|	ЕСТЬNULL(ПриходныйОрдерНаТоварыТовары.Упаковка.Числитель, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДругогоКачества.НоменклатураБрак КАК Номенклатура,
	|	ТоварыДругогоКачества.ГрадацияКачества КАК Качество,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	0 КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1) КАК Коэффициент,
	|	0 КАК КоличествоУпаковок
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = ТоварыДругогоКачества.Номенклатура
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|	И ТоварыДругогоКачества.ГрадацияКачества = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ОграниченноГоден)
	|	И ТоварыДругогоКачества.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый),
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1)
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|	0,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Упаковка.Числитель / ШтрихкодыНоменклатуры.Упаковка.Знаменатель, 1),
	|	0
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Качество КАК Качество,
	|	ВЫБОР
	|		КОГДА втТовары.Качество <> ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый)
	|			ТОГДА втТовары.Упаковка
	|		ИНАЧЕ ЕСТЬNULL(втНоменклатураПрихода.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА втТовары.Качество = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(втНоменклатураПрихода.Количество, 0)
	|	КОНЕЦ КАК Количество,
	|	втТовары.Характеристика КАК Характеристика,
	|	втТовары.Коэффициент КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА втТовары.Качество = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(втНоменклатураПрихода.КоличествоУпаковок, 0)
	|	КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураПрихода КАК втНоменклатураПрихода
	|		ПО втТовары.Номенклатура = втНоменклатураПрихода.Номенклатура
	|			И втТовары.Характеристика = втНоменклатураПрихода.Характеристика
	//|			И втТовары.Коэффициент = втНоменклатураПрихода.Коэффициент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	
	ЗапросПоШК = Новый Запрос; 
	ЗапросПоШК.Текст = "Выбрать Номенклатура ИЗ РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Штрихкод = &Штрихкод";
	ЗапросПоШК.УстановитьПараметр("Штрихкод", Данные.Штрихкод);
	ТЗРезультат = ЗапросПоШК.Выполнить().Выгрузить();
	Если ТЗРезультат.Количество()> 0 Тогда
		НоменклатураПоШтрихкоду = ТЗРезультат[0].Номенклатура;
	КонецЕсли;
	
	ПодразделениеТоваровДругогоКачества = Подразделение;
	Если ТаблицаТоваровИзСегментаНеПереводимыхВСток.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураПоШтрихкоду)).Количество() > 0 Тогда
		ПодразделениеТоваровДругогоКачества	= Справочники.СтруктураПредприятия.НайтиПоКоду("00-000002"); //Букет Столицы	
	КонецЕсли;				   
										   
	Запрос.УстановитьПараметр("Подразделение",    ПодразделениеТоваровДругогоКачества);
	Запрос.УстановитьПараметр("Штрихкод",         Данные.Штрихкод);
	Запрос.УстановитьПараметр("ТекущийПриходныйОрдер",   ТекущийПриходныйОрдер);
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка ИЗ СписокТоваров Цикл
		Строки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Качество", Строка.Номенклатура, Строка.Характеристика, Строка.Качество));
		Если Строки.Количество() Тогда
			Строки[0].Количество = Строки[0].Количество + Строка.Количество;
			Строки[0].КоличествоУпаковок = Строки[0].КоличествоУпаковок + Строка.КоличествоУпаковок;
		КонецЕсли;
	КонецЦикла;
	
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();                                                 
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		
		Если Идентификатор Тогда
			ЗаполнитьХарактеристику(Строка, ЭтаФорма["Характеристика0"]);
		КонецЕсли;
		
		ИмяГруппы = "Группа"+Идентификатор;
		СтрокаРодитель = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаДинамическихЭлементов);
		СтрокаРодитель.Заголовок = ?(Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка(), Строка(Строка.Номенклатура)+" БРАК", Строка.Номенклатура);
		СтрокаРодитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		СтрокаРодитель.Высота = 3;
		СтрокаРодитель.РастягиватьПоВертикали = Ложь;
		СтрокаРодитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		СтрокаРодитель.ОтображатьЗаголовок = Истина;
		СтрокаРодитель.ШрифтЗаголовка = Новый Шрифт("Arial", 16);
		
		ЗафиксироватьПрограммноСозданныеРеквизитыИЭлементы(ИмяГруппы);
		
		СоздатьПоле(Идентификатор,
		"Реквизит"+Идентификатор,  
		Строка.Количество, 
		СтрокаРодитель, 
		НЕ Строка.Качество = Перечисления.ГрадацииКачества.Новый, 
		Новый ОписаниеТипов("Число"),
		,
		"Подключаемая_ПриИзменении", 
		"Подключаемая_АвтоПодбор");
		
		Если Строка.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
			ХарактеристикаДоступность = Ложь;
		ИначеЕсли ЗначениеЗаполнено(Строка.Характеристика) Тогда
			ХарактеристикаДоступность = Ложь;
		Иначе
			ХарактеристикаДоступность = Истина;
		КонецЕсли;
		
		СоздатьПоле(Идентификатор,
		"Характеристика"+Идентификатор,  
		Строка.Характеристика, 
		СтрокаРодитель, 
		
		ХарактеристикаДоступность, 
		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"),
		,
		, 
		);
	КонецЦикла;
	
	СписокТоваров.Загрузить(ТаблицаЗначений);
	
	
	Если ТаблицаЗначений.Количество() Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПорча Тогда 
			Элементы.СтраницыПорча.ТекущаяСтраница = Элементы.СтраницаТоварыПорча;		
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству Тогда 	
			Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству;		
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыТовараНаБрак(Данные, ОчиститьТаблицу = Истина)
	
	СтруктураПоШтрихкодуТовара = ПолучитьСтруктуруПоШтрихкодуНоменклатуры(Данные);
	Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) И (НЕ ТоварЕстьВПриходномОрдере(СтруктураПоШтрихкодуТовара) 
		ИЛИ ТоварУжеРаспределен(СтруктураПоШтрихкодуТовара)) Тогда
		СообщитьПользователюНаКлиенте("Товар не найден в текущей приемке или уже обработан");
		Возврат;
	КонецЕсли;	
	
	СформироватьТаблицуТоваровПриходаПоКачеству(Данные, ОчиститьТаблицу);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПриходныйОрдерДляРаспределенияПоКачеству(Данные)
	
	МассивСсылок = ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		СсылкаНаДокумент = МассивССылок[0];
		Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			
			УстановитьТекущийПриходныйОрдерИТекущийЗаказПоставщику(СсылкаНаДокумент);
			
		ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТекущийПриходныйОрдер  = СсылкаНаДокумент;
			ТекущийЗаказПоставщику = СсылкаНаДокумент.Распоряжение.ДокументОснование; 
		КонецЕсли;	
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) Тогда //переход к списку товаров прихода. для выполнения распределения по качеству
		
		Элементы.ДекорацияСчитайтеШКПеремещения.Заголовок = "Считайте штрихкод товара";
		
		СтруктураДопИнформацииПоПриходномуОрдеру = ПолучитьСтруктуруДопИнформацииИзКомментарияДокумента(ТекущийПриходныйОрдер);
		//если по ПОТ есть записанные документы порчи и списания, то распределение не делается
		Если НЕ ЗначениеЗаполнено(СтруктураДопИнформацииПоПриходномуОрдеру.ПорчаТоваровПоПриходу)  
			И НЕ ЗначениеЗаполнено(СтруктураДопИнформацииПоПриходномуОрдеру.ПорчаТоваровПоПриходу) Тогда
			
			ТоварыПриходногоОрдера = ТоварыПриходногоОрдера();
			Если ТоварыПриходногоОрдера.КоличествоСтрок = 1 Тогда
				
				Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыРаспределитьПоКачеству;
				СформироватьТаблицуТоваровПриходаПоКачеству(Новый Структура("Штрихкод", ТоварыПриходногоОрдера.ШтрихкодПервойСтроки), Истина);
				УстановитьВидимостьДоступность();
				
			ИначеЕсли ТоварыПриходногоОрдера.КоличествоСтрок > 1 Тогда 	
				
				СформироватьКнопкиТоваровПриходаДляВыбора();	
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Функция ТоварыПриходногоОрдера()
	
	Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) И ТекущийПриходныйОрдер.Товары.Количество() > 0 Тогда 
		
		ШтрихкодПервойСтроки = ПолучитьШтрихкодБазовой(ТекущийПриходныйОрдер.Товары[0].Номенклатура, ТекущийПриходныйОрдер.Товары[0].Характеристика);
		Возврат Новый Структура("КоличествоСтрок, ШтрихкодПервойСтроки", ТекущийПриходныйОрдер.Товары.Количество(),	ШтрихкодПервойСтроки );
		
	КонецЕсли;
	
	Возврат Новый Структура("КоличествоСтрок, ШтрихкодПервойСтроки", 0, "");
	
КонецФункции

&НаСервере
Процедура УстановитьТекущийПриходныйОрдерИТекущийЗаказПоставщику(Ссылка, Отказ = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) ИЛИ Ссылка = ТекущийПриходныйОрдер Тогда Возврат КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда	
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	ДокументПриходныйОрдерНаТовары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ДокументПриходныйОрдерНаТовары
		|ГДЕ
		|	ДокументПриходныйОрдерНаТовары.Распоряжение = &СсылкаНаДокументПеремещения
		|	И ДокументПриходныйОрдерНаТовары.Проведен
		|	И ДокументПриходныйОрдерНаТовары.Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.ВРаботе)";
		
		Запрос.УстановитьПараметр("СсылкаНаДокументПеремещения", Ссылка);
		ТЗРезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если ТЗРезультатЗапроса.Количество() > 0 Тогда
			ТекущийПриходныйОрдер  = ТЗРезультатЗапроса[0].Ссылка; 
			ТекущийЗаказПоставщику = Ссылка.ДокументОснование; 
			Подразделение = ТекущийЗаказПоставщику.Подразделение;
		Иначе
			СообщитьПользователюНаСервере("Не найден приходный ордер к распределению по качеству по штрихкоду перемещения! 
				| Возможно, это перемещение еще не принято в работу!");
			Отказ = Истина;
			
			ТекущийПриходныйОрдер  = Неопределено; 
			ТекущийЗаказПоставщику = Неопределено; 
			Подразделение = Неопределено;
		
			Возврат;
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда	
		
		ТекущийПриходныйОрдер  = Ссылка; 
		ТекущийЗаказПоставщику = Ссылка.Распоряжение.ДокументОснование; 
		Подразделение = ТекущийЗаказПоставщику.Подразделение;
		СписокТоваровПрихода.Очистить();
	КонецЕсли;
	
	СтруктураДопИнформацииПоПриходномуОрдеруИзКомментария = ПолучитьСтруктуруИзСтроки(ТекущийПриходныйОрдер.Комментарий);
	СтруктураДопИнформацииПоПриходномуОрдеруИзКомментария.Свойство("ПорчаТоваровПоПриходу", ПорчаТоваровПоПриходу);
	СтруктураДопИнформацииПоПриходномуОрдеруИзКомментария.Свойство("ВнутреннееПотреблениеТоваровПоПриходу", ВнутреннееПотреблениеТоваровПоПриходу);
	
	ОтобратьСписки();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруИзСтроки(СтрокаВнутр)
	Если ЗначениеЗаполнено(СОКРЛП(СтрокаВнутр)) Тогда
		Возврат ЗначениеИзСтрокиВнутр(СтрокаВнутр);
	Иначе
		Возврат Новый Структура("ПорчаТоваровПоПриходу, ВнутреннееПотреблениеТоваровПоПриходу", 
			ПредопределенноеЗначение("Документ.ПорчаТоваров.ПустаяСсылка"), ПредопределенноеЗначение("Документ.ВнутреннееПотреблениеТоваров.ПустаяСсылка"));
	КонецЕсли;	
КонецФункции	

&НаСервере
Процедура ДобавитьТоварВСписаниеИПорчуПоПриходу(ТекущаяДата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПорчаТоваровПоПриходу) Тогда
		ДокументОбъектПорча = ПорчаТоваровПоПриходу.ПолучитьОбъект();
	Иначе
		ДокументОбъектПорча = Документы.ПорчаТоваров.СоздатьДокумент();
	КонецЕсли;

	ДокументОбъектПорча.Дата = ТекущаяДата;
	ДокументОбъектПорча.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("Порча товара за счет поставщика");
	ДокументОбъектПорча.Склад = СкладОтправитель;
	ДокументОбъектПорча.АналитикаРасходов = ТекущийЗаказПоставщику;
	ДокументОбъектПорча.ВидЦены = СкладОтправитель.УчетныйВидЦены;
	ДокументОбъектПорча.Организация = Организация;
	ДокументОбъектПорча.Ответственный = ТекущийПользователь;
	ДокументОбъектПорча.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен;
	ДокументОбъектПорча.Комментарий = "#АРМ Рекламации: Создан при распределении товаров приходного ордера по качеству";
	
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка");
	СтруктураПараметровОтбора.ВидЦены = СкладОтправитель.УчетныйВидЦены;
	СтруктураПараметровОтбора.Валюта = СкладОтправитель.УчетныйВидЦены.ВалютаЦены;
	СтруктураПараметровОтбора.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	СтруктураПараметровОтбора.Дата = ТекущаяДата;
	
	Для Каждого Строка ИЗ СписокТоваров Цикл 
		Если Строка.Качество = Перечисления.ГрадацииКачества.Новый Тогда
			НоменклатураНовый = Строка.Номенклатура;
			ХарактеристикаНовый = Строка.Характеристика;
		ИначеЕсли НЕ Строка.Количество = 0 Тогда
			Если Строка.Качество = Перечисления.ГрадацииКачества.ПустаяСсылка() Тогда
				
				ДобавитьТоварВоВнутреннееПотреблениеТоваровПоПриходу(Строка, ТекущаяДата); 
				
			ИначеЕсли НЕ Строка.Качество = Перечисления.ГрадацииКачества.Новый Тогда
				нс = ДокументОбъектПорча.Товары.НайтиСтроки(
					Новый Структура("Номенклатура, Характеристика, НоменклатураОприходование, ХарактеристикаОприходование",
						НоменклатураНовый, ХарактеристикаНовый, Строка.Номенклатура, Строка.Характеристика));
						
				Если нс.Количество() = 1 Тогда
					НоваяСтрока = нс[0];
				Иначе
					НоваяСтрока = ДокументОбъектПорча.Товары.Добавить();	
				КонецЕсли;	
				
				НоваяСтрока.Номенклатура = НоменклатураНовый;
				НоваяСтрока.Характеристика = ХарактеристикаНовый;
				НоваяСтрока.НоменклатураОприходование = Строка.Номенклатура;
				НоваяСтрока.ХарактеристикаОприходование = Строка.Характеристика;
				НоваяСтрока.Количество = Строка.Количество;
				
				ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, НоваяСтрока);
				
				РассчитатьЦены(НоваяСтрока, СтруктураПараметровОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументОбъектПорча.Товары.Количество() Тогда
		
		ДокументОбъектПорча.Записать(РежимЗаписиДокумента.Запись);
		ПорчаТоваровПоПриходу = ДокументОбъектПорча.Ссылка;
		ОбновитьИнформациюОСвязанныхДокументахВКомментарииПриходногоОрдера();
		ОтобратьСписки();
		
		МассивСтрокСКачествомНовый = СписокТоваров.НайтиСтроки(Новый Структура("Качество", ПредопределенноеЗначение("Перечисление.ГрадацииКачества.Новый")));
		Если МассивСтрокСКачествомНовый.Количество() > 0 Тогда 
			НоваястрокаСписка = СписокТоваровПрихода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваястрокаСписка, МассивСтрокСКачествомНовый[0]);
			НоваястрокаСписка.РаспределеноПоКачеству = Истина;
		КонецЕсли;	
		
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварВоВнутреннееПотреблениеТоваровПоПриходу(Структура, ТекущаяДата)
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если ЗначениеЗаполнено(ВнутреннееПотреблениеТоваровПоПриходу) Тогда
		ДокументОбъект = ВнутреннееПотреблениеТоваровПоПриходу.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
	КонецЕсли;
	
	ДокументОбъект.Дата = ТекущаяДата;
	ДокументОбъект.Склад = СкладОтправитель; 
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.Ответственный = ТекущийПользователь;
	ДокументОбъект.Подразделение = Подразделение;
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	ДокументОбъект.Комментарий = "#АРМ Рекламации: " + ?(ТекущаяОперация = "РаспределениеПоКачеству", "Создан при распредении прихода по качеству", "Создан при разборке пачки");
	
	нс = ДокументОбъект.Товары.НайтиСтроки(
		Новый Структура("Номенклатура, Характеристика",
			Структура.Номенклатура, Структура.Характеристика));
			
	Если нс.Количество() = 1 Тогда
		НоваяСтрока = нс[0];
	Иначе
		НоваяСтрока = ДокументОбъект.Товары.Добавить();	
	КонецЕсли;	

	ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура, "Номенклатура, Характеристика, Количество, КоличествоУпаковок");
	НоваяСтрока.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("MB-000020");
	НоваяСтрока.АналитикаРасходов = ТекущийЗаказПоставщику;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	ВнутреннееПотреблениеТоваровПоПриходу = ДокументОбъект.Ссылка;
	ОбновитьИнформациюОСвязанныхДокументахВКомментарииПриходногоОрдера();
	ОтобратьСписки();
	УстановитьПривилегированныйРежим(Ложь); 
	
КонецПроцедуры

Процедура ОбновитьИнформациюОСвязанныхДокументахВКомментарииПриходногоОрдера()
	
	Если НЕ ЗначениеЗаполнено(ТекущийПриходныйОрдер) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДопИнформацииПоТекущемуПриходу = СтруктураДопИнформацииПоТекущемуПриходу();
	
	Если НЕ ЗначениеЗаполнено(ТекущийПриходныйОрдер.Комментарий) ИЛИ ЗначениеИзСтрокиВнутр(ТекущийПриходныйОрдер.Комментарий) <> СтруктураДопИнформацииПоТекущемуПриходу Тогда
		ДокОбъект = ТекущийПриходныйОрдер.ПолучитьОбъект();
		ДокОбъект.Комментарий = ЗначениеВСтрокуВнутр(СтруктураДопИнформацииПоТекущемуПриходу);
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры	

Функция СтруктураДопИнформацииПоТекущемуПриходу()
	Возврат Новый Структура("ВнутреннееПотреблениеТоваровПоПриходу, ПорчаТоваровПоПриходу", ВнутреннееПотреблениеТоваровПоПриходу, ПорчаТоваровПоПриходу);
КонецФункции	

&НаСервере
Функция ПолучитьСтруктуруДопИнформацииИзКомментарияДокумента(ДокументСсылка)
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат ПолучитьСтруктуруИзСтроки("");
	Иначе
		Возврат ПолучитьСтруктуруИзСтроки(ДокументСсылка.Комментарий);
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура КомандаШапкаЗавершитьРаспределениеПриходаПоКачеству(Команда)
	
	ЗавершитьРаспределениеПриходаПоКачествуНаСервере();
	
	ТекущийПриходныйОрдер = Неопределено;
	ТекущийРаздел = Неопределено;
	ТекущийЗаказПоставщику = Неопределено;
	ТекущаяОперация = Неопределено;
	ТекущийПриходныйОрдер = Неопределено;
	
	КомандаНазад(Команда);
	
КонецПроцедуры

//Проведение документа ПОТ в статусе принят и проведение связанных с ним документов порча и списание
&НаСервере
Процедура ЗавершитьРаспределениеПриходаПоКачествуНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ТекущийПриходныйОрдер) Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ОбъектПОТ = ТекущийПриходныйОрдер.ПолучитьОбъект();
	ОбъектПОТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.Принят"); 
	ОбъектПОТ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Если ЗначениеЗаполнено(ПорчаТоваровПоПриходу) Тогда
		ДокОбъект = ПорчаТоваровПоПриходу.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВнутреннееПотреблениеТоваровПоПриходу) Тогда
		ДокОбъект = ВнутреннееПотреблениеТоваровПоПриходу.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ПослеЗакрытияФормыСоздаваемогоПриходногоОрдераНаСервере(СсылкаНаСозданныйПОТ)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаСозданныйПОТ) 
		ИЛИ ТипЗнч(СсылкаНаСозданныйПОТ) <> Тип("ДокументСсылка.ПриходныйОрдерНаТовары") 
		ИЛИ СсылкаНаСозданныйПОТ.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.ВРаботе") Тогда 
		Возврат
	КонецЕсли;
	
	УстановитьТекущийПриходныйОрдерИТекущийЗаказПоставщику(СсылкаНаСозданныйПОТ);
	СоздатьСборкаУпаковок(ТекущаяДата(), СсылкаНаСозданныйПОТ); 
	СформироватьКнопкиТоваровПриходаДляВыбора();	
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьКнопкиТоваровПриходаДляВыбора()
	
	ГруппаДинамическихЭлементов = Элементы.СтраницыТовараКВыбору;
	
	Запрос = Новый Запрос;
	
	ПолучитьЗапросПоРаспределениюПриходаПоКачествуДляВыбораТоваров(Запрос);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%2","
	|Поместить втПриходУценкаСписание");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%1","
	|;
	|
	|/////////////////////////////////////////////////////////////
	|Выбрать 
	|	втПриходУценкаСписание.Номенклатура КАК Номенклатура,
	|	втПриходУценкаСписание.Характеристика КАК Характеристика,
	|	Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	Сумма(втПриходУценкаСписание.КоличествоПриход) КАК Количество,
	|	Сумма(втПриходУценкаСписание.КоличествоПриход) КАК КоличествоУпаковок,
	|	Сумма(втПриходУценкаСписание.КоличествоСписание) + Сумма(втПриходУценкаСписание.КоличествоУценка) КАК КоличествоСписаноИУценено,
	|   Выбор Когда Сумма(втПриходУценкаСписание.КоличествоСписание) + Сумма(втПриходУценкаСписание.КоличествоУценка) > 0 Тогда
	|		Истина
	|	Иначе 
	|		Ложь
	|	Конец КАК РаспределеноПоКачеству
	|Сгруппировать ПО
	|	втПриходУценкаСписание.Номенклатура,
	|	втПриходУценкаСписание.Характеристика
	|");
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Если СтрокаТЗ.РаспределеноПоКачеству Тогда
			НоваяСтрокаСписка = СписокТоваровПрихода.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСписка, СтрокаТЗ);
		КонецЕсли;	
	КонецЦикла;	
	
	СписокТоваров.Загрузить(ТаблицаЗначений);
	
	УдалитьПрограммноСозданныеРеквизитыИЭлементы();
	
	ДоступностьКнопки = Истина;
	
	Для Каждого Строка ИЗ ТаблицаЗначений Цикл
		ДоступностьКнопки = НЕ ТоварУжеРаспределен(Строка);
		
		Идентификатор = ТаблицаЗначений.Индекс(Строка); 
		СтрокаРодитель = ПолучитьСоздатьГруппу(Идентификатор, Идентификатор, ГруппаДинамическихЭлементов, "Группа");
		СоздатьКнопку(Идентификатор,
		Строка(Строка.Номенклатура)+" "+Строка(Строка.Характеристика), 
		Строка.Номенклатура,СтрокаРодитель, ДоступностьКнопки );
	КонецЦикла;
	
	Если ТаблицаЗначений.Количество() Тогда       
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРаспределитьПоКачеству;
		Элементы.СтраницыРаспределитьПоКачеству.ТекущаяСтраница = Элементы.СтраницаТоварыКВыбору;
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура ПолучитьЗапросПоРаспределениюПриходаПоКачеству(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка КАК Упаковка,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПриходногоОрдера
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &ПриходныйОрдерССылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорчаТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПорчаТоваровТовары.Характеристика КАК Характеристика,
	|	ПорчаТоваровТовары.НоменклатураОприходование КАК НоменклатураОприходование,
	|	ПорчаТоваровТовары.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
	|	СУММА(ПорчаТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПорчиПоПриходу
	|ИЗ
	|	Документ.ПорчаТоваров.Товары КАК ПорчаТоваровТовары
	|ГДЕ
	|	ПорчаТоваровТовары.Ссылка = &ПорчаТоваровСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорчаТоваровТовары.Номенклатура,
	|	ПорчаТоваровТовары.Характеристика,
	|	ПорчаТоваровТовары.НоменклатураОприходование,
	|	ПорчаТоваровТовары.ХарактеристикаОприходование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика КАК Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Упаковка КАК Упаковка,
	|	СУММА(ВнутреннееПотреблениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ВнутреннееПотреблениеТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыВнутреннееПотреблениеТоваровПоПриходу
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|ГДЕ
	|	ВнутреннееПотреблениеТоваровТовары.Ссылка = &ВнутреннееПотреблениеТоваровСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыПриходногоОрдера.Номенклатура КАК Номенклатура,
	|	втТоварыПриходногоОрдера.Характеристика КАК Характеристика,
	|	втТоварыПриходногоОрдера.Количество КАК КоличествоПриход,
	|	втТоварыПорчиПоприходу.Количество КАК КоличествоУценка,
	|	втТоварыВнутреннееПотреблениеТоваровПоПриходу.Количество КАК КоличествоСписание,
	|	втТоварыПорчиПоприходу.НоменклатураОприходование КАК НоменклатураОприходование,
	|	втТоварыПорчиПоприходу.ХарактеристикаОприходование КАК ХарактеристикаОприходование
	|ИЗ
	|	втТоварыПриходногоОрдера КАК втТоварыПриходногоОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыПорчиПоПриходу КАК втТоварыПорчиПоприходу
	|		ПО втТоварыПриходногоОрдера.Номенклатура = втТоварыПорчиПоприходу.Номенклатура
	|			И втТоварыПриходногоОрдера.Характеристика = втТоварыПорчиПоприходу.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыВнутреннееПотреблениеТоваровПоПриходу КАК втТоварыВнутреннееПотреблениеТоваровПоПриходу
	|		ПО втТоварыПриходногоОрдера.Номенклатура = втТоварыВнутреннееПотреблениеТоваровПоПриходу.Номенклатура
	|			И втТоварыПриходногоОрдера.Характеристика = втТоварыВнутреннееПотреблениеТоваровПоПриходу.Характеристика
	|
	|%1";
	//|ИТОГИ
	//|	МАКСИМУМ(КоличествоПриход),
	//|	СУММА(КоличествоУценка),
	//|	МАКСИМУМ(КоличествоСписание),
	//|	МАКСИМУМ(НоменклатураОприходование),
	//|	МАКСИМУМ(ХарактеристикаОприходование)
	//|ПО
	//|	Номенклатура,
	//|	Характеристика";
	
	
	Запрос.УстановитьПараметр("ПриходныйОрдерССылка", ТекущийПриходныйОрдер);
	Запрос.УстановитьПараметр("ПорчаТоваровСсылка", ПорчаТоваровПоПриходу);
	Запрос.УстановитьПараметр("ВнутреннееПотреблениеТоваровСсылка", ВнутреннееПотреблениеТоваровПоПриходу);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапросПоРаспределениюПриходаПоКачествуДляВыбораТоваров(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика КАК Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка КАК Упаковка,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПриходногоОрдера
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &ПриходныйОрдерССылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	ПриходныйОрдерНаТоварыТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорчаТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПорчаТоваровТовары.Характеристика КАК Характеристика,
	|	ПорчаТоваровТовары.НоменклатураОприходование КАК НоменклатураОприходование,
	|	ПорчаТоваровТовары.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
	|	СУММА(ПорчаТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыПорчиПоПриходу
	|ИЗ
	|	Документ.ПорчаТоваров.Товары КАК ПорчаТоваровТовары
	|ГДЕ
	|	ПорчаТоваровТовары.Ссылка = &ПорчаТоваровСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорчаТоваровТовары.Номенклатура,
	|	ПорчаТоваровТовары.Характеристика,
	|	ПорчаТоваровТовары.НоменклатураОприходование,
	|	ПорчаТоваровТовары.ХарактеристикаОприходование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика КАК Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Упаковка КАК Упаковка,
	|	СУММА(ВнутреннееПотреблениеТоваровТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ВнутреннееПотреблениеТоваровТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ втТоварыВнутреннееПотреблениеТоваровПоПриходу
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|ГДЕ
	|	ВнутреннееПотреблениеТоваровТовары.Ссылка = &ВнутреннееПотреблениеТоваровСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Характеристика,
	|	ВнутреннееПотреблениеТоваровТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыПриходногоОрдера.Номенклатура КАК Номенклатура,
	|	втТоварыПриходногоОрдера.Характеристика КАК Характеристика,
	|	втТоварыПриходногоОрдера.Количество КАК КоличествоПриход,
	|	втТоварыПорчиПоприходу.Количество КАК КоличествоУценка,
	|	втТоварыВнутреннееПотреблениеТоваровПоПриходу.Количество КАК КоличествоСписание,
	|	втТоварыПорчиПоприходу.НоменклатураОприходование КАК НоменклатураОприходование,
	|	втТоварыПорчиПоприходу.ХарактеристикаОприходование КАК ХарактеристикаОприходование
	|%2
	|ИЗ
	|	втТоварыПриходногоОрдера КАК втТоварыПриходногоОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыПорчиПоПриходу КАК втТоварыПорчиПоприходу
	|		ПО втТоварыПриходногоОрдера.Номенклатура = втТоварыПорчиПоприходу.Номенклатура
	|			И втТоварыПриходногоОрдера.Характеристика = втТоварыПорчиПоприходу.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыВнутреннееПотреблениеТоваровПоПриходу КАК втТоварыВнутреннееПотреблениеТоваровПоПриходу
	|		ПО втТоварыПриходногоОрдера.Номенклатура = втТоварыВнутреннееПотреблениеТоваровПоПриходу.Номенклатура
	|			И втТоварыПриходногоОрдера.Характеристика = втТоварыВнутреннееПотреблениеТоваровПоПриходу.Характеристика
	|
	|%1";
	//|ИТОГИ
	//|	МАКСИМУМ(КоличествоПриход),
	//|	СУММА(КоличествоУценка),
	//|	МАКСИМУМ(КоличествоСписание),
	//|	МАКСИМУМ(НоменклатураОприходование),
	//|	МАКСИМУМ(ХарактеристикаОприходование)
	//|ПО
	//|	Номенклатура,
	//|	Характеристика";
	
	
	Запрос.УстановитьПараметр("ПриходныйОрдерССылка", ТекущийПриходныйОрдер);
	Запрос.УстановитьПараметр("ПорчаТоваровСсылка", ПорчаТоваровПоПриходу);
	Запрос.УстановитьПараметр("ВнутреннееПотреблениеТоваровСсылка", ВнутреннееПотреблениеТоваровПоПриходу);
	
КонецПроцедуры

// 
//&НаСервере
//Функция ПозицияЕщеНеВыбиралась(Строка)
//	Если СписокТоваровПрихода.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура, Строка.Характеристика)).Количество() > 0 Тогда
//		Возврат Ложь;
//	Иначе
//		Возврат Истина;
//	КонецЕсли;	
//КонецФункции	
	
&НаСервере
Функция ПолучитьПараметрСеансаНаСервере(НаименованиеПараметра)
	Возврат ПараметрыСеанса[НаименованиеПараметра];
КонецФункции

&НаСервере
Процедура СообщитьПользователюНаСервере(ТекстСообщения)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
КонецПроцедуры	

&НаКлиенте
Процедура СообщитьПользователюНаКлиенте(ТекстСообщения)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
КонецПроцедуры	
		

// Возвращает результат проверки строки на соответствие регулярному выражению
// 	записанному следующими символами
//	. - любой символ
//	+ - один или более раз, пример ".+" - один или более любой символ.
//	* - ноль или более раз, пример ".*" - любое количество любых символов (даже ни одного).
//	[n-m] - символ от m до n, пример: "[0-9]+" - одна или более цифр(а).
//	\d - цифра, пример \d+ - одна или более цифр(а).
//	\D - не цифра.
//	\s - пробельный символ - ТАБ, пробел, перенос строки, возврат каретки и т.п.
//	\S - непробельный символ.
//	\w - буква, цифра, подчеркивание.
//	\W - не буква, не цифра и не подчеркивание соответственно.
//	^ - начало текста, например "^\d+" - строка начинается с цифры.
//	$ - конец текста, например "\D+$" - строка заканчивается НЕ цифрой.
//	{m,n} - шаблон для от m до n символов, например "\d{2,4}" - от двух до четырех цифр. Можно указать одну и всего цифру для строгого соответвия.
//	\ - экранирует спецсимволы. Например, "\." - символ точки. 
//
// Параметры:
//  Строка       - строка для проверки
//  Фасет 		 - регулярное выражение.
// 
// 
// Возвращаемое значение:
//  Булево  - Истина - строка соответствует шаблону, Ложь - не соответствует.
// 
&НаСервере
	Функция ПроверитьСтрокуНаСоответствиеРегулярномуВыражению(Строка, Фасет)

		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку("<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
			|<package targetNamespace=""sample-my-package"">
			|<valueType name=""testtypes"" base=""xs:string"">
			|<pattern>" + Фасет + "</pattern>
			|</valueType>
			|<objectType name=""TestObj"">
			|<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
			|</objectType>
			|</package>
			|</Model>");

		Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
		МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
		Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
		Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

		Попытка
			Тест.TestItem = Строка;
			Возврат Истина
		Исключение
			Возврат Ложь
		КонецПопытки;

	КонецФункции

&НаКлиенте
Процедура ПриходныеОрдераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	УстановитьТекущийПриходныйОрдерИТекущийЗаказПоставщику(ВыбраннаяСтрока);
	СформироватьКнопкиТоваровПриходаДляВыбора();
КонецПроцедуры

&НаКлиенте
Процедура ПриходныеОрдераПриАктивизацииСтроки(Элемент)
	СсылкаНаПОТ = Неопределено;
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Свойство("Ссылка", СсылкаНаПОТ) Тогда
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПОТ) Тогда
		ОбновитьСписокТоваровРаспределитьПоКачеству(СсылкаНаПОТ);
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицаТоваровИзСегментаНеПереводимыхВСток()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СегментТоваровНеПереводимыхВСток = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СегментТоваровНеПереводимыхВСток) Тогда
		
		Если Не ЗначениеЗаполнено(СегментТоваровНеПереводимыхВСток) Тогда
			СегментТоваровНеПереводимыхВСток = Справочники.СегментыНоменклатуры.НайтиПоКоду("MB-00000111", Ложь);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СегментТоваровНеПереводимыхВСток) Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаНоменклатурыСегмента = СегментыСервер.ТаблицаЗначений(СегментТоваровНеПереводимыхВСток);
	ТаблицаНоменклатурыСегмента.Свернуть("Номенклатура");	
	ТаблицаТоваровИзСегментаНеПереводимыхВСток.Загрузить(ТаблицаНоменклатурыСегмента);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Функция ТоварЕстьВПриходномОрдере(Данные)
	
	Если ЗначениеЗаполнено(ТекущийПриходныйОрдер) И ТекущийПриходныйОрдер.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
		Данные.Номенклатура, Данные.Характеристика)).Количество() > 0 Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;		
	
КонецФункции	

&НаСервере
Функция ТоварУжеРаспределен(Данные)
	
	Если СписокТоваровПрихода.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, РаспределеноПоКачеству", 
		Данные.Номенклатура, Данные.Характеристика, Истина)).Количество() > 0 Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПоШтрихкодуНоменклатуры(Данные)
	
	СтруктураДанныхПоШтрихкодуДляВозврата = Новый Структура("Номенклатура, Характеристика, Упаковка, Штрихкод");
	Штрихкод = "";
	Если НЕ ЗначениеЗаполнено(Данные) ИЛИ ТипЗнч(Данные) <> Тип("Структура") 
		ИЛИ Данные.Свойство("Штрихкод", Штрихкод) = Неопределено Тогда
		СообщитьПользователюНаСервере("Неверные данные для запроса информации по штрихкоду!");
		Возврат СтруктураДанныхПоШтрихкодуДляВозврата;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать * Из РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Штрихкод = &Штрихкод";
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанныхПоШтрихкодуДляВозврата, РезультатЗапроса[0]);
	КонецЕсли;	
	
	Возврат СтруктураДанныхПоШтрихкодуДляВозврата;
	
КонецФункции	

#конецОбласти
//tror20190404>

